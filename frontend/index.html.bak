<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mr. Smith's Learning Canvas</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="lib/normalizeProse.js"></script>
    <script src="lib/mathSanitizer.js"></script>
    <script src="lib/sanitizeExamText.js"></script>
    <script>
      // Safe, cross-browser math fixer that ONLY edits text inside math delimiters.
      // Supports $...$, $$...$$, \(...\), \[...\]
      (function () {
        // Insert a "\" before common LaTeX macros when missing, but don't use look-behind
        const MACRO_FIX = /(^|[^\\])\b(frac|sqrt|times|div|cdot|le|ge|lt|gt|pi|sin|cos|tan|log|ln|pm|mp|neq|approx|theta|alpha|beta|gamma)\b(?=\s*[\[{(])/g;

        function addMissingBackslashesInSegment(seg) {
          return seg.replace(MACRO_FIX, (_m, p1, macro) => `${p1}\\${macro}`);
        }

        // Apply fix ONLY inside math segments
        function fixAllMathInText(input) {
          if (typeof input !== 'string' || input.length === 0) return input;

          // $...$ and $$...$$
          input = input.replace(/\$\$([\s\S]*?)\$\$|\$([\s\S]*?)\$/g, (m, m1, m2) => {
            const body = m1 ?? m2;
            const fixed = addMissingBackslashesInSegment(body);
            return m1 != null ? `$$${fixed}$$` : `$${fixed}$`;
          });

          // \(...\)
          input = input.replace(/\\\(([\s\S]*?)\\\)/g, (_m, body) => `\\(${addMissingBackslashesInSegment(body)}\\)`);

          // \[...\]
          input = input.replace(/\\\[([\s\S]*?)\\\]/g, (_m, body) => `\\[${addMissingBackslashesInSegment(body)}\\]`);

          return input;
        }

        // Expose/override
        window.TextSanitizer = window.TextSanitizer || {};
        window.TextSanitizer.fixAllMathInText = fixAllMathInText;
        window.TextSanitizer.addMissingBackslashesInMath = fixAllMathInText; // backward-compat with your current call site
      })();
    </script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" type="text/css" href="https://jsxgraph.org/distrib/jsxgraph.css" />
    <script type="text/javascript" src="https://jsxgraph.org/distrib/jsxgraphcore.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&family=Poppins:wght@600;700&display=swap" rel="stylesheet">

    <script src="https://cdn.jsdelivr.net/npm/dompurify@3.0.6/dist/purify.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js" crossorigin="anonymous"></script>

    <script>
        window.__APP_CONFIG__ = window.__APP_CONFIG__ || {};
        if (typeof window.__APP_CONFIG__.geometryFiguresEnabled === 'undefined') {
            window.__APP_CONFIG__.geometryFiguresEnabled = false;
        }
    </script>
    <script>
      window.__APP_CONFIG__ = window.__APP_CONFIG__ || {};
      if (typeof window.__APP_CONFIG__.mathRenderMode === 'undefined') {
        window.__APP_CONFIG__.mathRenderMode = 'plain'; // 'plain' now, 'math-lite' later
      }
    </script>
    <script src="https://ged-website.onrender.com/client-config.js"></script>

    <script>
        window.addEventListener('error', (event) => {
            const detail = event.error || event.message;
            console.error('Global error:', detail);
        });
        window.addEventListener('unhandledrejection', (event) => {
            console.error('Unhandled promise rejection:', event.reason);
        });

        async function previewBypass() {
            const isLocalhost = typeof window !== 'undefined' && ['localhost', '127.0.0.1', '0.0.0.0'].includes(window.location.hostname);
            const origin = isLocalhost ? 'http://localhost:3001' : 'https://ged-website.onrender.com';
            try {
                const response = await fetch(`${origin}/admin/bypass-login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({ password: 'Kingmaker123' })
                });
                if (!response.ok) {
                    throw new Error(`Preview bypass failed with status ${response.status}`);
                }
                window.location.reload();
                return true;
            } catch (error) {
                console.error('Preview bypass failed:', error);
                return false;
            }
        }

        window.previewBypass = previewBypass;
    </script>

    <script>
        (function preloadPreferences() {
            if (typeof window === 'undefined' || typeof document === 'undefined') {
                return;
            }
            const root = document.documentElement;
            const sizeClasses = ['fs-sm', 'fs-md', 'fs-lg', 'fs-xl'];
            try {
                const stored = localStorage.getItem('prefs');
                if (!stored) {
                    return;
                }
                const parsed = JSON.parse(stored);
                if (parsed && typeof parsed === 'object') {
                    sizeClasses.forEach((cls) => root.classList.remove(cls));
                    const sizes = new Set(['sm', 'md', 'lg', 'xl']);
                    const fontSize = sizes.has(parsed.fontSize) ? parsed.fontSize : 'md';
                    root.classList.add(`fs-${fontSize}`);
                }
            } catch (error) {
                console.warn('Failed to preload saved preferences:', error);
            }
        })();
    </script>

    <script>
        (function preloadTheme() {
            if (typeof window === 'undefined' || typeof document === 'undefined') {
                return;
            }

            let theme = 'light';
            try {
                const saved = window.localStorage ? window.localStorage.getItem('appTheme') : null;
                const prefersDark = window.matchMedia
                    && typeof window.matchMedia === 'function'
                    && window.matchMedia('(prefers-color-scheme: dark)').matches;
                theme = (saved === 'light' || saved === 'dark') ? saved : (prefersDark ? 'dark' : 'light');
            } catch (error) {
                console.warn('theme preload failed', error);
            }

            const applyThemeClass = () => {
                const root = document.documentElement;
                if (root) {
                    root.classList.toggle('dark', theme === 'dark');
                }
                const body = document.body;
                if (body) {
                    body.classList.toggle('dark', theme === 'dark');
                }
            };

            applyThemeClass();
            if (!document.body) {
                document.addEventListener('DOMContentLoaded', applyThemeClass, { once: true });
            }

            try {
                Object.defineProperty(window, '__START_THEME__', {
                    value: theme,
                    writable: false,
                    configurable: false,
                });
            } catch (error) {
                window.__START_THEME__ = theme;
            }
        })();
    </script>

    <style>
        :root.fs-sm { font-size: 14px; }
        :root.fs-md { font-size: 16px; }
        :root.fs-lg { font-size: 18px; }
        :root.fs-xl { font-size: 20px; }

        :root {
            color-scheme: light;
            --bg-page: #f8fafc;
            --bg-surface: #ffffff;
            --bg-overlay: rgba(255, 255, 255, 0.6);
            --bg-muted: #f1f5f9;
            --text-primary: #0f172a;
            --text-secondary: #1e293b;
            --text-tertiary: #334155;
            --option-text: #334155;
            --accent: #38bdf8;
            --accent-hover: #0ea5e9;
            --accent-border: #38bdf8;
            --accent-soft: #e0f2fe;
            --accent-ring: rgba(56,189,248,0.4);
            --accent-text: #0c4a6e;
            --border-strong: rgba(255,255,255,0.25);
            --border-subtle: rgba(0,0,0,0.03);
            --border-focus: #38bdf8;
            --shadow-strong: 0 18px 32px -24px rgba(15, 23, 42, 0.3);
            --shadow-hover: 0 12px 20px -6px rgba(0,0,0,0.1);
            --option-shadow: 0 4px 10px -2px rgba(0,0,0,0.08);
            --option-hover-shadow: 0 8px 16px -4px rgba(0,0,0,0.12);
            --success-bg: #dcfce7;
            --success-border: #22c55e;
            --success-text: #065f46;
            --danger-bg: #fee2e2;
            --danger-border: #ef4444;
            --danger-text: #7f1d1d;
            --option-hover-bg: #f8fafc;
            --explanation-bg: #f8fafc;
            --explanation-border: #38bdf8;
            --explanation-text: #1e293b;
            --explanation-shadow: 0 0 0 rgba(0,0,0,0);
            --selection-bg: #fef9c3;
            --vocabulary-bg: #ffffff;
            --quiz-scrollbar-track: #f1f1f1;
            --quiz-scrollbar-thumb: #888;
            --quiz-scrollbar-thumb-hover: #555;
            --nav-active-bg: #1e293b;
            --nav-active-text: #f8fafc;
            --nav-answered-bg: #10b981;
            --nav-answered-text: #ecfdf5;
            --nav-default-bg: #e2e8f0;
            --nav-default-text: #1e293b;
            --nav-marked-ring: rgba(250,204,21,0.75);
            --timer-low-bg: #fee2e2;
            --timer-low-text: #b91c1c;
            --timer-default-bg: #e2e8f0;
            --timer-default-text: #1e293b;
            --modal-overlay: rgba(15,23,42,0.55);
            --modal-surface: #ffffff;
            --modal-border: rgba(148,163,184,0.35);
            --modal-text: #0f172a;
            --button-secondary-bg: #ffffff;
            --button-secondary-border: rgba(148,163,184,0.45);
            --button-secondary-text: #1e293b;
            --subject-science-accent: #dc2626;
            --subject-science-text: #ffffff;
            --subject-science-surface-text: #7f1d1d;
            --subject-science-accent-text: #7f1d1d;
            --subject-science-border: rgba(248,113,113,0.8);
            --subject-science-gradient: linear-gradient(135deg, #f87171, #facc15);
            --subject-social-accent: #16a34a;
            --subject-social-text: #f0fdf4;
            --subject-social-surface-text: #14532d;
            --subject-social-accent-text: #14532d;
            --subject-social-border: rgba(74,222,128,0.7);
            --subject-social-gradient: linear-gradient(135deg, #16a34a, #a3e635);
            --subject-rla-accent: #7c3aed;
            --subject-rla-text: #f5f3ff;
            --subject-rla-surface-text: #4c1d95;
            --subject-rla-accent-text: #4c1d95;
            --subject-rla-border: rgba(167,139,250,0.7);
            --subject-rla-gradient: linear-gradient(135deg, #7c3aed, #ec4899);
            --subject-math-accent: #0284c7;
            --subject-math-text: #e0f2fe;
            --subject-math-surface-text: #0c4a6e;
            --subject-math-accent-text: #0c4a6e;
            --subject-math-border: rgba(56,189,248,0.7);
            --subject-math-gradient: linear-gradient(135deg, #0ea5e9, #22d3ee);
            --subject-simulations-accent: #f97316;
            --subject-simulations-text: #fff7ed;
            --subject-simulations-surface-text: #7c2d12;
            --subject-simulations-accent-text: #7c2d12;
            --subject-simulations-border: rgba(251,146,60,0.75);
            --subject-simulations-gradient: linear-gradient(135deg, #f97316, #facc15);
        }

        .dark {
            color-scheme: dark;
            --bg-page: #020617;
            --bg-surface: rgba(15, 23, 42, 0.9);
            --bg-overlay: rgba(30, 41, 59, 0.72);
            --bg-muted: rgba(51,65,85,0.6);
            --text-primary: #e2e8f0;
            --text-secondary: #f8fafc;
            --text-tertiary: #cbd5f5;
            --option-text: #f8fafc;
            --accent: #38bdf8;
            --accent-hover: #0ea5e9;
            --accent-border: rgba(56,189,248,0.8);
            --accent-soft: rgba(56,189,248,0.22);
            --accent-ring: rgba(56,189,248,0.5);
            --accent-text: #eafeff;
            --border-strong: rgba(255,255,255,0.14);
            --border-subtle: rgba(226,232,240,0.08);
            --border-focus: rgba(56,189,248,0.8);
            --shadow-strong: 0 30px 60px -15px rgba(0,0,0,0.9);
            --shadow-hover: 0 20px 32px -8px rgba(0,0,0,0.8);
            --option-shadow: 0 8px 20px -4px rgba(0,0,0,0.9);
            --option-hover-shadow: 0 12px 22px -6px rgba(0,0,0,0.6);
            --success-bg: rgba(34,197,94,0.28);
            --success-border: rgba(34,197,94,0.9);
            --success-text: #ecfdf5;
            --danger-bg: rgba(239,68,68,0.28);
            --danger-border: rgba(239,68,68,0.85);
            --danger-text: #fff1f2;
            --option-hover-bg: rgba(51,65,85,0.6);
            --explanation-bg: rgba(2,6,23,0.9);
            --explanation-border: rgba(56,189,248,0.9);
            --explanation-text: #f8fafc;
            --explanation-shadow: 0 16px 32px -8px rgba(0,0,0,0.9);
            --selection-bg: rgba(250,204,21,0.18);
            --vocabulary-bg: rgba(15,23,42,0.9);
            --quiz-scrollbar-track: rgba(15,23,42,0.4);
            --quiz-scrollbar-thumb: rgba(148,163,184,0.5);
            --quiz-scrollbar-thumb-hover: rgba(226,232,240,0.65);
            --nav-active-bg: rgba(51,65,85,0.85);
            --nav-active-text: #f8fafc;
            --nav-answered-bg: rgba(34,197,94,0.65);
            --nav-answered-text: #ecfdf5;
            --nav-default-bg: rgba(15,23,42,0.8);
            --nav-default-text: #e2e8f0;
            --nav-marked-ring: rgba(253,224,71,0.65);
            --timer-low-bg: rgba(239,68,68,0.25);
            --timer-low-text: #fecdd3;
            --timer-default-bg: rgba(30,41,59,0.65);
            --timer-default-text: #e2e8f0;
            --modal-overlay: rgba(2,6,23,0.82);
            --modal-surface: rgba(15,23,42,0.96);
            --modal-border: rgba(148,163,184,0.35);
            --modal-text: #e2e8f0;
            --button-secondary-bg: rgba(15,23,42,0.85);
            --button-secondary-border: rgba(148,163,184,0.35);
            --button-secondary-text: #e2e8f0;
            --subject-science-accent: #f87171;
            --subject-science-text: #fff5f5;
            --subject-science-surface-text: #fff5f5;
            --subject-science-accent-text: #fff5f5;
            --subject-science-border: rgba(252,165,165,0.8);
            --subject-science-gradient: linear-gradient(135deg, rgba(248,113,113,0.85), rgba(250,204,21,0.7));
            --subject-social-accent: #22c55e;
            --subject-social-text: #ecfdf5;
            --subject-social-surface-text: #ecfdf5;
            --subject-social-accent-text: #ecfdf5;
            --subject-social-border: rgba(74,222,128,0.75);
            --subject-social-gradient: linear-gradient(135deg, rgba(16,185,129,0.9), rgba(163,230,53,0.7));
            --subject-rla-accent: #8b5cf6;
            --subject-rla-text: #ede9fe;
            --subject-rla-surface-text: #ede9fe;
            --subject-rla-accent-text: #ede9fe;
            --subject-rla-border: rgba(167,139,250,0.7);
            --subject-rla-gradient: linear-gradient(135deg, rgba(139,92,246,0.9), rgba(236,72,153,0.65));
            --subject-math-accent: #0ea5e9;
            --subject-math-text: #e0f2fe;
            --subject-math-surface-text: #e0f2fe;
            --subject-math-accent-text: #e0f2fe;
            --subject-math-border: rgba(56,189,248,0.7);
            --subject-math-gradient: linear-gradient(135deg, rgba(14,165,233,0.9), rgba(34,211,238,0.7));
            --subject-simulations-accent: #fb923c;
            --subject-simulations-text: #fff7ed;
            --subject-simulations-surface-text: #fff7ed;
            --subject-simulations-accent-text: #fff7ed;
            --subject-simulations-border: rgba(251,191,36,0.75);
            --subject-simulations-gradient: linear-gradient(135deg, rgba(249,115,22,0.9), rgba(250,204,21,0.7));
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-page);
            color: var(--text-primary);
        }
        h1 {
            font-family: 'Poppins', 'Inter', system-ui, sans-serif;
            font-size: 2.25rem;
            font-weight: 700;
            color: var(--text-primary);
            line-height: 1.2;
            text-shadow: 0 1px 2px rgba(0,0,0,0.05);
        }
        h2 {
            font-family: 'Poppins', 'Inter', system-ui, sans-serif;
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-secondary);
            line-height: 1.3;
        }
        h3 {
            font-family: 'Inter', system-ui, sans-serif;
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text-tertiary);
            line-height: 1.4;
            word-break: break-word;
        }
        p,
        li {
            font-family: 'Inter', system-ui, sans-serif;
            font-size: 1rem;
            line-height: 1.7;
            color: var(--text-tertiary);
        }
        body::before {
            content: "";
            position: fixed;
            inset: 0;
            background: url('Logo.svg') center/105vmin no-repeat;
            opacity: 0.12;
            z-index: -1;
            pointer-events: none;
            animation: floatLogo 12s ease-in-out infinite alternate;
        }
        body::after {
            content: '';
            position: fixed;
            inset: 0;
            background: radial-gradient(circle at 25% 25%, rgba(14,165,233,0.03) 0%, transparent 50%),
                        radial-gradient(circle at 75% 75%, rgba(236,72,153,0.03) 0%, transparent 50%);
            pointer-events: none;
            z-index: -2;
        }
        @keyframes floatLogo {
            0%, 100% { transform: translateY(0); opacity: 0.12; }
            50% { transform: translateY(-10px); opacity: 0.15; }
        }
        .glass {
            background: var(--bg-overlay);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid var(--border-strong);
            border-radius: 1rem;
            box-shadow: var(--shadow-strong);
            color: var(--text-primary);
        }
        .subject-card {
            transition: all 0.3s ease;
            transform: translateY(0);
        }
        .subject-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-hover);
        }
        .quiz-nav::-webkit-scrollbar { height: 4px; }
        .quiz-nav::-webkit-scrollbar-track { background: var(--quiz-scrollbar-track); }
        .quiz-nav::-webkit-scrollbar-thumb { background: var(--quiz-scrollbar-thumb); border-radius: 2px; }
        .quiz-nav::-webkit-scrollbar-thumb:hover { background: var(--quiz-scrollbar-thumb-hover); }
        .fade-in { animation: fadeIn 0.5s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        @keyframes floatIn {
            0%   { opacity: 0; transform: translateY(10px) scale(0.98); }
            100% { opacity: 1; transform: translateY(0) scale(1); }
        }
        .animate-fadeIn { animation: fadeIn 0.6s ease-in-out; }
        .animate-floatIn { animation: floatIn 0.5s ease; }
        .prose ::selection { background-color: var(--selection-bg); }
        .prose { max-width: 65ch; margin: auto; }
        .prose p { margin-bottom: 1em; }
        .exam-root, .exam-body, .passage, .question-stem, .choice-text, .explanation, .rubric {
            word-break: normal;
            overflow-wrap: break-word;
            hyphens: auto;
            white-space: normal;
            line-height: 1.5;
            text-align: left;
            max-width: 75ch;
        }

        .passage-text {
            color: #000000;
        }

        .dark .passage-text {
            color: var(--text-primary);
        }

        .dark .question-stem {
            color: #ffffff;
        }

        .dark .question-stem * {
            color: inherit;
        }

        .break-all, [data-break="all"] {
            word-break: normal !important;
            overflow-wrap: break-word !important;
        }

        .math, code, pre, kbd, samp, .token {
            overflow-wrap: anywhere;
        }
        #pong-canvas { background-color: #1a202c; border-radius: 0.5rem; border: 2px solid #4a5568; }
        .option {
            border: 2px solid var(--border-subtle);
            border-radius: 0.75rem;
            background-color: var(--bg-surface);
            padding: 0.75rem 1rem;
            box-shadow: var(--option-shadow);
            cursor: pointer;
            transition: all 0.15s ease-in-out;
            color: var(--option-text);
        }
        .option:hover:not(.selected):not(.correct):not(.incorrect) {
            background-color: var(--option-hover-bg);
            transform: scale(1.01);
            box-shadow: var(--option-hover-shadow);
        }
        .option.selected {
            background-color: var(--accent-soft);
            border-color: var(--accent-border);
            box-shadow: 0 0 0 3px var(--accent-ring);
            color: var(--accent-text);
            font-weight: 600;
        }
        .option.correct {
            background-color: var(--success-bg);
            border-color: var(--success-border);
            color: var(--success-text);
            animation: correctPop 0.28s ease-out;
            box-shadow: 0 0 0 1px rgba(34,197,94,0.15);
        }
        @keyframes correctPop {
            0% { transform: scale(1); box-shadow: 0 0 0 rgba(0,0,0,0); }
            40% { transform: scale(1.03); box-shadow: 0 10px 20px rgba(16,185,129,0.25); }
            100% { transform: scale(1); box-shadow: 0 0 0 rgba(0,0,0,0); }
        }
        .option.incorrect {
            background-color: var(--danger-bg);
            border-color: var(--danger-border);
            position: relative;
            animation: shakeWrong 0.22s linear;
            color: var(--danger-text);
            box-shadow: 0 0 0 1px rgba(239,68,68,0.1);
        }
        .dark .option.correct {
            box-shadow: 0 0 0 1px var(--success-border);
        }
        .dark .option.incorrect {
            box-shadow: 0 0 0 1px var(--danger-border);
        }
        @keyframes shakeWrong {
            0% { transform: translateX(0); }
            25% { transform: translateX(-4px); }
            50% { transform: translateX(3px); }
            75% { transform: translateX(-2px); }
            100% { transform: translateX(0); }
        }
        .explanation {
            background-color: var(--explanation-bg);
            border-left: 4px solid var(--explanation-border);
            border-radius: 0.5rem;
            padding: 0.75rem 1rem;
            margin-top: 0.75rem;
            font-size: 0.9rem;
            line-height: 1.4;
            color: var(--explanation-text);
            animation: explainReveal 0.25s ease-out;
            box-shadow: var(--explanation-shadow);
        }
        .option:focus-visible {
            outline: 2px solid var(--border-focus);
            outline-offset: 2px;
        }
        button[data-role="primary"] {
            background-color: var(--accent);
            border: 1px solid var(--accent-border);
            color: var(--accent-text);
            font-weight: 600;
            transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
            box-shadow: 0 10px 20px -12px rgba(14,116,144,0.6);
        }
        button[data-role="primary"]:hover:not(:disabled) {
            background-color: var(--accent-hover);
            transform: translateY(-1px);
            box-shadow: 0 12px 22px -10px rgba(14,116,144,0.65);
        }
        button[data-role="primary"]:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        button[data-role="secondary"] {
            background-color: var(--button-secondary-bg);
            border: 1px solid var(--button-secondary-border);
            color: var(--button-secondary-text);
            transition: background-color 0.2s ease, border-color 0.2s ease;
        }
        button[data-role="secondary"]:hover:not(:disabled) {
            background-color: var(--bg-muted);
            border-color: var(--border-strong);
        }
        @keyframes explainReveal {
            0% { opacity: 0; transform: translateY(4px); }
            100% { opacity: 1; transform: translateY(0); }
        }
        .good-evidence {
            background-color: #dcfce7; /* Tailwind green-100 */
            color: #166534; /* Tailwind green-800 */
            padding: 2px 4px;
            border-radius: 4px;
            font-weight: 500;
        }
        .bad-evidence {
            background-color: #fee2e2; /* Tailwind red-100 */
            color: #991b1b; /* Tailwind red-800 */
            padding: 2px 4px;
            border-radius: 4px;
            font-weight: 500;
        }
        .vocabulary-ticker {
            position: relative;
            overflow: hidden;
            background-color: var(--vocabulary-bg);
        }
        .vocabulary-ticker-track {
            display: inline-flex;
            align-items: center;
            gap: 1rem;
            width: max-content;
            padding: 0.75rem 1rem;
            animation: vocabularyTickerScroll 70s linear infinite;
        }
        .vocabulary-ticker:hover .vocabulary-ticker-track {
            animation-play-state: paused;
        }
        .vocabulary-chip {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.45rem 0.85rem;
            border-radius: 9999px;
            border: 1px solid rgba(100, 116, 139, 0.2);
            background-color: #f8fafc;
            background-image: linear-gradient(to bottom right, rgba(255,255,255,0.9), rgba(248,250,252,0.6));
            color: #0f172a;
            font-weight: 600;
            box-shadow: 0 2px 4px rgba(15, 23, 42, 0.08);
            white-space: nowrap;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .dark .vocabulary-chip {
            border-color: rgba(226,232,240,0.18);
            background-color: rgba(15,23,42,0.8);
            color: #f8fafc;
            box-shadow: 0 8px 20px rgba(0,0,0,0.9);
        }
        .vocabulary-chip:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 14px rgba(15, 23, 42, 0.15);
        }
        .dark .vocabulary-chip:hover {
            box-shadow: 0 14px 24px rgba(0,0,0,0.6);
        }
        .vocabulary-chip-dot {
            width: 0.6rem;
            height: 0.6rem;
            border-radius: 9999px;
        }
        .vocabulary-chip-label {
            font-size: 0.7rem;
            letter-spacing: 0.08em;
            text-transform: uppercase;
            color: #64748b;
        }
        .dark .vocabulary-chip-label { color: #f8fafc; }
        @keyframes vocabularyTickerScroll {
            from { transform: translateX(0); }
            to { transform: translateX(-50%); }
        }
        .question-stem,
        .question-stem * {
            font-style: normal !important;
        }
        .question-stem {
            white-space: normal;
            overflow-wrap: break-word;
            word-break: normal;
        }
        .question-stem table {
            width: 100%;
            border-collapse: collapse;
            margin: 0.75rem 0;
        }
        .question-stem th,
        .question-stem td {
            border: 1px solid #e5e7eb;
            padding: 0.4rem 0.6rem;
            text-align: left;
        }
        .question-stem thead th {
            background: #f3f4f6;
            font-weight: 600;
        }
        .dark .question-stem th,
        .dark .question-stem td {
            border: 1px solid rgba(226,232,240,0.18);
            padding: 0.4rem 0.6rem;
            text-align: left;
            color: #f8fafc;
            background-color: rgba(15,23,42,0.6);
        }
        .dark .question-stem thead th {
            background-color: rgba(30,41,59,0.8);
            color: #ffffff;
            font-weight: 600;
        }
        h3 {
            overflow-wrap: break-word;
        }
    </style>
</head>
<body style="background-color: var(--bg-page); color: var(--text-primary);">
    <div id="root"></div>

    <script src="data/quiz_data.js"></script>

<script type="text/babel" data-presets="env,react">
const { useState, useEffect, useRef, useCallback, useMemo } = React;

const SUBJECT_PROGRESS_KEYS = [
    "Social Studies",
    "Reasoning Through Language Arts (RLA)",
    "Science",
    "Math"
];

const GED_PASSING_SCORE = 145;

let PREMADE_QUIZ_CATALOG = {};

const getPremadeQuizTotal = (subject) => {
    return Array.isArray(PREMADE_QUIZ_CATALOG[subject]) ? PREMADE_QUIZ_CATALOG[subject].length : 0;
};

const createEmptyProgress = () => SUBJECT_PROGRESS_KEYS.reduce((acc, subject) => {
    acc[subject] = {
        attempts: [],
        attemptCount: 0,
        averageScaledScore: null,
        completedCount: 0,
        completionPercentage: 0,
        passedExamCodes: [],
        totalPremadeExams: getPremadeQuizTotal(subject),
        lastAttempt: null,
    };
    return acc;
}, {});

const buildProgressFromAttempts = (attempts = []) => {
    const progress = createEmptyProgress();
    const subjectStats = SUBJECT_PROGRESS_KEYS.reduce((acc, subject) => {
        acc[subject] = { scoreSum: 0, count: 0, passed: new Set() };
        return acc;
    }, {});

    const normalizedAttempts = Array.isArray(attempts) ? attempts : [];

    normalizedAttempts.forEach((entry) => {
        const subjectKey = entry?.subject;
        if (!subjectKey || !progress[subjectKey]) {
            return;
        }

        const normalized = {
            id: entry?.id ?? null,
            quizCode: entry?.quizCode || entry?.quiz_code || entry?.quizId || entry?.quiz_id || null,
            quizTitle: entry?.quizTitle || entry?.quiz_title || entry?.quizName || null,
            quizType: entry?.quizType || entry?.quiz_type || null,
            score: typeof entry?.score === 'number' ? entry.score : Number.isFinite(Number(entry?.score)) ? Math.round(Number(entry.score)) : null,
            totalQuestions: typeof entry?.totalQuestions === 'number' ? entry.totalQuestions : Number.isFinite(Number(entry?.total_questions)) ? Math.round(Number(entry.total_questions)) : Number.isFinite(Number(entry?.totalQuestions)) ? Math.round(Number(entry.totalQuestions)) : null,
            scaledScore: typeof entry?.scaledScore === 'number' ? Math.round(entry.scaledScore) : Number.isFinite(Number(entry?.scaled_score)) ? Math.round(Number(entry.scaled_score)) : null,
            attemptedAt: entry?.attemptedAt || entry?.attempted_at || entry?.takenAt || null,
        };

        const derivedPassed = (() => {
            if (typeof entry?.passed === 'boolean') {
                return entry.passed;
            }
            if (typeof entry?.passed === 'string') {
                const lowered = entry.passed.trim().toLowerCase();
                if (lowered === 'true' || lowered === '1') return true;
                if (lowered === 'false' || lowered === '0') return false;
            }
            if (normalized.scaledScore != null) {
                return normalized.scaledScore >= GED_PASSING_SCORE;
            }
            return null;
        })();

        normalized.passed = derivedPassed;

        progress[subjectKey].attempts.push(normalized);

        if (normalized.scaledScore != null) {
            subjectStats[subjectKey].scoreSum += normalized.scaledScore;
            subjectStats[subjectKey].count += 1;
        }

        if (normalized.passed && normalized.quizCode) {
            subjectStats[subjectKey].passed.add(normalized.quizCode);
        }
    });

    SUBJECT_PROGRESS_KEYS.forEach((subject) => {
        const stats = subjectStats[subject];
        const subjectProgress = progress[subject];
        const totalPremade = getPremadeQuizTotal(subject);

        subjectProgress.attempts.sort((a, b) => {
            const aDate = a.attemptedAt ? new Date(a.attemptedAt).getTime() : 0;
            const bDate = b.attemptedAt ? new Date(b.attemptedAt).getTime() : 0;
            if (bDate === aDate) {
                return (b.id ?? 0) - (a.id ?? 0);
            }
            return bDate - aDate;
        });

        subjectProgress.attemptCount = subjectProgress.attempts.length;
        subjectProgress.averageScaledScore = stats.count ? Math.round(stats.scoreSum / stats.count) : null;
        subjectProgress.completedCount = stats.passed.size;
        subjectProgress.passedExamCodes = Array.from(stats.passed);
        subjectProgress.totalPremadeExams = totalPremade;
        subjectProgress.completionPercentage = totalPremade > 0
            ? Math.min(100, Math.round((stats.passed.size / totalPremade) * 100))
            : 0;
        subjectProgress.lastAttempt = subjectProgress.attempts[0] || null;
    });

    return progress;
};

const ensureUserProfile = (user) => {
    if (!user || typeof user !== 'object') {
        return null;
    }
    const email = typeof user.email === 'string' ? user.email : '';
    const baseName = user.name && typeof user.name === 'string' && user.name.trim()
        ? user.name.trim()
        : (email.includes('@') ? email.split('@')[0] : (email || 'Learner'));
    const picture = user.picture && typeof user.picture === 'string' && user.picture.trim()
        ? user.picture.trim()
        : `https://ui-avatars.com/api/?background=0ea5e9&color=fff&name=${encodeURIComponent(baseName)}`;

    return {
        ...user,
        name: baseName,
        picture,
    };
};

const DEFAULT_COLOR_SCHEME = {
    background: 'var(--nav-active-bg)',
    onBackgroundText: 'var(--nav-active-text)',
    accent: 'var(--accent)',
    accentText: 'var(--accent-text)',
    navAnsweredBg: 'var(--nav-answered-bg)',
    navAnsweredText: 'var(--nav-answered-text)',
    navDefaultBg: 'var(--nav-default-bg)',
    navDefaultText: 'var(--nav-default-text)',
    navMarkedRing: 'var(--nav-marked-ring)',
    optionSelectedBg: 'var(--accent-soft)',
    optionSelectedBorder: 'var(--accent-border)',
    optionHover: 'var(--option-hover-bg)',
    scoreBackground: 'var(--bg-overlay)',
    scoreText: 'var(--accent-text)',
    scoreBorder: 'var(--border-subtle)',
    surface: 'var(--bg-surface)',
    surfaceStrong: 'var(--bg-overlay)',
    surfaceBorder: 'var(--border-subtle)',
    divider: 'var(--border-subtle)',
    text: 'var(--text-primary)',
    mutedText: 'var(--text-secondary)',
    inputBorder: 'var(--border-subtle)',
    ring: 'var(--accent-ring)',
    timerLowBg: 'var(--timer-low-bg)',
    timerLowText: 'var(--timer-low-text)',
    timerDefaultBg: 'var(--timer-default-bg)',
    timerDefaultText: 'var(--timer-default-text)',
};

const SUBJECT_COLORS = {
    Science: {
        background: 'var(--subject-science-accent)',
        text: 'var(--subject-science-surface-text)',
        heroText: 'var(--subject-science-text)',
        border: 'var(--subject-science-border)',
        scoreBackground: 'var(--bg-overlay)',
        scoreText: 'var(--subject-science-text)',
        scoreBorder: 'var(--subject-science-border)',
        accent: 'var(--subject-science-accent)',
        accentText: 'var(--subject-science-accent-text)',
    },
    'Social Studies': {
        background: 'var(--subject-social-accent)',
        text: 'var(--subject-social-surface-text)',
        heroText: 'var(--subject-social-text)',
        border: 'var(--subject-social-border)',
        scoreBackground: 'var(--bg-overlay)',
        scoreText: 'var(--subject-social-text)',
        scoreBorder: 'var(--subject-social-border)',
        accent: 'var(--subject-social-accent)',
        accentText: 'var(--subject-social-accent-text)',
    },
    'Reasoning Through Language Arts (RLA)': {
        background: 'var(--subject-rla-accent)',
        text: 'var(--subject-rla-surface-text)',
        heroText: 'var(--subject-rla-text)',
        border: 'var(--subject-rla-border)',
        scoreBackground: 'var(--bg-overlay)',
        scoreText: 'var(--subject-rla-text)',
        scoreBorder: 'var(--subject-rla-border)',
        accent: 'var(--subject-rla-accent)',
        accentText: 'var(--subject-rla-accent-text)',
    },
    Math: {
        background: 'var(--subject-math-accent)',
        text: 'var(--subject-math-surface-text)',
        heroText: 'var(--subject-math-text)',
        border: 'var(--subject-math-border)',
        scoreBackground: 'var(--bg-overlay)',
        scoreText: 'var(--subject-math-text)',
        scoreBorder: 'var(--subject-math-border)',
        accent: 'var(--subject-math-accent)',
        accentText: 'var(--subject-math-accent-text)',
    },
    Simulations: {
        background: 'var(--subject-simulations-accent)',
        text: 'var(--subject-simulations-surface-text)',
        heroText: 'var(--subject-simulations-text)',
        border: 'var(--subject-simulations-border)',
        scoreBackground: 'var(--bg-overlay)',
        scoreText: 'var(--subject-simulations-text)',
        scoreBorder: 'var(--subject-simulations-border)',
        accent: 'var(--subject-simulations-accent)',
        accentText: 'var(--subject-simulations-accent-text)',
    },
};

const SUBJECT_BG_GRADIENTS = {
    Math: 'var(--subject-math-gradient)',
    Science: 'var(--subject-science-gradient)',
    'Social Studies': 'var(--subject-social-gradient)',
    'Reasoning Through Language Arts (RLA)': 'var(--subject-rla-gradient)',
    Simulations: 'var(--subject-simulations-gradient)',
};

const SUBJECT_LIGHT_SURFACE_GRADIENTS = {
    Math: 'linear-gradient(135deg, rgba(255,255,255,0.98), rgba(2,132,199,0.12))',
    Science: 'linear-gradient(135deg, rgba(255,255,255,0.98), rgba(220,38,38,0.12))',
    'Social Studies': 'linear-gradient(135deg, rgba(255,255,255,0.98), rgba(22,163,74,0.12))',
    'Reasoning Through Language Arts (RLA)': 'linear-gradient(135deg, rgba(255,255,255,0.98), rgba(124,58,237,0.12))',
    Simulations: 'linear-gradient(135deg, rgba(255,255,255,0.98), rgba(249,115,22,0.12))',
};

const SUBJECT_LIGHT_TINTS = {
    Math: 'rgba(2,132,199,0.2)',
    Science: 'rgba(220,38,38,0.2)',
    'Social Studies': 'rgba(22,163,74,0.2)',
    'Reasoning Through Language Arts (RLA)': 'rgba(124,58,237,0.2)',
    Simulations: 'rgba(249,115,22,0.2)',
};

const SUBJECT_SHORT_LABELS = {
    Science: 'Science',
    Math: 'Math',
    'Social Studies': 'Social Studies',
    'Reasoning Through Language Arts (RLA)': 'RLA',
};

const VOCABULARY_SUBJECT_COLORS = {
    Science: '#dc2626',
    Math: '#0284c7',
    'Social Studies': '#16a34a',
    'Reasoning Through Language Arts (RLA)': '#7c3aed',
};

const MAX_TICKER_WORDS_PER_SUBJECT = 10;

const FALLBACK_VOCABULARY = {
    Science: [
        {
            term: "Hypothesis",
            definition: "A testable explanation for an observation that can be supported or refuted through experimentation.",
        },
        {
            term: "Variable",
            definition: "A factor in an experiment that can change or be controlled.",
        },
        {
            term: "Control Group",
            definition: "The group in an experiment that does not receive the independent variable and is used for comparison.",
        },
        {
            term: "Ecosystem",
            definition: "A community of living organisms interacting with each other and with their physical environment.",
        },
        {
            term: "Photosynthesis",
            definition: "The process by which plants use light energy to convert carbon dioxide and water into glucose and oxygen.",
        },
        {
            term: "Cellular Respiration",
            definition: "The process in which cells break down glucose and oxygen to release energy, carbon dioxide, and water.",
        },
        {
            term: "Mitosis",
            definition: "A type of cell division that results in two identical daughter cells.",
        },
        {
            term: "DNA",
            definition: "The molecule that carries genetic information in living organisms.",
        },
        {
            term: "Atom",
            definition: "The smallest unit of an element that retains the properties of that element.",
        },
        {
            term: "Molecule",
            definition: "Two or more atoms that are chemically bonded together.",
        },
        {
            term: "Gravity",
            definition: "The force of attraction between objects with mass.",
        },
        {
            term: "Qualitative Observation",
            definition: "An observation that describes qualities or characteristics without using numbers.",
        },
        {
            term: "Quantitative Observation",
            definition: "An observation that uses numbers or measurements to describe what is observed.",
        },
        {
            term: "Homeostasis",
            definition: "The process by which organisms maintain stable internal conditions despite external changes.",
        },
        {
            term: "Independent Variable",
            definition: "The factor that is purposely changed in an experiment to test its effect.",
        },
        {
            term: "Dependent Variable",
            definition: "The factor that is measured in an experiment and changes in response to the independent variable.",
        },
        {
            term: "Scientific Method",
            definition: "A systematic process of asking questions, forming hypotheses, conducting experiments, and drawing conclusions.",
        },
        {
            term: "Plate Tectonics",
            definition: "The theory explaining the movement of Earth's lithospheric plates and the activity at their boundaries.",
        },
        {
            term: "Fossil",
            definition: "The preserved remains, impression, or trace of an organism from the past.",
        },
        {
            term: "Energy Transfer",
            definition: "The movement of energy from one object or system to another.",
        },
    ],
    Math: [
        {
            term: "Integer",
            definition: "A whole number that can be positive, negative, or zero.",
        },
        {
            term: "Fraction",
            definition: "A number that represents a part of a whole or a part of a set.",
        },
        {
            term: "Decimal",
            definition: "A number that uses a decimal point to show a value smaller than one.",
        },
        {
            term: "Percent",
            definition: "A ratio that compares a number to 100.",
        },
        {
            term: "Ratio",
            definition: "A comparison of two quantities by division.",
        },
        {
            term: "Proportion",
            definition: "An equation stating that two ratios are equivalent.",
        },
        {
            term: "Equation",
            definition: "A mathematical statement that shows two expressions are equal.",
        },
        {
            term: "Variable",
            definition: "A symbol, usually a letter, that represents an unknown value.",
        },
        {
            term: "Coefficient",
            definition: "The number that is multiplied by a variable in an algebraic expression.",
        },
        {
            term: "Expression",
            definition: "A mathematical phrase that can contain numbers, variables, and operations.",
        },
        {
            term: "Inequality",
            definition: "A mathematical statement that compares two expressions using greater than, less than, or equal to symbols.",
        },
        {
            term: "Slope",
            definition: "A measure of the steepness of a line, found by the ratio of rise over run.",
        },
        {
            term: "Quadratic Equation",
            definition: "An equation in the form ax² + bx + c = 0, where a, b, and c are constants and a ≠ 0.",
        },
        {
            term: "Linear Function",
            definition: "A function whose graph is a straight line.",
        },
        {
            term: "Pythagorean Theorem",
            definition: "A formula that relates the side lengths of a right triangle: a² + b² = c².",
        },
        {
            term: "Mean",
            definition: "The average of a set of numbers, found by adding the numbers and dividing by how many there are.",
        },
        {
            term: "Median",
            definition: "The middle value in an ordered set of numbers.",
        },
        {
            term: "Mode",
            definition: "The number that appears most often in a set of data.",
        },
        {
            term: "Range",
            definition: "The difference between the highest and lowest values in a data set.",
        },
        {
            term: "Probability",
            definition: "The likelihood that an event will occur, expressed as a ratio, fraction, or percent.",
        },
        {
            term: "Factor",
            definition: "A number that divides another number evenly.",
        },
        {
            term: "Multiple",
            definition: "The product of a number and any whole number.",
        },
        {
            term: "Prime Number",
            definition: "A whole number greater than 1 that has exactly two factors: 1 and itself.",
        },
        {
            term: "Composite Number",
            definition: "A whole number greater than 1 that has more than two factors.",
        },
        {
            term: "Perimeter",
            definition: "The total distance around the outside of a shape.",
        },
        {
            term: "Area",
            definition: "The amount of surface covered by a shape.",
        },
        {
            term: "Volume",
            definition: "The amount of space a three-dimensional object occupies.",
        },
        {
            term: "Circumference",
            definition: "The distance around a circle.",
        },
        {
            term: "Exponent",
            definition: "A small number written above and to the right of a base number that shows how many times the base is multiplied by itself.",
        },
        {
            term: "Order of Operations",
            definition: "The rules that tell you the correct sequence to evaluate a mathematical expression (PEMDAS).",
        },
    ],
    'Reasoning Through Language Arts (RLA)': [
        {
            term: "Main Idea",
            definition: "The central point or most important concept that an author wants the reader to understand.",
        },
        {
            term: "Supporting Detail",
            definition: "Information that explains, proves, or enhances the main idea.",
        },
        {
            term: "Inference",
            definition: "A conclusion reached by using evidence from the text and your own reasoning.",
        },
        {
            term: "Tone",
            definition: "The author's attitude toward the subject or audience.",
        },
        {
            term: "Theme",
            definition: "The underlying message or lesson the author wants to convey.",
        },
        {
            term: "Thesis Statement",
            definition: "A sentence that states the main point or argument of an essay.",
        },
        {
            term: "Topic Sentence",
            definition: "The sentence that expresses the main idea of a paragraph.",
        },
        {
            term: "Transition",
            definition: "A word or phrase that connects ideas and helps writing flow smoothly.",
        },
        {
            term: "Evidence",
            definition: "Facts, examples, or details used to support a claim.",
        },
        {
            term: "Claim",
            definition: "A statement or position that requires support.",
        },
        {
            term: "Counterclaim",
            definition: "An opposing viewpoint that challenges the writer's claim.",
        },
        {
            term: "Audience",
            definition: "The specific group of readers or listeners a text is written for.",
        },
        {
            term: "Purpose",
            definition: "The reason why an author writes a text: to inform, persuade, entertain, or explain.",
        },
        {
            term: "Figurative Language",
            definition: "Words or expressions that go beyond literal meaning, such as metaphors and similes.",
        },
        {
            term: "Metaphor",
            definition: "A comparison between two unlike things without using like or as.",
        },
        {
            term: "Simile",
            definition: "A comparison between two unlike things using the words like or as.",
        },
        {
            term: "Connotation",
            definition: "The emotional or cultural meaning attached to a word.",
        },
        {
            term: "Denotation",
            definition: "The literal, dictionary definition of a word.",
        },
        {
            term: "Context Clues",
            definition: "Hints within a sentence or paragraph that help the reader determine the meaning of an unfamiliar word.",
        },
        {
            term: "Revising",
            definition: "Improving a draft by adding, removing, or rearranging ideas for clarity and effectiveness.",
        },
        {
            term: "Editing",
            definition: "Correcting grammar, spelling, and punctuation errors in a draft.",
        },
        {
            term: "Proofreading",
            definition: "Reviewing a final draft carefully to catch small errors before publishing.",
        },
        {
            term: "Persuasive Writing",
            definition: "Writing that aims to convince the reader to accept a viewpoint or take a specific action.",
        },
        {
            term: "Narrative Writing",
            definition: "Writing that tells a story with characters, setting, and plot.",
        },
        {
            term: "Informational Text",
            definition: "Nonfiction writing that provides facts about a topic.",
        },
        {
            term: "Point of View",
            definition: "The perspective from which a story is told.",
        },
        {
            term: "First-Person Point of View",
            definition: "A storytelling perspective in which the narrator is a character in the story and uses words like I and we.",
        },
        {
            term: "Third-Person Point of View",
            definition: "A storytelling perspective where the narrator is outside the story and uses words like he, she, or they.",
        },
        {
            term: "Chronological Order",
            definition: "A text structure that presents events in the order they happened.",
        },
        {
            term: "Cause and Effect",
            definition: "A text structure that explains why something happens and the result of it.",
        },
    ],
    'Social Studies': [
        {
            term: "Democracy",
            definition: "A system of government in which citizens hold the power to make decisions through voting.",
        },
        {
            term: "Republic",
            definition: "A form of government in which citizens elect representatives to make decisions on their behalf.",
        },
        {
            term: "Constitution",
            definition: "A written plan that outlines the structure, powers, and limits of a government.",
        },
        {
            term: "Amendment",
            definition: "A change or addition to a legal or governmental document, such as the U.S. Constitution.",
        },
        {
            term: "Federalism",
            definition: "A system of government in which power is divided between a national government and state governments.",
        },
        {
            term: "Separation of Powers",
            definition: "The division of government responsibilities into distinct branches to prevent any one branch from becoming too powerful.",
        },
        {
            term: "Checks and Balances",
            definition: "A system that allows each branch of government to limit the powers of the other branches.",
        },
        {
            term: "Suffrage",
            definition: "The right to vote in political elections.",
        },
        {
            term: "Civil Rights",
            definition: "The rights of citizens to political and social freedom and equality.",
        },
        {
            term: "Industrialization",
            definition: "The development of industries in a country or region on a wide scale.",
        },
        {
            term: "Urbanization",
            definition: "The growth of cities and the movement of people from rural areas to urban centers.",
        },
        {
            term: "Immigration",
            definition: "The movement of people into a country from another country.",
        },
        {
            term: "Cultural Diffusion",
            definition: "The spread of cultural beliefs and practices from one group to another.",
        },
        {
            term: "Economy",
            definition: "The system by which goods and services are produced, distributed, and consumed.",
        },
        {
            term: "Inflation",
            definition: "A general increase in prices and a decrease in the purchasing value of money.",
        },
        {
            term: "Gross Domestic Product",
            definition: "The total value of all goods and services produced in a country during a specific time period.",
        },
        {
            term: "Supply and Demand",
            definition: "The relationship between the amount of a product available and the desire of buyers for it, which affects price.",
        },
        {
            term: "Primary Source",
            definition: "An original document or firsthand account created at the time of an event.",
        },
        {
            term: "Secondary Source",
            definition: "A document or account that interprets or analyzes primary sources.",
        },
        {
            term: "Manifest Destiny",
            definition: "The 19th-century belief that the United States was destined to expand across the North American continent.",
        },
        {
            term: "Reconstruction",
            definition: "The period after the U.S. Civil War when southern states were reorganized and reintegrated into the Union.",
        },
        {
            term: "Great Depression",
            definition: "A severe worldwide economic downturn that took place during the 1930s.",
        },
        {
            term: "Cold War",
            definition: "The period of political tension and military rivalry between the United States and the Soviet Union after World War II.",
        },
        {
            term: "Bill of Rights",
            definition: "The first ten amendments to the U.S. Constitution that protect individual liberties.",
        },
        {
            term: "Legislature",
            definition: "The branch of government responsible for making laws.",
        },
        {
            term: "Executive Branch",
            definition: "The branch of government responsible for enforcing laws.",
        },
        {
            term: "Judicial Branch",
            definition: "The branch of government responsible for interpreting laws and administering justice.",
        },
        {
            term: "Monarchy",
            definition: "A form of government in which a single person, such as a king or queen, rules for life.",
        },
        {
            term: "Tariff",
            definition: "A tax imposed on imported goods.",
        },
        {
            term: "Treaty",
            definition: "A formal agreement between two or more countries.",
        },
    ],
};

function normalizeVocabularyEntry(entry) {
    if (!entry) return null;
    if (typeof entry === 'string') {
        const trimmed = entry.trim();
        return trimmed ? { term: trimmed, definition: '' } : null;
    }
    if (typeof entry !== 'object') return null;
    const term = typeof entry.term === 'string' ? entry.term.trim() : '';
    if (!term) return null;
    const definition = typeof entry.definition === 'string' ? entry.definition.trim() : '';
    const example = typeof entry.example === 'string' ? entry.example.trim() : '';
    const normalized = { term, definition };
    if (example) {
        normalized.example = example;
    }
    return normalized;
}

function mergeVocabularyData(base, override) {
    const result = { ...base };
    if (!override || typeof override !== 'object') {
        return result;
    }
    Object.entries(override).forEach(([subject, entries]) => {
        if (!Array.isArray(entries)) {
            return;
        }
        const normalizedEntries = entries
            .map(normalizeVocabularyEntry)
            .filter(Boolean);
        if (normalizedEntries.length) {
            result[subject] = normalizedEntries;
        }
    });
    return result;
}

class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { err: null };
    }

    static getDerivedStateFromError(err) {
        return { err };
    }

    componentDidCatch(err, info) {
        console.error('Render error:', err, info);
    }

    render() {
        if (this.state.err) {
            return (
                <div style={{ padding: '16px', background: '#fee2e2', color: '#991b1b', fontFamily: 'Inter, sans-serif' }}>
                    <h2 style={{ marginTop: 0 }}>Something went wrong.</h2>
                    <pre style={{ whiteSpace: 'pre-wrap' }}>{String(this.state.err)}</pre>
                </div>
            );
        }

        return this.props.children;
    }
}

const { tokenizeMathSegments, restoreMathSegments, normalizeCurrencyOutsideMath, normalizeLatexMacrosInMath, stripTextMacroInPlain, applyPhraseSpacingRepairs, addMissingBackslashesInMath, fixAllMathInText, collapseUnderscoredLatexMacros } = window.TextSanitizer || {};

const API_BASE_URL = 'https://ged-website.onrender.com';
const SCORE_FETCH_INTERVAL_MS = 45000;

async function generateTopicQuiz(subjectParam, topic, difficulty) {
    const response = await fetch(`${API_BASE_URL}/api/topic-based/${encodeURIComponent(subjectParam)}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ topic, difficulty })
    });

    let payload = null;
    try {
        payload = await response.json();
    } catch (err) {
        throw new Error('The quiz service returned invalid JSON.');
    }

    if (!response.ok) {
        const message = payload?.error || `Request failed with status ${response.status}`;
        throw new Error(message);
    }

    if (!payload?.success || !Array.isArray(payload.items)) {
        throw new Error('The quiz service returned an unexpected payload.');
    }

    return payload.items.map((item, idx) => ({ ...item, questionNumber: item.questionNumber ?? idx + 1 }));
}
const SUBJECT_PARAM_MAP = {
    'Science': 'Science',
    'Social Studies': 'Social Studies',
    'Math': 'Math',
    'Reasoning Through Language Arts (RLA)': 'RLA',
    'RLA': 'RLA'
};

const resolveSubjectParam = (subject) => {
    if (!subject) {
        return '';
    }
    return SUBJECT_PARAM_MAP[subject] || subject;
};

function applySafeMathFix(text) {
    if (typeof text !== 'string') {
        return text;
    }
    if (typeof fixAllMathInText === 'function') {
        return fixAllMathInText(text);
    }
    let working = text;
    if (typeof collapseUnderscoredLatexMacros === 'function') {
        working = collapseUnderscoredLatexMacros(working);
    }
    if (typeof addMissingBackslashesInMath === 'function') {
        return addMissingBackslashesInMath(working);
    }
    const legacy = (typeof window !== 'undefined' && window.TextSanitizer && window.TextSanitizer.addMissingBackslashesInMath);
    if (typeof legacy === 'function') {
        return legacy(working);
    }
    return working;
}

const ALLOWED_HTML_TAGS = [
    'a','b','strong','i','em','u','s','span','p','br','ul','ol','li','table','thead','tbody','tfoot','tr','th','td','caption',
    'colgroup','col','code','pre','sup','sub','div','img'
];
const ALLOWED_HTML_ATTR = ['href','title','target','rel','colspan','rowspan','align','scope','src','alt'];
const ENTITY_DECODER = typeof document !== 'undefined' ? document.createElement('textarea') : null;

function collapseSplitLatexCommands(source) {
    if (typeof source !== 'string' || source.length === 0) {
        return source;
    }

    let normalized = source.replace(/\\{2}(?=[A-Za-z_])/g, '\\');

    let previous;
    do {
        previous = normalized;
        normalized = normalized.replace(/([A-Za-z])\\_/g, '$1');
    } while (normalized !== previous);

    return normalized.replace(/\\([A-Za-z])(?:\\([A-Za-z]))+/g, (match) => `\\${match.replace(/\\/g, '')}`);
}

function normalizeLatex(text) {
    if (typeof text !== 'string' || text.length === 0) {
        return text;
    }

    let normalized = text;

    normalized = normalized.replace(/(?<!\\)\$([0-9]+(?:\.[0-9]{1,2})?)/g, (_match, amount) => `\\$${amount}`);

    normalized = normalized
        .replace(/\$\$([\s\S]*?)\$\$/g, '$1')
        .replace(/(?<!\\)\$([^$]*?)(?<!\\)\$/g, '$1')
        .replace(/\\\(([^]*?)\\\)/g, '$1')
        .replace(/\\\[([^]*?)\\\]/g, '$1');

    // unwrap accidentally math-wrapped currency, e.g. "$12.50$" -> "$12.50"
    normalized = normalized.replace(/\$(\s*\d+(?:[.,]\d{1,2}))\$/g, (_m, amount) => `$${amount.trim()}`);
    // close-up whitespace after literal $, e.g. "$   12" -> "$12"
    normalized = normalized.replace(/\$\s+(\d)/g, '$$1');

    normalized = normalized.replace(/\\dfrac/g, '\\frac');

    normalized = normalized
        // repair /frac, ^rac, ↑rac, stray spaces before 'rac'
        .replace(/(?:\\|\/|[\u2191\^])\s*rac\s*\{/g, '\\frac{')
        .replace(/\\frac\s+([^\s{}]+)\s+([^\s{}]+)/g, '\\frac{$1}{$2}')
        .replace(/\\frac\s*\{\s*([^{}]+?)\s*\}\s*\{\s*([^{}]+?)\s*\}/g, (_match, a, b) => `\\frac{${a.trim()}}{${b.trim()}}`);

    normalized = collapseSplitLatexCommands(normalized);

    if (typeof collapseUnderscoredLatexMacros === 'function') {
        normalized = collapseUnderscoredLatexMacros(normalized);
    }

    normalized = normalized.replace(/(?<![A-Za-z])rac\s*\{/g, '\\frac{');

    normalized = normalized.replace(/<\/?(?:table|thead|tbody|tfoot|tr|th|td|caption|colgroup|col)[^>]*>/gi, ' ');
    normalized = normalized.replace(/<[^>]+>/g, ' ');

    normalized = normalized.replace(/(?<!\\)\*/g, '\\*');

    normalized = normalized.replace(/(?<!\\)_/g, (match, offset, source) => {
        const prev = offset > 0 ? source[offset - 1] : '';
        if (/^[A-Za-z0-9)]$/.test(prev)) {
            return match;
        }
        return '\\_';
    });

    return normalized.replace(/\s{2,}/g, ' ').trim();
}

function normalizeLatexForKaTeX(latex) {
    if (typeof latex !== 'string') return latex;
    return latex
        .replace(/\\\\([A-Za-z]+)/g, '\\$1')
        .replace(/\\left\s*/g, '')
        .replace(/\\right\s*/g, '');
}

const KATEX_RENDER_OPTIONS = { throwOnError: false, strict: 'ignore' };

function renderLatexToHtml(latexInput) {
    if (typeof latexInput !== 'string') {
        return '';
    }
    if (typeof katex === 'undefined') {
        throw new Error('KaTeX not available');
    }
    const latex = normalizeLatexForKaTeX(latexInput);
    if (typeof document !== 'undefined' && typeof document.createElement === 'function' && typeof katex.render === 'function') {
        const container = document.createElement('span');
        katex.render(latex, container, KATEX_RENDER_OPTIONS);
        return container.innerHTML;
    }
    if (typeof katex.renderToString === 'function') {
        return katex.renderToString(latex, KATEX_RENDER_OPTIONS);
    }
    throw new Error('KaTeX render helpers missing');
}

function normalizeFormulaLatex(latex) {
    if (typeof latex !== 'string') {
        return '';
    }

    let working = latex;

    try {
        working = applySafeMathFix(working);
    } catch (error) {
        console.warn('Failed to sanitize formula latex:', error?.message || error);
    }

    try {
        working = normalizeLatex(working);
    } catch (error) {
        console.warn('Failed to normalize formula latex:', error?.message || error);
    }

    return working;
}

function smartWrapLatex(input) {
    if (typeof input !== 'string' || input.length === 0) {
        return input;
    }

    const slots = [];
    const masked = input.replace(/\\\([^\)]*\\\)|\$[^$]+\$/g, (match) => {
        slots.push(match);
        return `@@M${slots.length - 1}@@`;
    });

    const MACRO_PATTERN = /\\(?:frac|sqrt|text|pi|times|cdot|le|ge|lt|gt|neq|approx|sin|cos|tan|log|ln|pm|mp|theta|alpha|beta|gamma)\b/y;

    const grabBraces = (source, start) => {
        if (source[start] !== '{') {
            return 0;
        }
        let depth = 0;
        let index = start;
        while (index < source.length) {
            const ch = source[index++];
            if (ch === '{') {
                depth += 1;
            } else if (ch === '}') {
                depth -= 1;
                if (depth === 0) {
                    return index - start;
                }
            }
        }
        return 0;
    };

    let result = '';
    let cursor = 0;

    while (cursor < masked.length) {
        const char = masked[cursor];
        if (char === '\\') {
            MACRO_PATTERN.lastIndex = cursor;
            const match = MACRO_PATTERN.exec(masked);
            if (match) {
                let end = MACRO_PATTERN.lastIndex;
                if (match[0] === '\\frac') {
                    const first = grabBraces(masked, end);
                    if (first) {
                        end += first;
                        const second = grabBraces(masked, end);
                        if (second) {
                            end += second;
                        }
                    }
                } else {
                    const groupLen = grabBraces(masked, end);
                    if (groupLen) {
                        end += groupLen;
                    }
                }
                const segment = masked.slice(cursor, end);
                result += `\\(${segment}\\)`;
                cursor = end;
                continue;
            }
        }
        result += char;
        cursor += 1;
    }

    // Sanity cases:
    // equation \frac{x}{4} = \frac{15}{20}?
    // 1\frac{1}{2} cups
    // no more than \text{P500}, spent \text{P120}
    // /frac{3}{4}, ^rac{2}{3}, ↑rac{1}{2}

    return result.replace(/@@M(\d+)@@/g, (_match, index) => slots[Number(index)]);
}

function escapeHtml(value) {
    if (typeof value !== 'string' || value.length === 0) {
        return '';
    }
    return value
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

function stripLeakedMathPlaceholders(text) {
    if (typeof text !== 'string' || text.length === 0) {
        return text;
    }
    return text
        .replace(/(?:\f|\\f)\\?_?MATH_SEGMENT_[A-Z0-9]+/gi, '')
        .replace(/MATH_SEGMENT_[A-Z0-9]+/gi, '');
}

function renderStem(text) {
    if (typeof text !== 'string') {
        return '';
    }

    const cleanedText = preprocessRawContent(text, { normalizeSpacing: true });
    const segments = extractMathSegments(cleanedText);
    const renderedParts = [];

    for (const segment of segments) {
        if (segment.type === 'math') {
            try {
                renderedParts.push(renderLatexToHtml(segment.value));
            } catch (err) {
                console.warn('KaTeX render failed:', err);
                renderedParts.push(segment.raw);
            }
        } else {
            renderedParts.push(segment.value);
        }
    }

    const combinedHtml = renderedParts.join('');
    return DOMPurify.sanitize(combinedHtml, {
        ALLOWED_TAGS: [...ALLOWED_HTML_TAGS, 'span', 'path', 'svg'],
        ALLOWED_ATTR: [...ALLOWED_HTML_ATTR, 'style', 'd', 'viewBox', 'xmlns']
    });
}

const GEOMETRY_FIGURES_ENABLED = Boolean(
    typeof window !== 'undefined' &&
    window.__APP_CONFIG__ &&
    window.__APP_CONFIG__.geometryFiguresEnabled
);

const DEFAULT_FIGURE_STYLE = {
    stroke: '#1f2937',
    fill: 'rgba(96, 165, 250, 0.12)',
    labelColor: '#1f2937',
    pointFill: '#ffffff'
};

const normalizeNumber = value => {
    if (typeof value === 'number') return value;
    const parsed = Number(value);
    return Number.isFinite(parsed) ? parsed : undefined;
};

const normalizePoint = (point = {}) => {
    const x = normalizeNumber(point.x);
    const y = normalizeNumber(point.y);
    if (typeof x !== 'number' || typeof y !== 'number') {
        return undefined;
    }
    return {
        x,
        y,
        label: typeof point.label === 'string' ? point.label : undefined
    };
};

const mapPoints = list => {
    if (!Array.isArray(list)) return [];
    return list.map(normalizePoint).filter(Boolean);
};

const midpoint = (a, b) => ({
    x: (a.x + b.x) / 2,
    y: (a.y + b.y) / 2
});

const findPointByLabel = (points, label) => {
    if (!label) return undefined;
    return points.find(pt => pt.label === label);
};

const renderPointMarkers = (points, style) => {
    return points.map((pt, index) => (
        <g key={`pt-${index}`}>
            <circle cx={pt.x} cy={pt.y} r={1.8} fill={style.pointFill} stroke={style.stroke} strokeWidth={0.6} />
            {pt.label && (
                <text x={pt.x + 2.8} y={pt.y - 2.2} fontSize={6} fill={style.labelColor}>
                    {pt.label}
                </text>
            )}
        </g>
    ));
};

const renderSideLabels = (points, sideLabels = [], style) => {
    if (!Array.isArray(sideLabels)) return [];
    return sideLabels.map((entry, index) => {
        if (!entry || !Array.isArray(entry.between) || entry.between.length !== 2 || typeof entry.text !== 'string') {
            return null;
        }
        const a = findPointByLabel(points, entry.between[0]);
        const b = findPointByLabel(points, entry.between[1]);
        if (!a || !b) return null;
        const mid = midpoint(a, b);
        return (
            <text key={`side-label-${index}`} x={mid.x} y={mid.y - 1.5} fontSize={6} textAnchor="middle" fill={style.labelColor}>
                {entry.text}
            </text>
        );
    }).filter(Boolean);
};

const renderAdditionalLabels = (labels = [], style) => {
    if (!Array.isArray(labels)) return [];
    return labels.map((label, index) => {
        const normalized = normalizePoint(label);
        if (!normalized || typeof label.text !== 'string') {
            return null;
        }
        const dx = normalizeNumber(label.dx) || 0;
        const dy = normalizeNumber(label.dy) || 0;
        return (
            <text key={`label-${index}`} x={normalized.x + dx} y={normalized.y + dy} fontSize={6} textAnchor={label.textAnchor || 'middle'} fill={style.labelColor}>
                {label.text}
            </text>
        );
    }).filter(Boolean);
};

const renderSegments = (segments = [], style) => {
    if (!Array.isArray(segments)) return [];
    return segments.map((segment, index) => {
        if (!segment || !Array.isArray(segment.from) || !Array.isArray(segment.to)) {
            return null;
        }
        const from = segment.from.map(normalizeNumber);
        const to = segment.to.map(normalizeNumber);
        if (from.length !== 2 || to.length !== 2 || from.some(v => typeof v !== 'number') || to.some(v => typeof v !== 'number')) {
            return null;
        }
        const dashArray = segment.dashed ? '4,3' : undefined;
        const labelText = typeof segment.label === 'string' ? segment.label : null;
        const labelOffset = Array.isArray(segment.labelOffset) ? segment.labelOffset.map(normalizeNumber) : [];
        const mid = { x: (from[0] + to[0]) / 2, y: (from[1] + to[1]) / 2 };

        return (
            <g key={`segment-${index}`}>
                <line x1={from[0]} y1={from[1]} x2={to[0]} y2={to[1]} stroke={style.stroke} strokeWidth={1} strokeDasharray={dashArray} />
                {labelText && (
                    <text x={mid.x + (labelOffset[0] || 0)} y={mid.y + (labelOffset[1] || -2)} fontSize={6} textAnchor="middle" fill={style.labelColor}>
                        {labelText}
                    </text>
                )}
            </g>
        );
    }).filter(Boolean);
};

const polygonRenderer = (params = {}, style, { includeRightAngle } = {}) => {
    const points = mapPoints(params.points);
    if (points.length < 3) return null;

    const polygonPoints = points.map(pt => `${pt.x},${pt.y}`).join(' ');
    const elements = [
        <polygon key="polygon" points={polygonPoints} fill={style.fill} stroke={style.stroke} strokeWidth={1.5} />,
        ...renderPointMarkers(points, style),
        ...renderSideLabels(points, params.sideLabels, style),
        ...renderAdditionalLabels(params.labels, style),
        ...renderSegments(params.segments, style)
    ];

    if (includeRightAngle && params.rightAngle) {
        const vertexLabel = params.rightAngle.vertex;
        const size = normalizeNumber(params.rightAngle.size) || 8;
        const vertex = findPointByLabel(points, vertexLabel) || points[0];
        const vertexIndex = points.findIndex(pt => pt === vertex);
        const prev = points[(vertexIndex - 1 + points.length) % points.length];
        const next = points[(vertexIndex + 1) % points.length];
        if (prev && next) {
            const v1 = { x: prev.x - vertex.x, y: prev.y - vertex.y };
            const v2 = { x: next.x - vertex.x, y: next.y - vertex.y };
            const len1 = Math.hypot(v1.x, v1.y) || 1;
            const len2 = Math.hypot(v2.x, v2.y) || 1;
            const u1 = { x: (v1.x / len1) * size, y: (v1.y / len1) * size };
            const u2 = { x: (v2.x / len2) * size, y: (v2.y / len2) * size };
            const p1 = { x: vertex.x + u1.x, y: vertex.y + u1.y };
            const p2 = { x: p1.x + u2.x, y: p1.y + u2.y };
            const p3 = { x: vertex.x + u2.x, y: vertex.y + u2.y };
            elements.push(
                <polygon
                    key="right-angle"
                    points={`${vertex.x},${vertex.y} ${p1.x},${p1.y} ${p2.x},${p2.y} ${p3.x},${p3.y}`}
                    fill="rgba(30, 64, 175, 0.12)"
                    stroke={style.stroke}
                    strokeWidth={0.8}
                />
            );
        }
    }

    return {
        elements,
        pointsForBounds: points
    };
};

const rectangleRenderer = (params = {}, style) => {
    const origin = normalizePoint(params.origin) || { x: 15, y: 15 };
    const width = normalizeNumber(params.width);
    const height = normalizeNumber(params.height);
    if (typeof width !== 'number' || typeof height !== 'number') return null;
    const points = [
        origin,
        { x: origin.x + width, y: origin.y },
        { x: origin.x + width, y: origin.y + height },
        { x: origin.x, y: origin.y + height }
    ];

    const base = polygonRenderer({ points, labels: params.labels, sideLabels: params.sideLabels, segments: params.segments }, style);
    if (!base) return null;
    return base;
};

const circleRenderer = (params = {}, style) => {
    const center = normalizePoint(params.center) || { x: 50, y: 50 };
    const radius = normalizeNumber(params.radius);
    if (typeof radius !== 'number') return null;
    const points = mapPoints(params.points);
    const elements = [
        <circle key="circle" cx={center.x} cy={center.y} r={radius} fill={style.fill} stroke={style.stroke} strokeWidth={1.5} />,
        ...renderPointMarkers(points, style),
        ...renderAdditionalLabels(params.labels, style),
        ...renderSegments(params.segments, style)
    ];

    if (params.radiusLabel) {
        elements.push(
            <text key="radius-label" x={center.x + radius / 2} y={center.y - 2} fontSize={6} textAnchor="middle" fill={style.labelColor}>
                {params.radiusLabel}
            </text>
        );
    }

    if (params.showRadius !== false) {
        elements.push(
            <line key="radius-line" x1={center.x} y1={center.y} x2={center.x + radius} y2={center.y} stroke={style.stroke} strokeWidth={1} strokeDasharray="4,3" />
        );
    }

    return {
        elements,
        pointsForBounds: [...points, { x: center.x + radius, y: center.y }, { x: center.x - radius, y: center.y }, { x: center.x, y: center.y + radius }, { x: center.x, y: center.y - radius }]
    };
};

const regularPolygonRenderer = (params = {}, style) => {
    const center = normalizePoint(params.center) || { x: 50, y: 50 };
    const radius = normalizeNumber(params.radius);
    const sides = Math.max(3, Math.floor(normalizeNumber(params.sides) || 0));
    if (typeof radius !== 'number' || !Number.isFinite(sides) || sides < 3) return null;
    const startAngle = (normalizeNumber(params.startAngle) || -90) * (Math.PI / 180);
    const points = Array.from({ length: sides }).map((_, index) => {
        const angle = startAngle + (index * 2 * Math.PI) / sides;
        return {
            x: center.x + radius * Math.cos(angle),
            y: center.y + radius * Math.sin(angle),
            label: params.pointLabels && params.pointLabels[index] ? params.pointLabels[index] : undefined
        };
    });

    return polygonRenderer({ points, labels: params.labels, sideLabels: params.sideLabels, segments: params.segments }, style);
};

const angleRenderer = (params = {}, style) => {
    const vertex = normalizePoint(params.vertex);
    const ray1 = normalizePoint(params.ray1);
    const ray2 = normalizePoint(params.ray2);
    if (!vertex || !ray1 || !ray2) return null;

    const pointsForBounds = [vertex, ray1, ray2];
    const elements = [
        <line key="ray1" x1={vertex.x} y1={vertex.y} x2={ray1.x} y2={ray1.y} stroke={style.stroke} strokeWidth={1.2} />,
        <line key="ray2" x1={vertex.x} y1={vertex.y} x2={ray2.x} y2={ray2.y} stroke={style.stroke} strokeWidth={1.2} />,
        ...renderPointMarkers([vertex, ray1, ray2], style),
        ...renderAdditionalLabels(params.labels, style),
        ...renderSegments(params.segments, style)
    ];

    const angleLabel = typeof params.angleLabel === 'string' ? params.angleLabel : null;
    const radius = normalizeNumber(params.arcRadius) || 12;

    const drawAngleArc = () => {
        const startVec = { x: ray1.x - vertex.x, y: ray1.y - vertex.y };
        const endVec = { x: ray2.x - vertex.x, y: ray2.y - vertex.y };
        const startAngle = Math.atan2(startVec.y, startVec.x);
        let endAngle = Math.atan2(endVec.y, endVec.x);
        while (endAngle < startAngle) {
            endAngle += Math.PI * 2;
        }
        const arcSweep = endAngle - startAngle;
        const largeArcFlag = arcSweep > Math.PI ? 1 : 0;
        const arcEnd = {
            x: vertex.x + radius * Math.cos(endAngle),
            y: vertex.y + radius * Math.sin(endAngle)
        };
        const arcStart = {
            x: vertex.x + radius * Math.cos(startAngle),
            y: vertex.y + radius * Math.sin(startAngle)
        };

        elements.push(
            <path
                key="angle-arc"
                d={`M ${arcStart.x} ${arcStart.y} A ${radius} ${radius} 0 ${largeArcFlag} 1 ${arcEnd.x} ${arcEnd.y}`}
                fill="none"
                stroke={style.stroke}
                strokeWidth={1}
            />
        );

        if (angleLabel) {
            const labelAngle = startAngle + arcSweep / 2;
            const labelPoint = {
                x: vertex.x + (radius + 6) * Math.cos(labelAngle),
                y: vertex.y + (radius + 6) * Math.sin(labelAngle)
            };
            elements.push(
                <text key="angle-label" x={labelPoint.x} y={labelPoint.y} fontSize={6} textAnchor="middle" fill={style.labelColor}>
                    {angleLabel}
                </text>
            );
        }
    };

    drawAngleArc();

    return { elements, pointsForBounds };
};

const cylinderNetRenderer = (params = {}, style) => {
    const radius = Math.abs(normalizeNumber(params.radius));
    const height = Math.abs(normalizeNumber(params.height));
    if (!Number.isFinite(radius) || !Number.isFinite(height)) return null;
    const circumference = 2 * Math.PI * radius;
    const rectWidth = Math.max(circumference, radius * 4);
    const rectHeight = height;
    const padding = 10;
    const topCenter = { x: padding + rectWidth / 2, y: padding + radius }; // radius used as circle radius on diagram scale
    const bottomCenter = { x: padding + rectWidth / 2, y: padding + rectHeight + radius * 3 };

    const elements = [
        <rect key="lateral" x={padding} y={padding + radius * 2} width={rectWidth} height={rectHeight} fill={style.fill} stroke={style.stroke} strokeWidth={1.2} />,
        <circle key="top-circle" cx={topCenter.x} cy={topCenter.y} r={radius * 1.5} fill={style.fill} stroke={style.stroke} strokeWidth={1.2} />, // scaled for clarity
        <circle key="bottom-circle" cx={bottomCenter.x} cy={bottomCenter.y} r={radius * 1.5} fill={style.fill} stroke={style.stroke} strokeWidth={1.2} />,
        <text key="height-label" x={padding + rectWidth + 6} y={padding + radius * 2 + rectHeight / 2} fontSize={6} fill={style.labelColor}>
            h = {height}
        </text>,
        <text key="circumference-label" x={padding + rectWidth / 2} y={padding + radius * 2 + rectHeight + 8} fontSize={6} textAnchor="middle" fill={style.labelColor}>
            circumference = {circumference.toFixed(2)}
        </text>,
        <text key="radius-label-top" x={topCenter.x + radius * 1.5 + 6} y={topCenter.y} fontSize={6} fill={style.labelColor}>
            r = {radius}
        </text>,
        ...renderAdditionalLabels(params.labels, style)
    ];

    return {
        elements,
        pointsForBounds: [
            { x: padding, y: padding },
            { x: padding + rectWidth, y: padding + radius * 2 + rectHeight },
            { x: bottomCenter.x + radius * 1.5, y: bottomCenter.y + radius * 1.5 }
        ]
    };
};

const rectPrismNetRenderer = (params = {}, style) => {
    const length = Math.abs(normalizeNumber(params.length));
    const width = Math.abs(normalizeNumber(params.width));
    const height = Math.abs(normalizeNumber(params.height));
    if (!Number.isFinite(length) || !Number.isFinite(width) || !Number.isFinite(height)) return null;

    const padding = 10;
    const scale = 1;
    const L = length * scale;
    const W = width * scale;
    const H = height * scale;

    const elements = [];
    const pointsForBounds = [];

    const drawRect = (x, y, w, h, key, label) => {
        elements.push(<rect key={key} x={x} y={y} width={w} height={h} fill={style.fill} stroke={style.stroke} strokeWidth={1.2} />);
        if (label) {
            elements.push(
                <text key={`${key}-label`} x={x + w / 2} y={y + h / 2} fontSize={6} textAnchor="middle" fill={style.labelColor}>
                    {label}
                </text>
            );
        }
        pointsForBounds.push({ x, y }, { x: x + w, y: y + h });
    };

    const startX = padding + W;
    const startY = padding + H;

    drawRect(startX, startY, L, H, 'front', `h = ${height}`);
    drawRect(startX + L, startY, W, H, 'right', `w = ${width}`);
    drawRect(startX - W, startY, W, H, 'left', `w = ${width}`);
    drawRect(startX + L + W, startY, W, H, 'extra', '');
    drawRect(startX, startY - H, L, H, 'top', `l = ${length}`);
    drawRect(startX, startY + H, L, H, 'bottom', `l = ${length}`);

    elements.push(...renderAdditionalLabels(params.labels, style));

    return { elements, pointsForBounds };
};

const geometryRenderers = {
    triangle: (params, style) => polygonRenderer(params, style || DEFAULT_FIGURE_STYLE, {}),
    right_triangle: (params, style) => polygonRenderer(params, style || DEFAULT_FIGURE_STYLE, { includeRightAngle: true }),
    rectangle: (params, style) => rectangleRenderer(params, style || DEFAULT_FIGURE_STYLE),
    circle: (params, style) => circleRenderer(params, style || DEFAULT_FIGURE_STYLE),
    polygon: (params, style) => polygonRenderer(params, style || DEFAULT_FIGURE_STYLE, {}),
    regular_polygon: (params, style) => regularPolygonRenderer(params, style || DEFAULT_FIGURE_STYLE),
    line_angle: (params, style) => angleRenderer(params, style || DEFAULT_FIGURE_STYLE),
    cylinder_net: (params, style) => cylinderNetRenderer(params, style || DEFAULT_FIGURE_STYLE),
    rect_prism_net: (params, style) => rectPrismNetRenderer(params, style || DEFAULT_FIGURE_STYLE)
};

function GeometryFigure({ spec, className }) {
    if (!GEOMETRY_FIGURES_ENABLED || !spec || typeof spec !== 'object') {
        return null;
    }

    const style = {
        ...DEFAULT_FIGURE_STYLE,
        ...(spec.style || {})
    };

    const renderer = geometryRenderers[spec.shape];
    if (!renderer) {
        console.warn('Unsupported geometry shape:', spec.shape);
        return null;
    }

    const renderResult = renderer(spec.params || {}, style);
    if (!renderResult) {
        return null;
    }

    const points = renderResult.pointsForBounds && renderResult.pointsForBounds.length > 0
        ? renderResult.pointsForBounds
        : [{ x: 0, y: 0 }, { x: 100, y: 100 }];

    let minX = Math.min(...points.map(pt => pt.x));
    let maxX = Math.max(...points.map(pt => pt.x));
    let minY = Math.min(...points.map(pt => pt.y));
    let maxY = Math.max(...points.map(pt => pt.y));

    if (spec.view) {
        const { xMin, xMax, yMin, yMax } = spec.view;
        if (typeof xMin === 'number') minX = Math.min(minX, xMin);
        if (typeof xMax === 'number') maxX = Math.max(maxX, xMax);
        if (typeof yMin === 'number') minY = Math.min(minY, yMin);
        if (typeof yMax === 'number') maxY = Math.max(maxY, yMax);
    }

    const padding = (spec.view && typeof spec.view.padding === 'number') ? spec.view.padding : 8;
    const width = Math.max(maxX - minX, 20);
    const height = Math.max(maxY - minY, 20);

    const viewBox = `${minX - padding} ${minY - padding} ${width + padding * 2} ${height + padding * 2}`;

    return (
        <svg
            className={className}
            viewBox={viewBox}
            xmlns="http://www.w3.org/2000/svg"
            role="img"
            aria-label="Geometry figure"
            preserveAspectRatio="xMidYMid meet"
        >
            {renderResult.elements}
        </svg>
    );
}

function postRenderGuardrails(container, { itemIndex } = {}) {
    if (!container || typeof document === 'undefined' || typeof NodeFilter === 'undefined' || !container.innerHTML) {
        return;
    }

    const issues = new Set();
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT, null);
    const tableTextNodes = [];
    while (walker.nextNode()) {
        const currentNode = walker.currentNode;
        if (!currentNode || !currentNode.nodeValue) continue;
        const value = currentNode.nodeValue;
        if (/<\s*(?:tr|th|td)/i.test(value)) {
            tableTextNodes.push(currentNode);
        }
    }

    tableTextNodes.forEach(node => {
        if (!node.parentNode) return;
        const codeEl = document.createElement('code');
        codeEl.className = 'raw-html-fragment';
        codeEl.textContent = node.nodeValue;
        node.parentNode.replaceChild(codeEl, node);
        issues.add('tableMarkup');
    });

    if (issues.size > 0) {
        const context = typeof itemIndex !== 'undefined' ? ` for item ${itemIndex}` : '';
        console.warn(`[MathText] Post-render guardrails triggered${context}: ${Array.from(issues).join(', ')}`);
    }
}

function MathText({ text, className, subject }) {
    if (typeof text !== 'string' || text.trim() === '') {
        return <span className={className}></span>;
    }

    let renderedHtml;

    // ONLY run the complex math/currency renderer for the Math subject.
    if (subject === 'Math') {
        renderedHtml = renderStem(text);
    } else {
        // For all other subjects, just sanitize the HTML and display it.
        renderedHtml = DOMPurify.sanitize(text);
    }

    return <span className={className} dangerouslySetInnerHTML={{ __html: renderedHtml }} />;
}

function normalizeLineBreaks(value) {
    if (typeof value !== 'string') return value;
    return value
        .replace(/\r\n?/g, '\n')
        .replace(/([^\n])\n(?!\n)/g, '$1 ')
        .replace(/\n{3,}/g, '\n\n');
}

function surroundOperatorWithSpaces(source, match, offset) {
    const before = offset > 0 ? source[offset - 1] : '';
    const after = offset + match.length < source.length ? source[offset + match.length] : '';
    const isAlphaBefore = before && /[A-Za-z]/.test(before);
    const isAlphaAfter = after && /[A-Za-z]/.test(after);
    if (isAlphaBefore || isAlphaAfter) {
        return match;
    }
    const trimmed = match.replace(/\s+/g, ' ').trim();
    const leading = before && !/[\s\n]/.test(before) ? ' ' : '';
    const trailing = after && !/[\s\n]/.test(after) ? ' ' : '';
    return `${leading}${trimmed}${trailing}`;
}

function normalizePunctuationSpacing(value) {
    if (typeof value !== 'string') return value;
    let result = value.replace(/([.,;:!?])(?=\S)/g, (match, punct, offset, string) => {
        const nextChar = string[offset + match.length];
        if (!nextChar) return match;
        if (/\s/.test(nextChar)) return match;
        if ((punct === ':' || punct === ',' || punct === '.') && /[0-9]/.test(nextChar)) {
            return match;
        }
        if ((punct === ':' || punct === '.') && nextChar === '/') {
            return match;
        }
        return `${punct} `;
    });
    const wordOperators = ['plus', 'minus', 'times'];
    wordOperators.forEach(op => {
        const regex = new RegExp(op, 'gi');
        result = result.replace(regex, (match, offset, string) => surroundOperatorWithSpaces(string, match, offset));
    });
    const dividedRegex = /divided\s+by/gi;
    result = result.replace(dividedRegex, (match, offset, string) => surroundOperatorWithSpaces(string, match, offset));
    result = result.replace(/[^\S\r\n]+([.,;:!?])/g, '$1');
    result = result.replace(/[^\S\r\n]{2,}/g, ' ');
    return result;
}

const LATEX_CONTROL_CHAR_ESCAPE = {
    '\f': 'f',
    '\n': 'n',
    '\t': 't',
    '\r': 'r',
    '\b': 'b',
    '\v': 'v'
};

function escapeLatexControlCharacters(input) {
    return input.replace(/[\f\n\t\r\b\v]/g, char => {
        const replacement = LATEX_CONTROL_CHAR_ESCAPE[char];
        return replacement ? `\\${replacement}` : char;
    });
}

function repairLatexCorruption(value) {
    if (typeof value !== 'string') return value;
    let working = value.replace(/(?:\^|\f)rac\{/gi, '\\frac{');
    working = working.replace(/\$\$([\s\S]+?)\$\$/g, (_, inner) => `$$${escapeLatexControlCharacters(inner)}$$`);
    working = working.replace(/\$([\s\S]+?)\$/g, (_, inner) => `$${escapeLatexControlCharacters(inner)}$`);
    working = working.replace(/\\\(([\s\S]+?)\\\)/g, (_, inner) => `\\(${escapeLatexControlCharacters(inner)}\\)`);
    return working;
}

function decodeHtmlEntities(value) {
    if (typeof value !== 'string') return '';
    if (!ENTITY_DECODER) return value;
    ENTITY_DECODER.innerHTML = value;
    return ENTITY_DECODER.value;
}

function neutralizeUnpairedDollarSigns(text) {
    if (typeof text !== 'string' || text.indexOf('$') === -1) {
        return text;
    }

    if (!(tokenizeMathSegments && restoreMathSegments)) {
        return text.replace(/(^|[^\\])\$(?!\d)/g, (_, prefix) => `${prefix}&#36;`);
    }

    const { masked, segments } = tokenizeMathSegments(text);
    const working = masked.replace(/(^|[^\\])\$(?!\d)/g, (_, prefix) => `${prefix}&#36;`);
    return restoreMathSegments(working, segments);
}

function escapeCurrencyDollarsMathSafe(input) {
    if (typeof input !== 'string') return input;

    if (!(tokenizeMathSegments && restoreMathSegments)) {
        let fallback = input.replace(/\\$(\s*\d[\d.,]*)/g, '&#36;$1');
        fallback = fallback.replace(/(\d[\d.,]*)(\s*)\$(?!\d)/g, '&#36;$1');
        return fallback.replace(/(^|[^&])\$(?!\d)/g, (_, prefix) => `${prefix}&#36;`);
    }

    const { masked, segments } = tokenizeMathSegments(input);
    let working = masked.replace(/\\$(\s*\d[\d.,]*)/g, '&#36;$1');
    working = working.replace(/(\d[\d.,]*)(\s*)\$(?!\d)/g, '&#36;$1');
    working = working.replace(/(^|[^&])\$(?!\d)/g, (_, prefix) => `${prefix}&#36;`);
    return restoreMathSegments(working, segments);
}

function stripBackslashesOutsideMath(input) {
    if (typeof input !== 'string') return input;

    if (!(tokenizeMathSegments && restoreMathSegments)) {
        return input.replace(/\\(?=\d|\$)/g, '');
    }

    const { masked, segments } = tokenizeMathSegments(input);
    const cleaned = masked.replace(/\\(?=\d|\$)/g, '');
    return restoreMathSegments(cleaned, segments);
}

function deglueCommonBigrams(s) {
    if (typeof s !== 'string') return s;
    const replacements = {
        inthe: 'in the',
        ofthe: 'of the',
        forthe: 'for the',
        tothe: 'to the',
        theof: 'the of'
    };

    return s.replace(/\b(inthe|ofthe|forthe|tothe|theof)\b/gi, (match) => {
        const replacement = replacements[match.toLowerCase()];
        if (!replacement) {
            return match;
        }
        if (match === match.toUpperCase()) {
            return replacement.toUpperCase();
        }
        if (match[0] === match[0].toUpperCase()) {
            return replacement.charAt(0).toUpperCase() + replacement.slice(1);
        }
        return replacement;
    });
}

function addSpacesAroundInlineMath(s) {
    if (typeof s !== 'string') return s;
    return s
        .replace(/([A-Za-z])\$(?!\$)/g, '$1 $')
        .replace(/\$(?!\$)([A-Za-z])/g, ' $1');
}

function repairSpacedTags(s) {
    if (typeof s !== 'string') return s;
    return s
        .replace(/<\s*\/\s*([a-z]+)\s*>/gi, '</$1>')
        .replace(/<\s*([a-z]+)(\s[^>]*)?>/gi, (_, tagName, attrs = '') => {
            const normalizedAttrs = attrs ? attrs.replace(/\s+$/, '') : '';
            return `<${tagName}${normalizedAttrs}>`;
        });
}

function protectTables(text) {
    if (typeof text !== 'string' || text.toLowerCase().indexOf('<table') === -1) {
        return text;
    }

    return text.replace(/<table[\s\S]*?<\/table>/gi, (tableContent) =>
        tableContent.replace(/\$/g, '&#36;')
    );
}

function preprocessRawContent(value, { normalizeSpacing = false } = {}) {
    if (typeof value !== 'string') return '';
    let working = normalizeLineBreaks(value);
    if (normalizeSpacing) {
        working = normalizePunctuationSpacing(working);
    }
    working = repairLatexCorruption(working);
    working = decodeHtmlEntities(working);

    if (tokenizeMathSegments && restoreMathSegments) {
        const { masked, segments } = tokenizeMathSegments(working);
        let plain = masked;
        if (stripTextMacroInPlain) {
            plain = stripTextMacroInPlain(plain);
        }
        if (applyPhraseSpacingRepairs) {
            plain = applyPhraseSpacingRepairs(plain);
        }
        if (normalizeCurrencyOutsideMath) {
            plain = normalizeCurrencyOutsideMath(plain);
        }
        working = restoreMathSegments(plain, segments);
    } else {
        if (stripTextMacroInPlain) {
            working = stripTextMacroInPlain(working);
        }
        if (applyPhraseSpacingRepairs) {
            working = applyPhraseSpacingRepairs(working);
        }
        if (normalizeCurrencyOutsideMath) {
            working = normalizeCurrencyOutsideMath(working);
        }
    }

    working = stripBackslashesOutsideMath(working);
    working = neutralizeUnpairedDollarSigns(working);
    working = escapeCurrencyDollarsMathSafe(working);
    working = working.replace(/(\d[\d.,]*)(\s*)&\#36;/g, '&#36;$1');
    working = addSpacesAroundInlineMath(working);
    working = repairSpacedTags(working);
    working = protectTables(working);
    working = deglueCommonBigrams(working);
    working = working.replace(/\$\s*([A-Za-z])\s*\$/g, '$1');
    return working;
}

function extractMathSegments(input) {
    const segments = [];
    if (typeof input !== 'string' || !input.length) {
        return segments;
    }
    const mathRegex = /\$\$([\s\S]+?)\$\$|\\\[([\s\S]+?)\\\]|\$([\s\S]+?)\$|\\\(([\s\S]+?)\\\)/g;
    let lastIndex = 0;
    let match;
    while ((match = mathRegex.exec(input)) !== null) {
        if (match.index > lastIndex) {
            segments.push({ type: 'text', value: input.slice(lastIndex, match.index) });
        }
        if (typeof match[1] !== 'undefined') {
            segments.push({ type: 'math', value: match[1], displayMode: true, raw: match[0] });
        } else if (typeof match[2] !== 'undefined') {
            segments.push({ type: 'math', value: match[2], displayMode: true, raw: match[0] });
        } else if (typeof match[3] !== 'undefined') {
            segments.push({ type: 'math', value: match[3], displayMode: false, raw: match[0] });
        } else {
            segments.push({ type: 'math', value: match[4], displayMode: false, raw: match[0] });
        }
        lastIndex = mathRegex.lastIndex;
    }
    if (lastIndex < input.length) {
        segments.push({ type: 'text', value: input.slice(lastIndex) });
    }
    return segments;
}

function sanitizeHtmlContent(content, { normalizeSpacing = false, skipPreprocess = false } = {}) {
    if (typeof content !== 'string') return '';
    let working = content;
    if (!skipPreprocess) {
        working = preprocessRawContent(working, { normalizeSpacing });
    }

    if (typeof DOMPurify !== 'undefined') {
        return DOMPurify.sanitize(working, {
            ALLOWED_TAGS: ALLOWED_HTML_TAGS,
            ALLOWED_ATTR: ALLOWED_HTML_ATTR
        });
    }

    return working
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

function cleanRepeatedText(text) {
    if (!text || typeof text !== 'string') return text;
    const half = Math.floor(text.length / 2);
    if (text.length % 2 === 0) {
        const firstHalf = text.substring(0, half);
        const secondHalf = text.substring(half);
        if (firstHalf === secondHalf) {
            return firstHalf;
        }
    }
    return text;
}

function parseHtmlTable(htmlString) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlString, 'text/html');
    const table = doc.querySelector('table');
    if (!table) return null;
    const headers = [...table.querySelectorAll('th')].map(th => th.innerText);
    const rows = [...table.querySelectorAll('tbody tr')];
    const labels = rows.map(row => row.querySelector('td')?.innerText || '');
    const datasets = [];
    for (let i = 1; i < headers.length; i++) {
        datasets.push({
            label: headers[i],
            data: rows.map(row => parseFloat(row.querySelectorAll('td')[i]?.innerText.replace(/[^0-9.-]+/g,"")) || 0),
            backgroundColor: `rgba(59, 130, 246, 0.6)`,
        });
    }
    return { labels, datasets };
}

function ChartDisplay({ chartData }) {
    const chartRef = React.useRef(null);
    React.useEffect(() => {
        if (chartRef.current && chartData) {
            const chartInstance = new Chart(chartRef.current, {
                type: 'bar',
                data: { labels: chartData.labels, datasets: chartData.datasets },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: {
                        duration: 0 // This line disables all animations
                    }
                }
            });
            return () => chartInstance.destroy();
        }
    }, [chartData]);
    return (
        <div className="relative h-[400px]">
            <canvas ref={chartRef}></canvas>
        </div>
    );
}

// --- DATA SOURCE ---
// New hierarchical data structure for all application content.
const ScienceFormulas = [
    {
        name: "Density",
        formula: "d = \\frac{m}{V}",
        variables: "d = density (mass per unit volume), m = mass, V = volume"
    },
    {
        name: "Average Speed",
        formula: "v = \\frac{d}{t}",
        variables: "v = average speed, d = distance traveled, t = elapsed time"
    },
    {
        name: "Force",
        formula: "F = ma",
        variables: "F = net force, m = mass, a = acceleration"
    },
    {
        name: "Work",
        formula: "W = F \\times d",
        variables: "W = work, F = applied force, d = displacement in the direction of the force"
    },
    {
        name: "Mean (Average)",
        formula: "\\bar{x} = \\frac{\\text{Total of all data values}}{\\text{How many values there are}}",
        variables: "\\bar{x} = mean (average) of the data set: add all values together and divide by how many values there are"
    },
    {
        name: "Range",
        formula: "\\text{Range} = \\text{Maximum value} - \\text{Minimum value}",
        variables: "Describes the spread between the largest and smallest values in a data set."
    }
];

const SCI_NUMERACY_QUESTIONS = [
    {
        questionNumber: 1,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>A botanist measures the height (in cm) of five plants: 15, 18, 15, 22, and 20.</p>",
        question: "What is the <strong>mean (average)</strong> height of the plants?",
        answerOptions: [
            { text: "15 cm", rationale: "15 is the mode (most common), not the mean.", isCorrect: false },
            { text: "18 cm", rationale: "Correct. (15+18+15+22+20)=90; 90÷5=18.", isCorrect: true },
            { text: "18.5 cm", rationale: "Close, but not the exact average.", isCorrect: false },
            { text: "22 cm", rationale: "22 is just the tallest plant.", isCorrect: false }
        ]
    },
    {
        questionNumber: 2,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>In pea plants, purple flowers (P) are dominant over white flowers (p). Two heterozygous plants (Pp × Pp) are crossed.</p>",
        question: "What percent of offspring are expected to have <strong>white</strong> flowers?",
        answerOptions: [
            { text: "0%", rationale: "Incorrect. White can appear if the plant gets pp.", isCorrect: false },
            { text: "25%", rationale: "Correct. The Punnett square gives PP, Pp, Pp, pp → 1 of 4 is pp (white).", isCorrect: true },
            { text: "50%", rationale: "50% would be too high; only 1 of 4 is pp.", isCorrect: false },
            { text: "75%", rationale: "75% would be purple, not white.", isCorrect: false }
        ]
    },
    {
        questionNumber: 3,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>A rock has a mass of 60 g and displaces 20 cm³ of water.</p>",
        question: "What is the rock’s density?",
        answerOptions: [
            { text: "1 g/cm³", rationale: "That would be 20 g ÷ 20 cm³.", isCorrect: false },
            { text: "3 g/cm³", rationale: "Correct. Density = mass ÷ volume = 60 ÷ 20 = 3 g/cm³.", isCorrect: true },
            { text: "20 g/cm³", rationale: "That’s just the volume, not density.", isCorrect: false },
            { text: "40 g/cm³", rationale: "Not based on 60 ÷ 20.", isCorrect: false }
        ]
    },
    {
        questionNumber: 4,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>A car travels 150 km in 3 hours at a constant speed.</p>",
        question: "What is the car’s average speed?",
        answerOptions: [
            { text: "50 km/h", rationale: "Correct. 150 km ÷ 3 h = 50 km/h.", isCorrect: true },
            { text: "30 km/h", rationale: "Too low. That would be 90 km over 3 h.", isCorrect: false },
            { text: "100 km/h", rationale: "Too high. That would be 300 km in 3 h.", isCorrect: false },
            { text: "450 km/h", rationale: "Impossible for the data given.", isCorrect: false }
        ]
    },
    {
        questionNumber: 5,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>A student pushes a box with a force of 50 N across the floor for 4 m.</p>",
        question: "How much work was done on the box?",
        answerOptions: [
            { text: "12.5 J", rationale: "This divides instead of multiplying.", isCorrect: false },
            { text: "46 N", rationale: "Newtons measure force, not work (energy).", isCorrect: false },
            { text: "200 J", rationale: "Correct. Work W = F × d = 50 N × 4 m = 200 J.", isCorrect: true },
            { text: "200 N", rationale: "Units are wrong — work is in joules.", isCorrect: false }
        ]
    },
    {
        questionNumber: 6,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>A 2 kg cart accelerates at 3 m/s².</p>",
        question: "What net force is acting on the cart?",
        answerOptions: [
            { text: "0.67 N", rationale: "That divides instead of multiplies.", isCorrect: false },
            { text: "1.5 N", rationale: "Still dividing, not multiplying.", isCorrect: false },
            { text: "5 N", rationale: "Close, but 2 × 3 is 6, not 5.", isCorrect: false },
            { text: "6 N", rationale: "Correct. F = m × a = 2 kg × 3 m/s² = 6 N.", isCorrect: true }
        ]
    },
    {
        questionNumber: 7,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: `<p>A student heats four samples of the same liquid:</p>
          <table class="min-w-full text-sm text-left">
            <thead><tr><th>Trial</th><th>Start Temp (°C)</th><th>End Temp (°C)</th></tr></thead>
            <tbody>
              <tr><td>A</td><td>22</td><td>30</td></tr>
              <tr><td>B</td><td>22</td><td>29</td></tr>
              <tr><td>C</td><td>22</td><td>35</td></tr>
              <tr><td>D</td><td>22</td><td>28</td></tr>
            </tbody>
          </table>`,
        question: "Which trial had the greatest temperature increase?",
        answerOptions: [
            { text: "Trial A", rationale: "Increase was 30−22 = 8°C.", isCorrect: false },
            { text: "Trial B", rationale: "Increase was 7°C.", isCorrect: false },
            { text: "Trial C", rationale: "Correct. Increase was 35−22 = 13°C, the largest.", isCorrect: true },
            { text: "Trial D", rationale: "Increase was 6°C.", isCorrect: false }
        ]
    },
    {
        questionNumber: 8,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>Colony counts of bacteria on 5 plates were 12, 15, 15, 18, and 30 (in thousands).</p>",
        question: "What is the <strong>range</strong> of the data?",
        answerOptions: [
            { text: "12", rationale: "12 is just the smallest value.", isCorrect: false },
            { text: "18", rationale: "18 is not max − min.", isCorrect: false },
            { text: "30", rationale: "30 is just the largest value.", isCorrect: false },
            { text: "18 (thousand)", rationale: "Correct. Range = 30 − 12 = 18.", isCorrect: true }
        ]
    },
    {
        questionNumber: 9,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>In the first 20 minutes of a run, a runner goes 10 km. After 10 minutes the runner had 5 km. Assume constant speed.</p>",
        question: "What is the runner’s speed during this period (in km/min)?",
        answerOptions: [
            { text: "0.25 km/min", rationale: "Too low (that would be 5 km in 20 min).", isCorrect: false },
            { text: "0.5 km/min", rationale: "Correct. 10 km ÷ 20 min = 0.5 km/min.", isCorrect: true },
            { text: "2 km/min", rationale: "Too high. That would be 40 km in 20 min.", isCorrect: false },
            { text: "20 km/min", rationale: "Way too high for a human runner.", isCorrect: false }
        ]
    },
    {
        questionNumber: 10,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>A sealed container (nothing can enter or escape) has a total mass of 120 g before a chemical reaction and 120 g after.</p>",
        question: "Which statement is best supported by this data?",
        answerOptions: [
            { text: "Mass is created during the reaction.", rationale: "No; mass didn't increase.", isCorrect: false },
            { text: "Mass is destroyed during the reaction.", rationale: "No; mass didn't decrease.", isCorrect: false },
            { text: "Mass is conserved during the reaction.", rationale: "Correct. The total stayed 120 g.", isCorrect: true },
            { text: "The container leaked gas.", rationale: "If it leaked, mass would drop.", isCorrect: false }
        ]
    },
    {
        questionNumber: 11,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>A pump moves 12 liters of water in 4 minutes at a constant rate.</p>",
        question: "How many liters will it move in 10 minutes?",
        answerOptions: [
            { text: "20 L", rationale: "That assumes 2 L/min. Actual rate is 3 L/min.", isCorrect: false },
            { text: "24 L", rationale: "That’s 12 L in 4 min scaled to 8 min, not 10.", isCorrect: false },
            { text: "30 L", rationale: "Correct. 12 ÷ 4 = 3 L/min. 3 × 10 = 30 L.", isCorrect: true },
            { text: "120 L", rationale: "Way too high for this rate.", isCorrect: false }
        ]
    },
    {
        questionNumber: 12,
        qaProfileKey: "numeracy",
        type: "knowledge",
        passage: "<p>A household budget is $3,000 per month. Housing is 35% of the budget.</p>",
        question: "How much money goes to housing each month?",
        answerOptions: [
            { text: "$700", rationale: "That’s 700 / 3000 ≈ 23%. Too low.", isCorrect: false },
            { text: "$900", rationale: "That’s 30% of $3,000.", isCorrect: false },
            { text: "$1,050", rationale: "Correct. 35% of $3,000 = 0.35 × 3000 = $1,050.", isCorrect: true },
            { text: "$1,500", rationale: "That would be 50%, not 35%.", isCorrect: false }
        ]
    }
];

const AppData = {
    "Science": {
        icon: "BeakerIcon",
        categories: {
            "Life Science": {
                description: "Explore the fundamental principles of living organisms, from the cellular level to entire ecosystems.",
                topics: [
                    {
                        id: "sci_life_science_basics",
                        title: "Life Science Basics",
                        description: "Cell structure, function, photosynthesis, and cellular respiration.",
                        questions: [
                            { questionNumber: 1, type: 'text', passage: "All living organisms are composed of cells, the basic units of life. The cell theory states that all living things are made of cells, cells are the basic unit of structure and function, and all cells come from pre-existing cells. Within a cell, organelles perform specific functions. The nucleus contains the cell's genetic material (DNA), and mitochondria are responsible for generating energy through cellular respiration.", question: "According to the passage, what is the primary function of mitochondria?", answerOptions: [ { text: "Storing the cell's genetic material.", rationale: "This is the function of the nucleus.", isCorrect: false }, { text: "Controlling all cell activities.", rationale: "This is a broader function of the nucleus.", isCorrect: false }, { text: "Generating energy for the cell.", rationale: "Correct. The passage states mitochondria generate energy.", isCorrect: true }, { text: "Creating new cells.", rationale: "New cells come from pre-existing cells, a process of the entire cell.", isCorrect: false } ] },
                            { questionNumber: 2, type: 'knowledge', question: "Which of the following is the correct order of organization in living things, from simplest to most complex?", answerOptions: [ { text: "Organism, Organ System, Organ, Tissue, Cell", rationale: "This order is reversed.", isCorrect: false }, { text: "Cell, Tissue, Organ, Organ System, Organism", rationale: "Correct. Cells form tissues, tissues form organs, organs form organ systems, and organ systems make up an organism.", isCorrect: true }, { text: "Tissue, Cell, Organ, Organism, Organ System", rationale: "This order is incorrect.", isCorrect: false }, { text: "Cell, Organ, Tissue, Organism, Organ System", rationale: "This order is incorrect.", isCorrect: false } ] },
                            { questionNumber: 3, type: 'text', passage: "Photosynthesis is the process used by plants, algae, and some bacteria to convert light energy into chemical energy. The process uses sunlight, water, and carbon dioxide to create glucose (sugar for energy) and oxygen. This is why plants are called producers; they create their own food.", question: "What are the three essential inputs for photosynthesis?", answerOptions: [ { text: "Sunlight, oxygen, and water.", rationale: "Oxygen is an output, not an input.", isCorrect: false }, { text: "Sunlight, carbon dioxide, and glucose.", rationale: "Glucose is an output.", isCorrect: false }, { text: "Sunlight, water, and carbon dioxide.", rationale: "Correct. The passage lists these three as the necessary ingredients.", isCorrect: true }, { text: "Water, oxygen, and glucose.", rationale: "Oxygen and glucose are outputs.", isCorrect: false } ] },
                            { questionNumber: 4, type: 'knowledge', question: "Which human body system is responsible for transporting oxygen, nutrients, and hormones to cells and removing waste products?", answerOptions: [ { text: "Respiratory System", rationale: "The respiratory system is responsible for gas exchange (breathing).", isCorrect: false }, { text: "Nervous System", rationale: "The nervous system is the body's command center, using electrical signals.", isCorrect: false }, { text: "Digestive System", rationale: "The digestive system breaks down food.", isCorrect: false }, { text: "Circulatory System", rationale: "Correct. The circulatory system, including the heart, blood, and blood vessels, is the body's transport network.", isCorrect: true } ] },
                            { questionNumber: 5, type: 'text', passage: "DNA (Deoxyribonucleic acid) is a molecule that carries the genetic instructions for the development, functioning, growth, and reproduction of all known organisms. A gene is a specific sequence of DNA that codes for a functional product, either RNA or a protein.", question: "What is the relationship between DNA and genes?", answerOptions: [ { text: "A gene is a segment of DNA that codes for a specific product.", rationale: "Correct. The passage defines a gene as a specific sequence of DNA.", isCorrect: true }, { text: "DNA is a type of gene.", rationale: "This is reversed. A gene is a type of DNA sequence.", isCorrect: false }, { text: "DNA and genes are completely unrelated.", rationale: "They are directly related.", isCorrect: false }, { text: "A gene is larger than a DNA molecule.", rationale: "A gene is a part of a larger DNA molecule.", isCorrect: false } ] },
                            { questionNumber: 6, type: 'knowledge', question: "In genetics, what does a Punnett square predict?", answerOptions: [ { text: "The exact genetic makeup of an offspring.", rationale: "It predicts probability, not the exact outcome.", isCorrect: false }, { text: "The probability of an offspring inheriting a particular trait.", rationale: "Correct. A Punnett square is a tool used to predict the possible genetic outcomes and their probabilities.", isCorrect: true }, { text: "The number of chromosomes in a cell.", rationale: "This is determined by a karyotype, not a Punnett square.", isCorrect: false }, { text: "The rate of cellular respiration.", rationale: "This is unrelated to Punnett squares.", isCorrect: false } ] },
                            { questionNumber: 7, type: 'knowledge', question: "Which part of the plant cell is primarily responsible for photosynthesis?", answerOptions: [ { text: "Nucleus", rationale: "The nucleus contains the cell's genetic material.", isCorrect: false }, { text: "Mitochondrion", rationale: "Mitochondria are responsible for cellular respiration.", isCorrect: false }, { text: "Chloroplast", rationale: "Correct. Chloroplasts contain chlorophyll, the pigment that captures light energy.", isCorrect: true }, { text: "Cell Wall", rationale: "The cell wall provides structural support.", isCorrect: false } ] },
                            { questionNumber: 8, type: 'text', passage: "Homeostasis is the state of steady internal, physical, and chemical conditions maintained by living systems. This is the condition of optimal functioning for the organism and includes many variables, such as body temperature and fluid balance, being kept within certain pre-set limits.", question: "Shivering when you are cold is an example of the body trying to maintain homeostasis by:", answerOptions: [ { text: "generating heat through muscle contractions.", rationale: "Correct. Shivering is an involuntary muscle contraction that generates heat to raise body temperature.", isCorrect: true }, { text: "reducing the body's core temperature.", rationale: "It is an attempt to increase, not reduce, temperature.", isCorrect: false }, { text: "saving energy.", rationale: "Shivering consumes energy.", isCorrect: false }, { text: "increasing fluid balance.", rationale: "This is unrelated to the primary purpose of shivering.", isCorrect: false } ] },
                            { questionNumber: 9, type: 'knowledge', question: "In the human respiratory system, what is the primary function of the alveoli?", answerOptions: [ { text: "To filter dust and particles from the air.", rationale: "This is mainly done by hairs and mucus in the nasal passages and trachea.", isCorrect: false }, { text: "To produce sound for speech.", rationale: "This is the function of the larynx (voice box).", isCorrect: false }, { text: "To exchange oxygen and carbon dioxide with the blood.", rationale: "Correct. The alveoli are tiny air sacs where gas exchange occurs.", isCorrect: true }, { text: "To pump air into and out of the lungs.", rationale: "This is the function of the diaphragm muscle.", isCorrect: false } ] },
                            { questionNumber: 10, type: 'knowledge', question: "An allele is a variant form of a gene. If an individual has two identical alleles for a particular gene, they are:", answerOptions: [ { text: "Heterozygous for that gene.", rationale: "Heterozygous means having two different alleles.", isCorrect: false }, { text: "Homozygous for that gene.", rationale: "Correct. 'Homo-' means same.", isCorrect: true }, { text: "Recessive for that gene.", rationale: "Recessive describes an allele that is masked by a dominant one.", isCorrect: false }, { text: "Dominant for that gene.", rationale: "Dominant describes an allele that masks a recessive one.", isCorrect: false } ] },
                            { questionNumber: 11, type: 'text', passage: "The nervous system is composed of two main parts: the Central Nervous System (CNS), which consists of the brain and spinal cord, and the Peripheral Nervous System (PNS), which consists of the nerves that branch out from the CNS to the rest of the body.", question: "A nerve in your arm that sends a signal to your brain is part of which system?", answerOptions: [ { text: "The Central Nervous System (CNS)", rationale: "The CNS is the brain and spinal cord.", isCorrect: false }, { text: "The Peripheral Nervous System (PNS)", rationale: "Correct. Nerves outside the brain and spinal cord are part of the PNS.", isCorrect: true }, { text: "Both the CNS and PNS", rationale: "It is part of the PNS.", isCorrect: false }, { text: "The Circulatory System", rationale: "This is a different body system.", isCorrect: false } ] },
                            { questionNumber: 12, type: 'knowledge', question: "What is the primary function of the digestive system?", answerOptions: [ { text: "To break down food and absorb nutrients.", rationale: "Correct. The digestive system processes food for energy and nutrients.", isCorrect: true }, { text: "To eliminate waste from the blood.", rationale: "This is primarily the function of the urinary system.", isCorrect: false }, { text: "To send signals throughout the body.", rationale: "This is the function of the nervous system.", isCorrect: false }, { text: "To produce hormones.", rationale: "This is the function of the endocrine system.", isCorrect: false } ] },
                            { questionNumber: 13, type: 'text', passage: "Cellular respiration is a set of metabolic reactions and processes that take place in the cells of organisms to convert chemical energy from nutrients into adenosine triphosphate (ATP), and then release waste products. It is the process of 'burning' glucose for energy.", question: "Cellular respiration occurs in which organelle?", answerOptions: [ { text: "Chloroplast", rationale: "Chloroplasts are for photosynthesis.", isCorrect: false }, { text: "Nucleus", rationale: "The nucleus contains genetic material.", isCorrect: false }, { text: "Mitochondria", rationale: "Correct. Mitochondria are known as the 'powerhouses' of the cell because this is where cellular respiration happens.", isCorrect: true }, { text: "Ribosome", rationale: "Ribosomes are responsible for protein synthesis.", isCorrect: false } ] },
                            { questionNumber: 14, type: 'knowledge', question: "Which of the following is an example of an inherited trait in humans?", answerOptions: [ { text: "Eye color", rationale: "Correct. Eye color is determined by genes passed from parents to offspring.", isCorrect: true }, { text: "A scar from an injury", rationale: "This is an acquired characteristic, not inherited.", isCorrect: false }, { text: "The ability to speak English", rationale: "This is a learned behavior.", isCorrect: false }, { text: "A tattoo", rationale: "This is an acquired body modification.", isCorrect: false } ] },
                            { questionNumber: 15, type: 'knowledge', question: "What is the difference between a dominant and a recessive allele?", answerOptions: [ { text: "A dominant allele is always better than a recessive allele.", rationale: "Dominance does not imply superiority.", isCorrect: false }, { text: "A dominant allele will mask the expression of a recessive allele.", rationale: "Correct. If a dominant allele is present, its trait will be expressed.", isCorrect: true }, { text: "Recessive alleles are more common in the population.", rationale: "Dominance is not related to how common an allele is.", isCorrect: false }, { text: "Dominant alleles are only found in homozygous individuals.", rationale: "Dominant alleles are expressed in both homozygous and heterozygous individuals.", isCorrect: false } ] }
                        ]
                    },
                    {
                        id: "sci_ecosystems_environment",
                        title: "Ecosystems & Environment",
                        description: "Ecology, food webs, and human impact on the environment.",
                        questions: [
                            { questionNumber: 1, type: 'text', passage: "An ecosystem consists of all the living organisms (biotic factors) in a particular area, along with all the non-living (abiotic) components of the environment, such as sunlight, soil, water, and temperature. These components are linked together through nutrient cycles and energy flows.", question: "Which of the following is an example of an abiotic factor in an ecosystem?", answerOptions: [ { text: "A tree", rationale: "A tree is a living organism (biotic).", isCorrect: false }, { text: "A fungus", rationale: "A fungus is a living organism (biotic).", isCorrect: false }, { text: "The amount of annual rainfall", rationale: "Correct. Rainfall is a non-living component of the environment.", isCorrect: true }, { text: "An insect", rationale: "An insect is a living organism (biotic).", isCorrect: false } ] },
                            { questionNumber: 2, type: 'knowledge', question: "In a food web, an organism that produces its own food, usually through photosynthesis, is called a:", answerOptions: [ { text: "Consumer", rationale: "Consumers eat other organisms.", isCorrect: false }, { text: "Producer", rationale: "Correct. Producers, like plants, form the base of the food web.", isCorrect: true }, { text: "Decomposer", rationale: "Decomposers break down dead organic matter.", isCorrect: false }, { text: "Scavenger", rationale: "Scavengers are a type of consumer.", isCorrect: false } ] },
                            { questionNumber: 3, type: 'image', imageUrl: "Images/ged-scince-fig-12.png", question: "In this food web, which organism is a primary consumer?", answerOptions: [ { text: "The grass", rationale: "The grass is a producer.", isCorrect: false }, { text: "The rabbit", rationale: "Correct. The rabbit eats the producer (grass), making it a primary consumer.", isCorrect:true }, { text: "The hawk", rationale: "The hawk eats other consumers, making it a secondary or tertiary consumer.", isCorrect: false }, { text: "The fungi", rationale: "The fungi are decomposers.", isCorrect: false } ] },
                            { questionNumber: 4, type: 'text', passage: "The energy pyramid illustrates the flow of energy from one trophic (feeding) level to the next in an ecosystem. A large amount of energy is lost at each level, usually as heat. Typically, only about 10% of the energy from one level is transferred to the level above it.", question: "If the producers in an ecosystem contain 10,000 units of energy, approximately how much energy would be available to the secondary consumers?", answerOptions: [ { text: "10,000 units", rationale: "This is the energy at the producer level.", isCorrect: false }, { text: "1,000 units", rationale: "This is the energy available to the primary consumers (10% of 10,000).", isCorrect: false }, { text: "100 units", rationale: "Correct. Secondary consumers are two levels up. 10% of 10,000 is 1,000 (primary consumers), and 10% of 1,000 is 100.", isCorrect: true }, { text: "10 units", rationale: "This would be the energy available to tertiary consumers.", isCorrect: false } ] },
                            { questionNumber: 5, type: 'knowledge', question: "The process by which water evaporates from oceans, condenses into clouds, falls as precipitation, and returns to the ocean is known as:", answerOptions: [ { text: "The carbon cycle", rationale: "The carbon cycle describes the movement of carbon.", isCorrect: false }, { text: "The nitrogen cycle", rationale: "The nitrogen cycle describes the movement of nitrogen.", isCorrect: false }, { text: "The water cycle", rationale: "Correct. This describes the continuous movement of water on, above, and below the surface of the Earth.", isCorrect: true }, { text: "Photosynthesis", rationale: "Photosynthesis is a process used by plants to create energy.", isCorrect: false } ] },
                            { questionNumber: 6, type: 'text', passage: "Human activities, such as the burning of fossil fuels (coal, oil, and natural gas), release large amounts of carbon dioxide into the atmosphere. Carbon dioxide is a greenhouse gas, which traps heat and contributes to the warming of the planet, a phenomenon known as global warming or climate change.", question: "According to the passage, what is the primary cause of the recent increase in atmospheric carbon dioxide?", answerOptions: [ { text: "Volcanic eruptions", rationale: "While volcanoes release CO2, human activities are the primary cause of the recent increase.", isCorrect: false }, { text: "Deforestation", rationale: "Deforestation contributes, but the burning of fossil fuels is the primary cause mentioned.", isCorrect: false }, { text: "The burning of fossil fuels", rationale: "Correct. The passage explicitly states this as the main source.", isCorrect: true }, { text: "The process of photosynthesis", rationale: "Photosynthesis removes carbon dioxide from the atmosphere.", isCorrect: false } ] },
                            { questionNumber: 7, 'type': 'knowledge', question: "A symbiotic relationship where one organism benefits and the other is neither harmed nor helped is called:", answerOptions: [ { 'text': 'Mutualism', 'rationale': 'In mutualism, both organisms benefit.', 'isCorrect': false }, { 'text': 'Parasitism', 'rationale': 'In parasitism, one organism benefits and the other is harmed.', 'isCorrect': false }, { 'text': 'Commensalism', 'rationale': 'Correct. A classic example is a barnacle on a whale.', 'isCorrect': true }, { 'text': 'Competition', 'rationale': 'Competition is a relationship where two or more organisms vie for the same limited resources.', 'isCorrect': false } ] },
                            { questionNumber: 8, type: 'text', passage: "Biodiversity refers to the variety of life in a particular habitat or ecosystem. High biodiversity is often a sign of a healthy ecosystem. It increases ecosystem productivity and resilience, meaning the ecosystem is better able to withstand and recover from disasters.", question: "What is the primary benefit of high biodiversity in an ecosystem?", answerOptions: [ { text: "It ensures that all organisms are the same size.", rationale: "Biodiversity means variety, not uniformity.", isCorrect: false }, { text: "It increases the ecosystem's stability and resilience.", rationale: "Correct. The passage states that high biodiversity makes an ecosystem more resilient.", isCorrect: true }, { text: "It decreases the total number of organisms.", rationale: "High biodiversity usually correlates with a high number of organisms.", isCorrect: false }, { text: "It simplifies the food web.", rationale: "High biodiversity leads to more complex food webs.", isCorrect: false } ] },
                            { questionNumber: 9, type: 'knowledge', question: "What is the main role of decomposers, such as bacteria and fungi, in an ecosystem?", answerOptions: [ { text: "To produce energy from sunlight.", rationale: "This is the role of producers.", isCorrect: false }, { text: "To consume other organisms for energy.", rationale: "This is the role of consumers.", isCorrect: false }, { text: "To break down dead organic matter and return nutrients to the soil.", rationale: "Correct. Decomposers are essential for recycling nutrients.", isCorrect: true }, { text: "To control the population of primary consumers.", rationale: "This is a role of secondary consumers (predators).", isCorrect: false } ] },
                            { questionNumber: 10, type: 'text', passage: "Natural selection is the process through which populations of living organisms adapt and change. Individuals in a population are naturally variable, meaning that they are all different in some ways. This variation means that some individuals have traits better suited to the environment than others. Individuals with adaptive traits are more likely to survive and reproduce, passing those traits on to their offspring.", question: "Which of the following is a key requirement for natural selection to occur?", answerOptions: [ { text: "All individuals in a population must be identical.", rationale: "Variation is necessary for natural selection to act upon.", isCorrect: false }, { text: "The environment must remain constant over time.", rationale: "Environmental changes are often the driving force of natural selection.", isCorrect: false }, { text: "There must be variation in heritable traits within a population.", rationale: "Correct. Without variation, some individuals would not be better suited than others, and there would be nothing to 'select'.", isCorrect: true }, { text: "Organisms must consciously choose to adapt.", rationale: "Adaptation through natural selection is a passive process, not a conscious choice.", isCorrect: false } ] },
                            { questionNumber: 11, type: 'knowledge', question: "An invasive species is an organism that is not native to a specific location and has a tendency to spread to a degree believed to cause damage to the environment, economy, or human health. Why are invasive species often so successful in new ecosystems?", answerOptions: [ { text: "Because they are usually larger than native species.", rationale: "Size is not the determining factor.", isCorrect: false }, { text: "Because they often lack natural predators in the new environment.", rationale: "Correct. Without predators to control their population, they can multiply rapidly and outcompete native species.", isCorrect: true }, { text: "Because they only eat food that native species do not.", rationale: "They often compete directly with native species for food.", isCorrect: false }, { text: "Because they reproduce more slowly than native species.", rationale: "They often reproduce more quickly.", isCorrect: false } ] },
                            { questionNumber: 12, type: 'knowledge', question: "The gradual process by which ecosystems change and develop over time is called:", answerOptions: [ { text: "Evolution", rationale: "Evolution refers to the change in heritable traits of populations over generations.", isCorrect: false }, { text: "Succession", rationale: "Correct. Ecological succession is the process of change in the species structure of an ecological community over time.", isCorrect: true }, { text: "Homeostasis", rationale: "Homeostasis is the maintenance of a stable internal environment.", isCorrect: false }, { text: "Photosynthesis", rationale: "This is the process of creating energy from sunlight.", isCorrect: false } ] },
                            { questionNumber: 13, type: 'text', passage: "Acid rain is caused by emissions of sulfur dioxide and nitrogen oxide, which react with the water molecules in the atmosphere to produce acids. These emissions primarily come from the burning of fossil fuels in power plants and vehicles. Acid rain can have harmful effects on soil, forests, and aquatic ecosystems.", question: "What is the primary cause of acid rain?", answerOptions: [ { text: "An increase in the pH of rainwater.", rationale: "Acid rain involves a decrease in pH (making it more acidic).", isCorrect: false }, { text: "Pollutants from burning fossil fuels reacting with water in the atmosphere.", rationale: "Correct. The passage identifies sulfur dioxide and nitrogen oxide from fossil fuels as the primary cause.", isCorrect: true }, { text: "The natural carbonation of rainwater.", rationale: "Natural rainwater is slightly acidic, but acid rain is much more so due to pollution.", isCorrect: false }, { text: "Runoff from agricultural fertilizers.", rationale: "Fertilizer runoff causes other problems, like eutrophication, but not acid rain.", isCorrect: false } ] },
                            { questionNumber: 14, type: 'knowledge', question: "A food chain shows a single pathway of energy transfer. Which of the following is a correct and logical food chain?", answerOptions: [ { text: "Hawk -> Snake -> Mouse -> Grass", rationale: "This food chain is backwards.", isCorrect: false }, { text: "Grass -> Mouse -> Snake -> Hawk", rationale: "Correct. This shows the correct flow of energy from producer to primary consumer to secondary consumer to tertiary consumer.", isCorrect: true }, { text: "Mouse -> Grass -> Hawk -> Snake", rationale: "This order is illogical.", isCorrect: false }, { text: "Sun -> Grass -> Hawk -> Mouse", rationale: "This order is illogical.", isCorrect: false } ] },
                            { questionNumber: 15, type: 'knowledge', question: "The concept of a 'carbon footprint' refers to:", answerOptions: [ { text: "The total amount of carbon stored in the soil.", rationale: "This is part of the carbon cycle, but not a carbon footprint.", isCorrect: false }, { text: "The total amount of greenhouse gases generated by our actions.", rationale: "Correct. It is a measure of an individual's or organization's impact on the climate.", isCorrect: true }, { text: "The physical mark left by carbon-based life forms.", rationale: "This is a literal interpretation, not the correct meaning.", isCorrect: false }, { text: "The number of trees planted to offset carbon emissions.", rationale: "This is a way to reduce a carbon footprint, not the footprint itself.", isCorrect: false } ] }
                        ]
                    }
                ]
            },
            "Physical Science": {
                description: "Investigate the principles of chemistry and physics that govern the world around us.",
                topics: [
                    {
                        id: "sci_chem_fundamentals",
                        title: "Chemistry Fundamentals",
                        description: "Properties of matter, atoms, elements, and the periodic table.",
                        questions: [
                            { questionNumber: 1, type: 'text', passage: "All matter is made up of atoms, which are the smallest units of an element that maintain the properties of that element. Atoms are composed of three main subatomic particles: protons, neutrons, and electrons. Protons have a positive charge, neutrons have no charge, and electrons have a negative charge.", question: "Which subatomic particle has a positive charge?", answerOptions: [ { text: "Proton", rationale: "Correct. The passage states that protons have a positive charge.", isCorrect: true }, { text: "Neutron", rationale: "Neutrons have no charge.", isCorrect: false }, { text: "Electron", rationale: "Electrons have a negative charge.", isCorrect: false }, { text: "Atom", rationale: "An atom is the whole unit, not a subatomic particle.", isCorrect: false } ] },
                            { questionNumber: 2, type: 'knowledge', question: "In an atom, which two subatomic particles are found in the nucleus?", answerOptions: [ { text: "Protons and electrons", rationale: "Electrons orbit the nucleus.", isCorrect: false }, { text: "Protons and neutrons", rationale: "Correct. The nucleus at the center of the atom contains the protons and neutrons.", isCorrect: true }, { text: "Neutrons and electrons", rationale: "Electrons orbit the nucleus.", isCorrect: false }, { text: "Only protons", rationale: "The nucleus also contains neutrons (except for the most common isotope of hydrogen).", isCorrect: false } ] },
                            { questionNumber: 3, type: 'text', passage: "The periodic table of elements arranges all known elements in order of increasing atomic number. The atomic number of an element is equal to the number of protons in the nucleus of an atom of that element. This number is unique to each element.", question: "The identity of an element is determined by its number of:", answerOptions: [ { text: "Neutrons", rationale: "The number of neutrons can vary, creating isotopes.", isCorrect: false }, { text: "Electrons", rationale: "The number of electrons can change when an atom forms an ion.", isCorrect: false }, { text: "Protons", rationale: "Correct. The passage states that the atomic number, which is the number of protons, is unique to each element.", isCorrect: true }, { text: "Energy levels", rationale: "The number of energy levels can change.", isCorrect: false } ] },
                            { questionNumber: 4, type: 'image', imageUrl: "Images/licensed-image (5).jpg", question: "This image shows a typical entry on the periodic table for the element Carbon (C). What is the atomic number of Carbon?", answerOptions: [ { text: "12.011", rationale: "This is the atomic mass.", isCorrect: false }, { text: "6", rationale: "Correct. The number at the top is the atomic number.", isCorrect: true }, { text: "C", rationale: "This is the element symbol.", isCorrect: false }, { text: "Carbon", rationale: "This is the element name.", isCorrect: false } ] },
                            { questionNumber: 5, type: 'knowledge', question: "What is the difference between an element and a compound?", answerOptions: [ { text: "An element is a liquid, while a compound is a solid.", rationale: "Elements and compounds can exist in any state of matter.", isCorrect: false }, { text: "An element consists of only one type of atom, while a compound consists of two or more different types of atoms chemically bonded together.", rationale: "Correct. For example, oxygen (O) is an element, while water (H₂O) is a compound.", isCorrect: true }, { text: "Elements are found in nature, while compounds are man-made.", rationale: "Many compounds, like water and carbon dioxide, are found in nature.", isCorrect: false }, { text: "There is no difference.", rationale: "There is a fundamental chemical difference.", isCorrect: false } ] },
                            { questionNumber: 6, type: 'text', passage: "A chemical reaction is a process that leads to the chemical transformation of one set of chemical substances to another. The substances initially involved in a chemical reaction are called reactants, and the substances produced are called products. The law of conservation of mass states that mass is neither created nor destroyed in a chemical reaction.", question: "If 10 grams of reactant A are combined with 5 grams of reactant B in a sealed container and react completely, what will be the total mass of the products?", answerOptions: [ { text: "5 grams", rationale: "This would violate the law of conservation of mass.", isCorrect: false }, { text: "10 grams", rationale: "This would violate the law of conservation of mass.", isCorrect: false }, { text: "15 grams", rationale: "Correct. According to the law of conservation of mass, the total mass of the reactants must equal the total mass of the products.", isCorrect: true }, { text: "It is impossible to tell.", rationale: "The law of conservation of mass allows us to determine the mass.", isCorrect: false } ] },
                            { questionNumber: 7, type: 'knowledge', question: "Which of the following represents a physical change, not a chemical change?", answerOptions: [ { text: "Burning wood", rationale: "Burning is a chemical change (combustion) that creates new substances like ash and smoke.", isCorrect: false }, { text: "Rusting iron", rationale: "Rusting is a chemical change (oxidation) that creates a new substance, iron oxide.", isCorrect: false }, { text: "Boiling water", rationale: "Correct. Boiling water changes its state from liquid to gas (steam), but it is still chemically H₂O. This is a physical change.", isCorrect: true }, { text: "Baking a cake", rationale: "Baking involves chemical reactions that change the ingredients into a new substance.", isCorrect: false } ] },
                            { questionNumber: 8, type: 'text', passage: "The pH scale measures how acidic or basic a substance is. The scale ranges from 0 to 14. A pH of 7 is neutral. A pH less than 7 indicates acidity, while a pH greater than 7 indicates a base (alkalinity).", question: "A substance with a pH of 3 is considered:", answerOptions: [ { text: "Acidic", rationale: "Correct. A pH less than 7 is acidic.", isCorrect: true }, { text: "Basic (alkaline)", rationale: "A pH greater than 7 is basic.", isCorrect: false }, { text: "Neutral", rationale: "A pH of 7 is neutral.", isCorrect: false }, { text: "A solid", rationale: "pH measures acidity, not state of matter.", isCorrect: false } ] },
                            { questionNumber: 9, type: 'knowledge', question: "What is a substance that is dissolved in another substance to form a solution called?", answerOptions: [ { text: "Solvent", rationale: "The solvent is the substance that does the dissolving (e.g., water).", isCorrect: false }, { text: "Solute", rationale: "Correct. The solute is the substance that is dissolved (e.g., salt in saltwater).", isCorrect: true }, { text: "Mixture", rationale: "A mixture is the combination of two or more substances that are not chemically bonded.", isCorrect: false }, { text: "Element", rationale: "An element is a pure substance consisting of only one type of atom.", isCorrect: false } ] },
                            { questionNumber: 10, type: 'knowledge', question: "In the chemical formula for water, H₂O, what does the subscript '2' indicate?", answerOptions: [ { text: "There are two water molecules.", rationale: "A coefficient in front of the formula would indicate the number of molecules.", isCorrect: false }, { text: "There are two oxygen atoms.", rationale: "The '2' is next to the 'H', not the 'O'.", isCorrect: false }, { text: "There are two hydrogen atoms.", rationale: "Correct. The subscript indicates the number of atoms of the element immediately preceding it.", isCorrect: true }, { text: "The molecule has a charge of +2.", rationale: "A superscript would indicate the charge.", isCorrect: false } ] },
                            { questionNumber: 11, type: "knowledge", question: "The columns of the periodic table are called 'groups' or 'families.' Elements in the same group have similar:", answerOptions: [ { text: "Atomic masses", rationale: "Atomic masses increase as you go down a group.", isCorrect: false }, { text: "Chemical properties", rationale: "Correct. Elements in the same group have the same number of valence electrons, which gives them similar chemical behaviors.", isCorrect: true }, { text: "Numbers of protons", rationale: "The number of protons increases down a group.", isCorrect: false }, { text: "Numbers of energy shells", rationale: "The number of energy shells increases as you go down a group.", isCorrect: false } ] },
                            { questionNumber: 12, type: 'text', passage: "A covalent bond is a chemical bond that involves the sharing of electron pairs between atoms. An ionic bond is formed when one atom transfers one or more electrons to another atom, creating ions—charged atoms that are then attracted to each other.", question: "What is the key difference between a covalent bond and an ionic bond?", answerOptions: [ { text: "Covalent bonds involve sharing electrons, while ionic bonds involve transferring electrons.", rationale: "Correct. The passage defines this as the fundamental difference.", isCorrect: true }, { text: "Covalent bonds are stronger than ionic bonds.", rationale: "The relative strength can vary depending on the specific atoms involved.", isCorrect: false }, { text: "Covalent bonds form between metals, and ionic bonds form between nonmetals.", rationale: "Ionic bonds typically form between a metal and a nonmetal, while covalent bonds form between nonmetals.", isCorrect: false }, { text: "Covalent bonds create ions, while ionic bonds do not.", rationale: "This is the opposite of what the passage states.", isCorrect: false } ] },
                            { questionNumber: 13, type: 'knowledge', question: "Which of the following is a property of a solid?", answerOptions: [ { text: "It takes the shape of its container.", rationale: "This is a property of liquids and gases.", isCorrect: false }, { text: "It has a definite shape and a definite volume.", rationale: "Correct. The particles in a solid are tightly packed and vibrate in fixed positions.", isCorrect: true }, { text: "It is easily compressible.", rationale: "This is a property of gases.", isCorrect: false }, { text: "It has no definite shape or volume.", rationale: "This is a property of gases.", isCorrect: false } ] },
                            { questionNumber: 14, type: 'knowledge', question: "A substance that speeds up a chemical reaction without being consumed in the reaction is called a(n):", answerOptions: [ { text: "Reactant", rationale: "A reactant is consumed in the reaction.", isCorrect: false }, { text: "Product", rationale: "A product is formed by the reaction.", isCorrect: false }, { text: "Catalyst", rationale: "Correct. Catalysts lower the activation energy of a reaction, making it happen faster.", isCorrect: true }, { text: "Inhibitor", rationale: "An inhibitor slows down a chemical reaction.", isCorrect: false } ] },
                            { questionNumber: 15, type: 'text', passage: "Isotopes are variants of a particular chemical element which differ in neutron number, and consequently in mass number. All isotopes of a given element have the same number of protons in each atom.", question: "Carbon-12 and Carbon-14 are isotopes of carbon. What is different between an atom of Carbon-12 and an atom of Carbon-14?", answerOptions: [ { text: "The number of protons.", rationale: "They are both carbon, so they must have the same number of protons (6).", isCorrect: false }, { text: "The number of electrons.", rationale: "In a neutral atom, the number of electrons equals the number of protons.", isCorrect: false }, { text: "The number of neutrons.", rationale: "Correct. Carbon-14 has two more neutrons than Carbon-12, which accounts for the difference in their mass numbers.", isCorrect: true }, { text: "Their chemical symbol.", rationale: "They both have the chemical symbol C.", isCorrect: false } ] }
                        ]
                    },
                    {
                        id: "sci_physics_motion",
                        title: "Physics in Motion",
                        description: "Newton's laws of motion, energy transformations, and waves.",
                        questions: [
                            { questionNumber: 1, type: 'text', passage: "Newton's First Law of Motion, often called the law of inertia, states that an object at rest will stay at rest, and an object in motion will stay in motion with the same speed and in the same direction unless acted upon by an unbalanced force.", question: "A book is sitting on a table. According to Newton's First Law, it will not move unless:", answerOptions: [ { text: "it runs out of energy.", rationale: "An object at rest has no kinetic energy to run out of.", isCorrect: false }, { text: "an unbalanced force acts on it.", rationale: "Correct. A force, like a push or a pull, is required to change its state of rest.", isCorrect: true }, { text: "gravity stops acting on it.", rationale: "Gravity is a force constantly acting on the book.", isCorrect: false }, { text: "its inertia is used up.", rationale: "Inertia is a property of mass, not something that can be used up.", isCorrect: false } ] },
                            { questionNumber: 2, type: 'text', passage: "Newton's Second Law of Motion states that the acceleration of an object is directly proportional to the net force acting on it and inversely proportional to its mass. This is often written as the formula F = ma (Force = mass × acceleration).", question: "If you push two objects with the same amount of force, which one will accelerate more?", answerOptions: [ { text: "The object with the larger mass.", rationale: "According to F=ma, if F is constant, a larger mass (m) results in smaller acceleration (a).", isCorrect: false }, { text: "The object with the smaller mass.", rationale: "Correct. If F is constant, a smaller mass (m) will experience a larger acceleration (a).", isCorrect: true }, { text: "They will both accelerate at the same rate.", rationale: "Acceleration depends on mass.", isCorrect: false }, { text: "Neither will accelerate.", rationale: "If a net force is applied, they will accelerate.", isCorrect: false } ] },
                            { questionNumber: 3, type: 'knowledge', question: "Newton's Third Law of Motion states that for every action, there is an equal and opposite reaction. Which of the following is the best example of this law?", answerOptions: [ { text: "A rocket moving upwards by pushing exhaust gases downwards.", rationale: "Correct. The action is the rocket pushing the gas down; the reaction is the gas pushing the rocket up.", isCorrect: true }, { text: "A car slowing down when the brakes are applied.", rationale: "This is an example of the First and Second Laws (a force causing deceleration).", isCorrect: false }, { text: "A ball rolling to a stop due to friction.", rationale: "This is an example of the First Law (an unbalanced force, friction, changing the object's motion).", isCorrect: false }, { text: "A person sitting on a chair.", rationale: "While action-reaction forces are present (person pushes on chair, chair pushes on person), the rocket is a more dynamic example of the law in action.", isCorrect: false } ] },
                            { questionNumber: 4, type: 'text', passage: "Energy can be classified into two main types: potential and kinetic. Potential energy is stored energy, often due to an object's position or state. Kinetic energy is the energy of motion.", question: "A roller coaster car poised at the very top of a tall hill has its maximum:", answerOptions: [ { text: "Kinetic energy", rationale: "Kinetic energy is the energy of motion. At the top of the hill, the car is momentarily at rest, so its kinetic energy is at a minimum.", isCorrect: false }, { text: "Potential energy", rationale: "Correct. Its height gives it the maximum amount of stored gravitational potential energy, which will be converted to kinetic energy as it rolls down.", isCorrect: true }, { text: "Frictional energy", rationale: "Friction is a force that converts kinetic energy into heat, not a primary energy type in this context.", isCorrect: false }, { text: "Both kinetic and potential energy are at a minimum.", rationale: "Potential energy is at its maximum.", isCorrect: false } ] },
                            { questionNumber: 5, type: 'knowledge', question: "The law of conservation of energy states that:", answerOptions: [ { text: "Energy can be created but not destroyed.", rationale: "Energy cannot be created.", isCorrect: false }, { text: "Energy cannot be created or destroyed, only transformed from one form to another.", rationale: "Correct. This is the fundamental principle of energy conservation.", isCorrect: true }, { text: "Kinetic energy is always greater than potential energy.", rationale: "The balance between kinetic and potential energy can vary.", isCorrect: false }, { text: "Energy is lost as heat in every transformation.", rationale: "While some energy is often lost as heat, the total amount of energy is conserved.", isCorrect: false } ] },
                            { questionNumber: 6, type: 'text', passage: "A wave is a disturbance that transfers energy from one place to another. In a transverse wave, the particles of the medium move perpendicular to the direction of energy transfer. In a longitudinal wave, the particles move parallel to the direction of energy transfer.", question: "A sound wave, which consists of compressions and rarefactions of air particles, is an example of a:", answerOptions: [ { text: "Transverse wave", rationale: "Light is an example of a transverse wave.", isCorrect: false }, { text: "Longitudinal wave", rationale: "Correct. In a sound wave, the air particles vibrate back and forth in the same direction that the sound is traveling.", isCorrect: true }, { text: "Stationary wave", rationale: "A stationary wave does not transfer energy from one place to another.", isCorrect: false }, { text: "Surface wave", rationale: "A surface wave occurs at the interface between two media.", isCorrect: false } ] },
                            { questionNumber: 7, type: 'knowledge', question: "What is the term for the number of complete wave cycles that pass a point in a given amount of time?", answerOptions: [ { text: "Wavelength", rationale: "Wavelength is the distance between two corresponding parts of a wave.", isCorrect: false }, { text: "Amplitude", rationale: "Amplitude is the maximum displacement or distance moved by a point on a vibrating body or wave measured from its equilibrium position.", isCorrect: false }, { text: "Frequency", rationale: "Correct. Frequency is typically measured in Hertz (Hz), which is cycles per second.", isCorrect: true }, { text: "Speed", rationale: "Speed is the distance the wave travels per unit of time.", isCorrect: false } ] },
                            { "questionNumber": 8, "type": "knowledge", "question": "In an electrical circuit, what is the property that opposes the flow of electric current?", "answerOptions": [ { "text": "Voltage", "rationale": "Voltage is the electrical potential difference that drives the current.", "isCorrect": false }, { "text": "Current", "rationale": "Current is the flow of electric charge.", "isCorrect": false }, { "text": "Resistance", "rationale": "Correct. Resistance, measured in ohms, is the opposition to the passage of an electric current.", "isCorrect": true }, { "text": "Power", "rationale": "Power is the rate at which electrical energy is transferred.", "isCorrect": false } ] },
                            { "questionNumber": 9, "type": "text", "passage": "Ohm's Law describes the relationship between voltage (V), current (I), and resistance (R) in an electrical circuit. The formula is V = IR. This means that for a given resistance, the current is directly proportional to the voltage.", "question": "If the voltage in a circuit is increased while the resistance stays the same, what will happen to the current?", "answerOptions": [ { "text": "It will decrease.", "rationale": "According to V=IR, if V increases and R is constant, I must also increase.", "isCorrect": false }, { "text": "It will increase.", "rationale": "Correct. The law states a direct proportionality between voltage and current.", "isCorrect": true }, { "text": "It will stay the same.", "rationale": "The current will change if the voltage changes.", "isCorrect": false }, { "text": "It will reverse direction.", "rationale": "The direction of the current is determined by the polarity of the voltage source.", "isCorrect": false } ] },
                            { "questionNumber": 10, "type": "knowledge", "question": "Which of the following is the best example of a conductor of electricity?", "answerOptions": [ { "text": "Rubber", "rationale": "Rubber is an insulator.", "isCorrect": false }, { "text": "Glass", "rationale": "Glass is an insulator.", "isCorrect": false }, { "text": "Copper", "rationale": "Correct. Metals like copper have free electrons that allow electric current to flow easily.", "isCorrect": true }, { "text": "Wood", "rationale": "Wood is an insulator.", "isCorrect": false } ] },
                            { "questionNumber": 11, "type": "knowledge", "question": "The force of gravity between two objects depends on two factors:", "answerOptions": [ { "text": "Their masses and the distance between them.", "rationale": "Correct. Newton's law of universal gravitation states that the force is proportional to the product of their masses and inversely proportional to the square of the distance between them.", "isCorrect": true }, { "text": "Their speed and their temperature.", "rationale": "These factors do not directly determine the force of gravity.", "isCorrect": false }, { "text": "Their chemical composition and their electrical charge.", "rationale": "These factors are not part of the law of gravitation.", "isCorrect": false }, { "text": "Their volume and their shape.", "rationale": "While related to mass and distance, it is mass itself, not volume or shape, that is the key factor.", "isCorrect": false } ] },
                            { "questionNumber": 12, "type": "text", "passage": "Speed is a scalar quantity that refers to 'how fast an object is moving.' Velocity is a vector quantity that refers to 'the rate at which an object changes its position.' The key difference is that velocity includes direction.", "question": "A car is traveling at a constant 60 miles per hour as it goes around a circular track. Which of the following is true?", "answerOptions": [ { "text": "The car's speed and velocity are both constant.", "rationale": "The speed is constant, but the velocity is not.", "isCorrect": false }, { "text": "The car's speed is constant, but its velocity is changing.", "rationale": "Correct. Even though the speed is constant, the car's direction is constantly changing, which means its velocity is also changing.", "isCorrect": true }, { "text": "The car's speed is changing, but its velocity is constant.", "rationale": "The speed is stated as constant.", "isCorrect": false }, { "text": "The car's speed and velocity are both changing.", "rationale": "The speed is constant.", "isCorrect": false } ] },
                            { "questionNumber": 13, "type": "knowledge", "question": "What type of energy is stored in the bonds of chemical compounds, such as in food or batteries?", "answerOptions": [ { "text": "Kinetic energy", "rationale": "Kinetic energy is the energy of motion.", "isCorrect": false }, { "text": "Thermal energy", "rationale": "Thermal energy is related to the temperature of an object.", "isCorrect": false }, { "text": "Chemical potential energy", "rationale": "Correct. This is the energy stored in the chemical bonds of a substance.", "isCorrect": true }, { "text": "Gravitational potential energy", "rationale": "This is energy stored due to an object's height.", "isCorrect": false } ] },
                            { "questionNumber": 14, "type": "text", "passage": "Magnetism is a force produced by moving electric charges. All magnets have two poles, a north pole and a south pole. Like poles repel each other, while opposite poles attract each other.", "question": "If you bring the north pole of one magnet close to the north pole of another magnet, what will happen?", "answerOptions": [ { "text": "The magnets will attract each other.", "rationale": "Opposite poles attract.", "isCorrect": false }, { "text": "The magnets will repel each other.", "rationale": "Correct. The passage states that like poles repel.", "isCorrect": true }, { "text": "Nothing will happen.", "rationale": "A magnetic force will be exerted.", "isCorrect": false }, { "text": "The magnets will lose their magnetism.", "rationale": "This will not cause them to lose their magnetism.", "isCorrect": false } ] },
                            { "questionNumber": 15, "type": "knowledge", "question": "Which of the following is a unit of force?", "answerOptions": [ { "text": "Meter", "rationale": "A meter is a unit of distance.", "isCorrect": false }, { "text": "Kilogram", "rationale": "A kilogram is a unit of mass.", "isCorrect": false }, { "text": "Second", "rationale": "A second is a unit of time.", "isCorrect": false }, { "text": "Newton", "rationale": "Correct. The Newton (N) is the standard unit of force in the International System of Units (SI).", "isCorrect": true } ] }
                        ]
                    }
                ]
            },
            "Scientific Numeracy": {
                description: "Practice applying mathematical skills to interpret scientific data, charts, and formulas.",
                image: "./images/scientific_numeracy_icon.png",
                topics: [
                    {
                        id: "sci_scientific_numeracy_core",
                        title: "Scientific Numeracy",
                        description: "Core Skills Practice Set",
                        config: {
                            calculator: true,
                            formulaSheet: true,
                            totalTime: 20 * 60
                        },
                        questions: SCI_NUMERACY_QUESTIONS
                    }
                ]
            },
            "Earth & Space Science": {
                description: "Study the systems of planet Earth and its place in the universe.",
                topics: [
                    {
                        id: "sci_earth_space",
                        title: "Earth & Space Systems",
                        description: "Plate tectonics, the rock cycle, and the solar system.",
                        questions: [
                            { questionNumber: 1, type: 'text', passage: "The Earth's lithosphere is divided into several large and small tectonic plates that float on the semi-fluid asthenosphere beneath. The movement of these plates is responsible for major geological events such as earthquakes, volcanic eruptions, and the formation of mountain ranges.", question: "The theory of plate tectonics helps to explain:", answerOptions: [ { text: "The changing of the seasons.", rationale: "The seasons are caused by the tilt of the Earth's axis.", isCorrect: false }, { text: "The occurrence of earthquakes and the formation of mountains.", rationale: "Correct. The passage directly links plate movement to these geological events.", isCorrect: true }, { text: "The phases of the moon.", rationale: "The moon's phases are caused by its orbit around the Earth.", isCorrect: false }, { text: "The water cycle.", rationale: "The water cycle is driven by solar energy.", isCorrect: false } ] },
                            { questionNumber: 2, type: 'knowledge', question: "What type of plate boundary is formed when two tectonic plates collide with each other?", answerOptions: [ { text: "Divergent boundary", rationale: "At a divergent boundary, plates move apart.", isCorrect: false }, { text: "Convergent boundary", rationale: "Correct. 'Converge' means to come together.", isCorrect: true }, { text: "Transform boundary", rationale: "At a transform boundary, plates slide past each other.", isCorrect: false }, { text: "Static boundary", rationale: "There is no such term in plate tectonics.", isCorrect: false } ] },
                            { questionNumber: 3, type: 'text', passage: "The rock cycle is a model that describes the formation, breakdown, and reformation of a rock as a result of sedimentary, igneous, and metamorphic processes. For example, when magma or lava cools and solidifies, it forms igneous rock. When this rock is weathered and eroded, the sediments can be compacted to form sedimentary rock.", question: "According to the passage, how is igneous rock formed?", answerOptions: [ { text: "From the cooling and solidification of magma or lava.", rationale: "Correct. The passage explicitly states this is how igneous rock is formed.", isCorrect: true }, { text: "From the compaction and cementation of sediments.", rationale: "This describes the formation of sedimentary rock.", isCorrect: false }, { text: "From the application of heat and pressure to existing rock.", rationale: "This describes the formation of metamorphic rock.", isCorrect: false }, { text: "From the weathering of metamorphic rock.", rationale: "Weathering breaks down rock; it does not form it.", isCorrect: false } ] },
                            { questionNumber: 4, type: 'knowledge', question: "Which type of rock is formed from the shells, skeletons, and other remains of living organisms?", answerOptions: [ { text: "Igneous rock", rationale: "Igneous rock is formed from cooled magma.", isCorrect: false }, { text: "Metamorphic rock", rationale: "Metamorphic rock is formed by heat and pressure.", isCorrect: false }, { text: "Organic sedimentary rock", rationale: "Correct. Rocks like limestone and coal are formed from the accumulation of organic debris.", isCorrect: true }, { text: "Chemical sedimentary rock", rationale: "Chemical sedimentary rocks form when minerals precipitate from a solution.", isCorrect: false } ] },
                            { questionNumber: 5, type: 'text', passage: "Weathering is the process that breaks down rocks, soils, and minerals as well as wood and artificial materials through contact with the Earth's atmosphere, water, and biological organisms. Erosion is the process by which soil and rock particles are worn away and moved elsewhere by gravity, or by a moving transport agent such as water, wind, or ice.", question: "What is the key difference between weathering and erosion?", answerOptions: [ { text: "Weathering breaks down rocks, while erosion moves the broken pieces.", rationale: "Correct. Weathering is the breaking, and erosion is the taking.", isCorrect: true }, { text: "Weathering only happens to soil, while erosion only happens to rock.", rationale: "Both processes can happen to both soil and rock.", isCorrect: false }, { text: "Weathering is a chemical process, while erosion is a physical process.", rationale: "Both processes can be either physical or chemical.", isCorrect: false }, { text: "There is no difference; they are the same process.", rationale: "They are two distinct but related processes.", isCorrect: false } ] },
                            { questionNumber: 6, type: 'knowledge', question: "Which of the following is the best example of chemical weathering?", answerOptions: [ { text: "A rock breaking apart due to ice freezing and expanding in its cracks.", rationale: "This is an example of physical weathering (ice wedging).", isCorrect: false }, { text: "The smoothing of a rock by a river.", rationale: "This is an example of physical weathering and erosion.", isCorrect: false }, { text: "The dissolving of limestone by acid rain.", rationale: "Correct. This is a chemical reaction that breaks down the rock.", isCorrect: true }, { text: "The roots of a tree growing into and splitting a rock.", rationale: "This is an example of physical weathering (biological).", isCorrect: false } ] },
                            { questionNumber: 7, type: 'knowledge', question: "What is the correct order of the planets in our solar system, starting from the one closest to the Sun?", answerOptions: [ { text: "Earth, Mars, Jupiter, Saturn, Venus, Mercury, Uranus, Neptune", rationale: "This order is incorrect.", isCorrect: false }, { text: "Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune", rationale: "Correct. This is the order of the eight planets.", isCorrect: true }, { text: "Mercury, Venus, Mars, Earth, Jupiter, Saturn, Uranus, Neptune", rationale: "Earth and Mars are in the wrong order.", isCorrect: false }, { text: "Jupiter, Saturn, Uranus, Neptune, Mercury, Venus, Earth, Mars", rationale: "This separates the gas giants and terrestrial planets but is not the correct order from the sun.", isCorrect: false } ] },
                            { questionNumber: 8, type: 'text', passage: "A star is a luminous ball of gas, mostly hydrogen and helium, held together by its own gravity. Nuclear fusion reactions in its core support the star against gravity and produce photons and heat, as well as small amounts of heavier elements. The Sun is the closest star to Earth.", question: "What is the primary process that generates energy in a star like our Sun?", answerOptions: [ { text: "Nuclear fusion", rationale: "Correct. The passage states that nuclear fusion reactions in the core produce the star's energy.", isCorrect: true }, { text: "Chemical combustion (burning)", rationale: "Stars are not 'burning' in the traditional sense; it is a nuclear process.", isCorrect: false }, { text: "Gravitational collapse", rationale: "Gravity holds the star together, but fusion is what generates the outward energy.", isCorrect: false }, { text: "Radioactive decay", rationale: "This process occurs but is not the primary source of a star's energy.", isCorrect: false } ] },
                            { questionNumber: 9, type: 'knowledge', question: "Why do we experience seasons on Earth?", answerOptions: [ { text: "Because the Earth's distance from the Sun changes throughout the year.", rationale: "While the distance does change slightly, this is not the primary cause of the seasons.", isCorrect: false }, { text: "Because of the tilt of the Earth's axis relative to its orbit around the Sun.", rationale: "Correct. The tilt causes different parts of the Earth to receive more direct sunlight at different times of the year.", isCorrect: true }, { text: "Because the Sun's energy output changes throughout the year.", rationale: "The Sun's energy output is relatively constant.", isCorrect: false }, { text: "Because of the changing phases of the Moon.", rationale: "The Moon's phases do not affect the seasons.", isCorrect: false } ] },
                            { questionNumber: 10, type: 'knowledge', question: "What causes the phases of the Moon (e.g., new moon, full moon, quarter moon)?", answerOptions: [ { text: "The Earth's shadow falling on the Moon.", rationale: "This describes a lunar eclipse, not the regular phases.", isCorrect: false }, { text: "The changing amount of the sunlit side of the Moon that we can see from Earth as it orbits us.", rationale: "Correct. The phases are a result of our viewing angle of the Moon's illuminated surface.", isCorrect: true }, { "text": "Clouds blocking our view of the Moon.", "rationale": "Clouds can obscure the moon, but they do not cause its phases.", "isCorrect": false }, { "text": "The Moon physically changing its shape.", "rationale": "The Moon is always a sphere; only our view of it changes.", "isCorrect": false } ] },
                            { "questionNumber": 11, "type": "text", "passage": "Meteorology is the science dealing with the atmosphere and its phenomena, including weather and climate. Weather refers to the short-term conditions of the atmosphere at a particular time and place, including temperature, humidity, precipitation, and wind. Climate, on the other hand, is the long-term average of weather patterns in a region.", "question": "Which of the following is a description of climate, not weather?", "answerOptions": [ { "text": "It is currently raining in Chicago.", "rationale": "This is a short-term condition (weather).", "isCorrect": false }, { "text": "The Sahara Desert receives very little rainfall on average throughout the year.", "rationale": "Correct. This describes a long-term average pattern, which is climate.", "isCorrect": true }, { "text": "Tomorrow's forecast is for a high of 75 degrees.", "rationale": "This is a short-term prediction (weather).", "isCorrect": false }, { "text": "The wind is blowing from the west today.", "rationale": "This is a short-term condition (weather).", "isCorrect": false } ] },
                            { "questionNumber": 12, "type": "knowledge", "question": "What is the layer of gases surrounding the Earth called?", "answerOptions": [ { "text": "The lithosphere", "rationale": "The lithosphere is the rigid outer part of the earth, consisting of the crust and upper mantle.", "isCorrect": false }, { "text": "The hydrosphere", "rationale": "The hydrosphere is all the waters on the earth's surface, such as lakes and seas.", "isCorrect": false }, { "text": "The atmosphere", "rationale": "Correct. The atmosphere is the envelope of gases surrounding the earth.", "isCorrect": true }, { "text": "The asthenosphere", "rationale": "The asthenosphere is the upper layer of the earth's mantle, below the lithosphere.", "isCorrect": false } ] },
                            { "questionNumber": 13, "type": "knowledge", "question": "A solar eclipse occurs when:", "answerOptions": [ { "text": "The Earth passes between the Sun and the Moon.", "rationale": "This describes a lunar eclipse.", "isCorrect": false }, { "text": "The Moon passes between the Sun and the Earth, blocking the Sun's light.", "rationale": "Correct. This alignment casts a shadow on the Earth.", "isCorrect": true }, { "text": "The Sun passes between the Earth and the Moon.", "rationale": "This is not a possible alignment.", "isCorrect": false }, { "text": "Another planet passes between the Earth and the Sun.", "rationale": "This is called a transit, not a solar eclipse.", "isCorrect": false } ] },
                            { "questionNumber": 14, "type": "image", "imageUrl": "Images/ged-scince-fig-7.png", "question": "This diagram illustrates the rock cycle. What process is required to turn a sedimentary rock into a metamorphic rock?", "answerOptions": [ { "text": "Weathering and erosion", "rationale": "This would break the rock down into sediments.", "isCorrect": false }, { "text": "Melting and cooling", "rationale": "This would turn it into igneous rock.", "isCorrect": false }, { "text": "Heat and pressure", "rationale": "Correct. The diagram shows that heat and pressure transform existing rocks into metamorphic rocks.", "isCorrect": true }, { "text": "Compaction and cementation", "rationale": "This is the process that forms sedimentary rocks from sediment.", "isCorrect": false } ] },
                            { "questionNumber": 15, "type": "knowledge", "question": "Which planet is known as the 'Red Planet' due to its reddish, iron-rich soil?", "answerOptions": [ { "text": "Jupiter", "rationale": "Jupiter is a gas giant known for its Great Red Spot, but it is not the 'Red Planet.'", "isCorrect": false }, { "text": "Venus", "rationale": "Venus has a thick, yellowish atmosphere.", "isCorrect": false }, { "text": "Mars", "rationale": "Correct. Mars gets its distinctive red color from iron oxide (rust) on its surface.", "isCorrect": true }, { "text": "Saturn", "rationale": "Saturn is a gas giant known for its rings.", "isCorrect": false } ] }
                        ]
                    }
                ]
            }
        }
    },
"Math": {
    icon: "CalculatorIcon",
    categories: {
        "Quantitative Problem Solving": {
            description: "Solve problems using numbers, data, and statistics.",
            icon: "ChartBarIcon", // New Icon
            topics: [
                {
                    id: "math_quant_basics",
                    title: "Whole Numbers, Fractions & Decimals",
                    description: "Operations with integers, fractions, and decimals.",
                    type: "quiz",
                    questions: []
                },
                {
                    id: "math_quant_ratios_percents",
                    title: "Ratios, Proportions & Percents",
                    description: "Solving real-world problems with ratios and percentages.",
                    type: "quiz",
                    questions: []
                },
                {
                    id: "math_quant_stats_probability",
                    title: "Statistics & Probability",
                    description: "Mean, median, mode, range, and basic probability.",
                    type: "quiz",
                    questions: []
                }
            ]
        },
        "Algebraic Problem Solving": {
            description: "Master expressions, equations, graphing, and functions.",
            icon: "VariableIcon", // New Icon
            topics: [
                {
                    id: "math_alg_expressions",
                    title: "Expressions & Polynomials",
                    description: "Working with variables, exponents, and polynomials.",
                    type: "quiz",
                    questions: []
                },
                {
                    id: "math_alg_equations_inequalities",
                    title: "Equations & Inequalities",
                    description: "Solving linear and quadratic equations and inequalities.",
                    type: "quiz",
                    questions: []
                },
                {
                    id: "math_alg_graphing_functions",
                    title: "Graphing & Functions",
                    description: "Understanding slope, graphing lines, and function notation.",
                    type: "quiz",
                    questions: []
                },
            ]
        },
        "Geometry": {
            description: "Calculate area, perimeter, volume, and apply geometric theorems.",
            icon: "ShapesIcon", // New Icon
            topics: [
                 {
                    id: "math_geom_basics",
                    title: "Geometry Basics",
                    description: "Calculating area, perimeter, volume, and surface area.",
                    type: "quiz",
                    questions: []
                },
            ]
        }
    }
},
    "Social Studies": {
        icon: "GlobeIcon",
        categories: {
            "U.S. History": {
                description: "Explore the events, figures, and ideas that shaped the United States, from its origins to the present day.",
                topics: [
                    {
                        id: "ss_us_hist_foundations",
                        title: "Foundations (1491-1763)",
                        description: "Exploration, Colonial Regions, Mercantilism, French & Indian War.",
                        questions: []
                    },
                    {
                        id: "ss_us_hist_revolution",
                        title: "The American Revolution (1763-1783)",
                        description: "Causes (Stamp Act, Intolerable Acts), Declaration of Independence, Key Battles (Saratoga, Yorktown), Treaty of Paris.",
                        questions: []
                    },
                    {
                        id: "ss_us_hist_new_nation",
                        title: "A New Nation (1783-1824)",
                        description: "Articles of Confederation, Constitutional Convention, Westward Expansion (Louisiana Purchase, Lewis & Clark).",
                        questions: []
                    },
                    {
                        id: "ss_us_hist_divided_nation",
                        title: "A Nation Divided (1824-1877)",
                        description: "Sectionalism, Manifest Destiny, The Civil War, Reconstruction Amendments (13th, 14th, 15th).",
                        questions: []
                    },
                    {
                        id: "ss_us_hist_industrial_america",
                        title: "Industrial America (1877-1914)",
                        description: "Industrialization, Immigration, Urbanization, The Progressive Era.",
                        questions: []
                    },
                    {
                        id: "ss_us_hist_global_conflicts",
                        title: "Global Conflicts (1914-1945)",
                        description: "World War I, The Great Depression, World War II.",
                        questions: []
                    },
                    {
                        id: "ss_us_hist_modern_era",
                        title: "The Modern Era (1945-Present)",
                        description: "The Cold War, The Civil Rights Movement, The Vietnam War, Contemporary America.",
                        questions: []
                    }
                ]
            },
            "Civics & Government": {
                description: "Understand the structure and function of the U.S. government.",
                topics: [
                    {
                        id: "ss_civics_constitution",
                        title: "The Constitution",
                        description: "Preamble, Articles, and the Bill of Rights.",
                        questions: []
                    },
                    {
                        id: "ss_civics_legislative",
                        title: "The Legislative Branch",
                        description: "Congress, How a Bill Becomes a Law, Powers of Congress.",
                        questions: []
                    },
                    {
                        id: "ss_civics_executive",
                        title: "The Executive Branch",
                        description: "The President, The Cabinet, Powers of the President.",
                        questions: []
                    },
                    {
                        id: "ss_civics_judicial",
                        title: "The Judicial Branch",
                        description: "The Supreme Court, Judicial Review, Landmark Cases.",
                        questions: []
                    },
                    {
                        id: "ss_civics_federalism_elections",
                        title: "Federalism & Elections",
                        description: "Federal vs. State Powers, The Electoral College, Political Parties.",
                        questions: []
                    }
                ]
            },
            "Economics": {
                description: "Learn about key economic principles and the U.S. economy.",
                topics: [
                    {
                        id: "ss_econ_foundations",
                        title: "Foundational Concepts",
                        description: "Scarcity, Opportunity Cost, Supply and Demand.",
                        questions: []
                    },
                    {
                        id: "ss_econ_us_economy",
                        title: "The U.S. Economy",
                        description: "Market Systems, Role of Government, Fiscal vs. Monetary Policy.",
                        questions: []
                    }
                ]
            },
            "Geography and the World": {
                description: "Develop skills in interpreting maps, charts, and data.",
                topics: [
                    {
                        id: "ss_geo_map_skills",
                        title: "Map & Data Skills",
                        description: "Reading Maps, Charts, and Graphs (Mean, Median, Mode).",
                        questions: []
                    }
                ]
            }
        }
    },
    "Reasoning Through Language Arts (RLA)": {
        icon: "BookOpenIcon",
        categories: {
            "Reading Comprehension: Informational Texts": {
                description: "Practice analyzing non-fiction texts to find main ideas, evaluate arguments, and interpret graphics.",
                topics: [
                    {
                        id: "rla_info_main_idea",
                        title: "Main Idea & Details",
                        description: "Finding the central idea and supporting evidence in non-fiction.",
                        type: "reading",
                        article: {
                            title: "The Rise of Renewable Energy: Powering a Sustainable Future",
                            genre: "Informational Text (Expository Essay)",
                            text: [
                                "For over a century, human civilization has been powered predominantly by fossil fuels—coal, oil, and natural gas. While these energy sources fueled industrial revolutions and unprecedented economic growth, their use has come at a significant environmental cost, most notably climate change driven by greenhouse gas emissions. In response to this mounting crisis, a global energy transition is underway, shifting focus toward renewable sources. These sources, which include solar, wind, hydropower, and geothermal energy, are naturally replenished and produce minimal to no carbon emissions. This transition is not merely an environmental imperative but also a technological and economic evolution, promising a more sustainable and resilient energy future.",
                                "At the forefront of this revolution is solar power, which harnesses the immense energy of the sun. The most common method involves photovoltaic (PV) cells, which directly convert sunlight into electricity. Another approach, concentrated solar power (CSP), uses mirrors to focus sunlight to heat a fluid, which then creates steam to power a turbine. The primary advantages of solar energy are its abundance and its clean nature. However, its main drawback is intermittency—it only generates power when the sun is shining. This necessitates the development of large-scale energy storage solutions, such as advanced batteries, to provide reliable power around the clock. Furthermore, large solar farms require significant land area, which can raise concerns about land use and ecosystem impact.",
                                "Wind power offers another powerful alternative. Giant turbines, often grouped together in wind farms on land or offshore, capture kinetic energy from the wind and convert it into electricity. Like solar power, wind is a clean energy source, but it shares the same challenge of intermittency, as it is dependent on weather patterns. The visual impact of turbines on landscapes and potential harm to avian wildlife, such as birds and bats, are also significant concerns that require careful planning and mitigation.",
                                "Hydropower and geothermal energy provide more consistent, or baseload, power. Hydropower, generated by the force of flowing water turning turbines in dams, is one of the oldest and most established forms of renewable energy. It is highly reliable and can be dispatched on demand. The main limitation is its environmental impact; large dams can alter river ecosystems, disrupt fish migration, and displace communities. Geothermal energy taps into the Earth's internal heat, using steam from underground reservoirs to generate electricity. It is a highly reliable and clean source of energy with a small physical footprint. Its primary constraint is geographical, as it is only economically viable in regions with accessible geothermal activity, such as volcanic zones or areas with tectonic plate boundaries.",
                                "The complete transition to a renewable energy system presents formidable but surmountable challenges. Beyond the intermittency of solar and wind, modernizing the electrical grid to handle decentralized energy sources is a major hurdle. Smart grids, which use digital technology to manage electricity distribution more efficiently, are essential. Advances in battery technology are critical for storing excess energy for when the sun isn't shining or the wind isn't blowing. Furthermore, supportive government policies, such as carbon pricing and tax incentives for renewable installations, play a crucial role in accelerating this transition. While the path is complex, the collective push toward a renewable-powered world represents a fundamental rethinking of our relationship with energy, aiming for a future that is not only prosperous but also environmentally sustainable for generations to come."
                            ]
                        },
                        questions: [
                            { "question": "Which of the following statements best expresses the main idea of the passage?", "answerOptions": [ { "text": "Hydropower is the most reliable and established form of renewable energy available today.", "isCorrect": false }, { "text": "The global shift to renewable energy is a multifaceted response to the environmental impact of fossil fuels, driven by technology and policy.", "isCorrect": true }, { "text": "The primary challenge of renewable energy is overcoming the high cost of solar panels and wind turbines.", "isCorrect": false }, { "text": "Fossil fuels, despite their environmental drawbacks, remain the only viable option for large-scale energy production.", "isCorrect": false } ] },
                            { "question": "In paragraphs 2 and 3, the word 'intermittency' is used to describe a key challenge for solar and wind power. This term most nearly means:", "answerOptions": [ { "text": "The high cost of installation.", "isCorrect": false }, { "text": "The state of being inconsistent or not continuous.", "isCorrect": true }, { "text": "The potential harm to local wildlife.", "isCorrect": false }, { "text": "The requirement for large areas of land.", "isCorrect": false } ] },
                            { "question": "According to the passage, what is the primary environmental motivation for transitioning to renewable energy?", "answerOptions": [ { "text": "To reduce the visual impact of power plants on landscapes.", "isCorrect": false }, { "text": "To mitigate climate change caused by greenhouse gas emissions from fossil fuels.", "isCorrect": true }, { "text": "To prevent the disruption of fish migration caused by large dams.", "isCorrect": false }, { "text": "To decrease reliance on foreign energy sources.", "isCorrect": false } ] },
                            { "question": "The passage suggests that a key difference between hydropower/geothermal energy and solar/wind energy is:", "answerOptions": [ { "text": "their cost-effectiveness.", "isCorrect": false }, { "text": "their geographical limitations.", "isCorrect": false }, { "text": "their level of reliability and consistency.", "isCorrect": true }, { "text": "their impact on avian wildlife.", "isCorrect": false } ] },
                            { "question": "According to paragraph 5, what is the primary purpose of developing smart grids?", "answerOptions": [ { "text": "To lower the cost of electricity for consumers by reducing waste.", "isCorrect": false }, { "text": "To generate more power from existing solar and wind farms.", "isCorrect": false }, { "text": "To better manage electricity distribution from varied and decentralized sources.", "isCorrect": true }, { "text": "To provide tax incentives for homeowners to install their own solar panels.", "isCorrect": false } ] },
                            { "question": "The passage mentions all of the following as challenges to the widespread adoption of renewable energy EXCEPT:", "answerOptions": [ { "text": "the need for effective energy storage.", "isCorrect": false }, { "text": "the geographical limitations of certain sources.", "isCorrect": false }, { "text": "the lack of any viable renewable technology.", "isCorrect": true }, { "text": "the necessity of modernizing electrical grids.", "isCorrect": false } ] },
                            { "question": "How does the author structure the main body of the text (paragraphs 2-4)?", "answerOptions": [ { "text": "By chronologically detailing the invention of each renewable technology.", "isCorrect": false }, { "text": "By comparing and contrasting the economic cost of each energy source.", "isCorrect": false }, { "text": "By dedicating separate paragraphs to different types of renewable energy, outlining their pros and cons.", "isCorrect": true }, { "text": "By presenting a problem and then immediately offering a single, definitive solution.", "isCorrect": false } ] },
                            { "question": "In paragraph 5, the word 'formidable' most nearly means:", "answerOptions": [ { "text": "Simple and easy.", "isCorrect": false }, { "text": "Inspiring fear or respect through being impressively large or powerful.", "isCorrect": true }, { "text": "Unimportant and trivial.", "isCorrect": false }, { "text": "Related to government policy.", "isCorrect": false } ] },
                            { "question": "Based on the passage, a government wishing to accelerate the transition to renewable energy would most likely:", "answerOptions": [ { "text": "Increase subsidies for fossil fuel companies.", "isCorrect": false }, { "text": "Ban the construction of new dams for hydropower.", "isCorrect": false }, { "text": "Invest in battery technology and offer tax incentives for solar installations.", "isCorrect": true }, { "text": "Focus exclusively on geothermal energy regardless of geographic location.", "isCorrect": false } ] },
                            { "question": "The text identifies photovoltaic cells as a technology used in:", "answerOptions": [ { "text": "Wind power generation.", "isCorrect": false }, { "text": "Geothermal energy extraction.", "isCorrect": false }, { "text": "Hydropower dams.", "isCorrect": false }, { "text": "Solar power generation.", "isCorrect": true } ] },
                            { "question": "What can be inferred about the economic aspect of the energy transition?", "answerOptions": [ { "text": "The transition is primarily an economic burden with no financial benefits.", "isCorrect": false }, { "text": "It involves significant technological and economic evolution.", "isCorrect": true }, { "text": "All renewable technologies are still significantly more expensive than coal or natural gas.", "isCorrect": false }, { "text": "The only economic driver for renewables is government mandates.", "isCorrect": false } ] },
                            { "question": "In paragraph 4, the term 'baseload' power implies that the energy source is:", "answerOptions": [ { "text": "Available only during peak demand hours.", "isCorrect": false }, { "text": "The cheapest available option.", "isCorrect": false }, { "text": "Geographically restricted.", "isCorrect": false }, { "text": "Constantly and reliably available.", "isCorrect": true } ] },
                            { "question": "The author presents the environmental impact of large hydropower dams as:", "answerOptions": [ { "text": "a negligible issue that has been resolved by modern technology.", "isCorrect": false }, { "text": "a significant limitation that can alter ecosystems and displace people.", "isCorrect": true }, { "text": "a positive effect that creates new habitats for aquatic life.", "isCorrect": false }, { "text": "an unproven theory without sufficient evidence.", "isCorrect": false } ] },
                            { "question": "What can be inferred from the passage about the future relationship between different renewable energy sources?", "answerOptions": [ { "text": "One single source, like solar, will eventually replace all others.", "isCorrect": false }, { "text": "A diverse mix of sources will likely be needed to create a stable and resilient energy system.", "isCorrect": true }, { "text": "Fossil fuels will always be required to supplement the intermittency of renewables.", "isCorrect": false }, { "text": "International conflict will arise over access to the best locations for wind and solar farms.", "isCorrect": false } ] },
                            { "question": "The overall tone of the passage can best be described as:", "answerOptions": [ { "text": "Pessimistic and critical.", "isCorrect": false }, { "text": "Overly simplistic and biased.", "isCorrect": false }, { "text": "Informative and cautiously optimistic.", "isCorrect": true }, { "text": "Sarcastic and dismissive.", "isCorrect": false } ] }
                        ]
                    },
                    {
                        id: "rla_info_pov",
                        title: "Point of View & Purpose",
                        description: "Analyzing an author's perspective, bias, and reason for writing.",
                        type: "reading",
                        article: {
                            title: "The Case for Year-Round Schooling",
                            genre: "Persuasive Essay",
                            text: [
                                "The traditional ten-month school calendar, with its long summer break, is an outdated relic of an agrarian past that no longer serves the needs of modern students. It is time for a fundamental shift to a year-round schooling model. A balanced calendar, with shorter, more frequent breaks distributed throughout the year, offers a powerful solution to combat the well-documented 'summer slide'—the significant learning loss that occurs over the long summer vacation. This loss is particularly detrimental to students from low-income families, who often lack access to enriching summer activities, thus widening the achievement gap.",
                                "Opponents of year-round schooling often raise concerns about disrupting family traditions and the summer tourism industry. While these are valid considerations, they pale in comparison to the profound educational benefits. Shorter breaks mean that teachers spend less time re-teaching old material in the fall, allowing them to cover more ground and delve deeper into complex topics. Furthermore, a balanced calendar can reduce teacher and student burnout by providing more frequent opportunities for rest and rejuvenation. The argument that 'kids need a break' misunderstands the nature of modern learning; the goal is not to eliminate breaks, but to distribute them more effectively to create a continuous and more engaging learning environment.",
                                "Ultimately, the transition to year-round schooling is not merely a logistical change; it is an investment in our children's future. It is a commitment to closing the achievement gap, improving academic retention, and creating a more efficient and effective educational system. Clinging to a calendar designed for a bygone era is a disservice to our students. We must have the courage to embrace a model that is better suited to the demands of the 21st century."
                            ]
                        },
                        questions: [
                            { "question": "What is the author's primary purpose in writing this passage?", "answerOptions": [ { "text": "To provide a balanced, neutral overview of different school calendars.", "isCorrect": false }, { "text": "To persuade the reader that year-round schooling is superior to the traditional calendar.", "isCorrect": true }, { "text": "To criticize the summer tourism industry.", "isCorrect": false }, { "text": "To analyze the history of the agrarian school calendar.", "isCorrect": false } ] },
                            { "question": "Which statement best describes the author's point of view regarding the traditional school calendar?", "answerOptions": [ { "text": "It is a cherished tradition that should be preserved.", "isCorrect": false }, { "text": "It is an effective model for all students, regardless of background.", "isCorrect": false }, { "text": "It is an outdated system that hinders student learning.", "isCorrect": true }, { "text": "It is a minor issue that does not require significant change.", "isCorrect": false } ] },
                            { "question": "The author uses the phrase 'outdated relic of an agrarian past' in the first paragraph to create a sense of:", "answerOptions": [ { "text": "nostalgia and respect for tradition.", "isCorrect": false }, { "text": "the calendar being old-fashioned and no longer useful.", "isCorrect": true }, { "text": "the calendar being beneficial for farming communities.", "isCorrect": false }, { "text": "the calendar being a complex historical artifact.", "isCorrect": false } ] },
                            { "question": "How does the author address the opposing viewpoint that year-round schooling disrupts family traditions?", "answerOptions": [ { "text": "By dismissing it as completely invalid and irrelevant.", "isCorrect": false }, { "text": "By acknowledging it as a valid concern but arguing that the educational benefits are more important.", "isCorrect": true }, { "text": "By providing evidence that year-round schooling does not disrupt family traditions.", "isCorrect": false }, { "text": "By ignoring the opposing viewpoint entirely.", "isCorrect": false } ] },
                            { "question": "The author's tone can best be described as:", "answerOptions": [ { "text": "uncertain and questioning.", "isCorrect": false }, { "text": "humorous and lighthearted.", "isCorrect": false }, { "text": "objective and detached.", "isCorrect": false }, { "text": "passionate and urgent.", "isCorrect": true } ] },
                            { "question": "What bias does the author display in the passage?", "answerOptions": [ { "text": "A bias against students from low-income families.", "isCorrect": false }, { "text": "A strong bias in favor of year-round schooling.", "isCorrect": true }, { "text": "A bias against teachers and school administrators.", "isCorrect": false }, { "text": "A neutral and unbiased perspective.", "isCorrect": false } ] },
                            { "question": "The author claims that the 'summer slide' is 'particularly detrimental to students from low-income families.' What is the likely purpose of including this detail?", "answerOptions": [ { "text": "To suggest that only low-income students would benefit from year-round school.", "isCorrect": false }, { "text": "To appeal to the reader's sense of fairness and social justice.", "isCorrect": true }, { "text": "To prove that all summer activities are expensive.", "isCorrect": false }, { "text": "To criticize the parents of low-income students.", "isCorrect": false } ] },
                            { "question": "In paragraph 2, the author states that concerns about family traditions 'pale in comparison to the profound educational benefits.' The phrase 'pale in comparison' is used to:", "answerOptions": [ { "text": "suggest the two issues are equally important.", "isCorrect": false }, { "text": "minimize the importance of the opposing argument.", "isCorrect": true }, { "text": "show that the author is changing their mind.", "isCorrect": false }, { "text": "indicate that the opposing argument is too complex to discuss.", "isCorrect": false } ] },
                            { "question": "What is the author's likely purpose for using strong, emotional language like 'commitment,' 'courage,' and 'disservice' in the final paragraph?", "answerOptions": [ { "text": "To provide statistical evidence.", "isCorrect": false }, { "text": "To present a counterargument.", "isCorrect": false }, { "text": "To create a sense of shared responsibility and inspire action.", "isCorrect": true }, { "text": "To maintain a neutral and objective tone.", "isCorrect": false } ] },
                            { "question": "The author's main argument is that year-round schooling should be adopted because:", "answerOptions": [ { "text": "it is a new and modern idea.", "isCorrect": false }, { "text": "it would save schools money on air conditioning.", "isCorrect": false }, { "text": "it provides significant educational advantages, such as reducing learning loss.", "isCorrect": true }, { "text": "it is easier for parents to schedule vacations.", "isCorrect": false } ] },
                            { "question": "Which of the following best describes the author's perspective on teachers?", "answerOptions": [ { "text": "The author believes teachers are overworked and would benefit from the more frequent breaks in a year-round model.", "isCorrect": true }, { "text": "The author believes teachers are the main opponents of year-round schooling.", "isCorrect": false }, { "text": "The author believes teachers are not affected by the school calendar.", "isCorrect": false }, { "text": "The author believes teachers are responsible for the 'summer slide.'", "isCorrect": false } ] },
                            { "question": "The intended audience for this passage is most likely:", "answerOptions": [ { "text": "students who dislike summer vacation.", "isCorrect": false }, { "text": "historians studying agrarian societies.", "isCorrect": false }, { "text": "parents, educators, and community members involved in education policy.", "isCorrect": true }, { "text": "owners of summer camps and tourist attractions.", "isCorrect": false } ] },
                            { "question": "How does the author attempt to build credibility?", "answerOptions": [ { "text": "By citing numerous scientific studies and statistics.", "isCorrect": false }, { "text": "By using formal language and presenting a logical argument, while also acknowledging counterarguments.", "isCorrect": true }, { "text": "By sharing personal anecdotes about their own school experiences.", "isCorrect": false }, { "text": "By claiming to be the sole expert on the topic.", "isCorrect": false } ] },
                            { "question": "The author's use of the word 'clinging' in the final paragraph suggests that adherence to the traditional calendar is:", "answerOptions": [ { "text": "a thoughtful and considered choice.", "isCorrect": false }, { "text": "a stubborn and irrational refusal to change.", "isCorrect": true }, { "text": "a temporary and flexible arrangement.", "isCorrect": false }, { "text": "a popular and modern trend.", "isCorrect": false } ] },
                            { "question": "If this passage were to continue, what would the author most likely discuss next?", "answerOptions": [ { "text": "A detailed history of summer vacation traditions.", "isCorrect": false }, { "text": "Specific examples or case studies of schools that have successfully implemented a year-round model.", "isCorrect": true }, { "text": "A list of fun activities for students to do during shorter breaks.", "isCorrect": false }, { "text": "An argument in favor of homeschooling.", "isCorrect": false } ] }
                        ]
                    },
                    {
                        id: "rla_info_arguments",
                        title: "Analyzing Arguments",
                        description: "Evaluating claims, evidence, and logical reasoning in persuasive texts.",
                        type: "reading",
                        article: {
                            title: "The Necessity of Urban Green Spaces",
                            genre: "Argumentative Article",
                            text: [
                                "In the concrete jungles of our rapidly growing cities, green spaces are not a luxury; they are a vital necessity. Parks, community gardens, and even small green rooftops are essential infrastructure for a healthy, resilient, and equitable urban future. The argument against dedicating valuable urban real estate to non-commercial use is shortsighted, ignoring the immense economic, environmental, and social returns that green spaces provide. It is imperative that city planners and policymakers prioritize the creation and preservation of these natural oases.",
                                "The environmental benefits are the most obvious. Trees and vegetation absorb carbon dioxide, filter air pollutants, and mitigate the urban heat island effect, where dense concentrations of pavement and buildings absorb and retain heat, making cities significantly hotter than surrounding rural areas. A single large tree can provide the cooling effect of ten room-sized air conditioners. Furthermore, green spaces with permeable surfaces can absorb stormwater, reducing runoff and preventing flooding, which saves millions in infrastructure costs.",
                                "Beyond the environmental impact, the social and health benefits are profound. Access to green space is directly linked to improved physical and mental health. Studies have consistently shown that time spent in nature reduces stress, lowers blood pressure, and improves overall well-being. Parks and community gardens also serve as crucial social hubs, fostering community cohesion and providing safe places for children to play and for neighbors to interact. In many underserved neighborhoods, a local park is the only available space for recreation and social gathering.",
                                "Some may argue that cities facing housing shortages cannot afford to 'waste' land on parks. This is a false dichotomy. Well-designed cities can and must incorporate both affordable housing and accessible green space. In fact, the presence of parks can increase the value of nearby residential properties, creating a more desirable and stable community. The choice is not between housing and parks; it is between short-term, profit-driven development and long-term, sustainable urban planning that values the health and happiness of its citizens."
                            ]
                        },
                        questions: [
                            { "question": "What is the author's main claim in the passage?", "answerOptions": [ { "text": "Cities should focus exclusively on building more affordable housing.", "isCorrect": false }, { "text": "Urban green spaces are a critical and necessary component of a healthy city.", "isCorrect": true }, { "text": "The environmental benefits of parks outweigh the social benefits.", "isCorrect": false }, { "text": "City planners are not doing enough to combat the urban heat island effect.", "isCorrect": false } ] },
                            { "question": "Which piece of evidence does the author use to support the claim about environmental benefits?", "answerOptions": [ { "text": "The assertion that parks increase the value of nearby properties.", "isCorrect": false }, { "text": "The statement that a single tree can provide the cooling effect of ten air conditioners.", "isCorrect": true }, { "text": "The argument that parks foster community cohesion.", "isCorrect": false }, { "text": "The claim that time spent in nature reduces stress.", "isCorrect": false } ] },
                            { "question": "In paragraph 4, the author addresses the counterargument that cities need land for housing, not parks. How does the author rebut this point?", "answerOptions": [ { "text": "By arguing that housing is not as important as parks.", "isCorrect": false }, { "text": "By agreeing that parks should only be built if there is no housing shortage.", "isCorrect": false }, { "text": "By stating that the choice between housing and parks is a 'false dichotomy' and that both are possible.", "isCorrect": true }, { "text": "By providing statistics on how many new parks have been built recently.", "isCorrect": false } ] },
                            { "question": "The author's claim that 'studies have consistently shown' that nature reduces stress is an appeal to what?", "answerOptions": [ { "text": "Emotion", "isCorrect": false }, { "text": "Tradition", "isCorrect": false }, { "text": "Authority or expert evidence", "isCorrect": true }, { "text": "Anecdotal evidence", "isCorrect": false } ] },
                            { "question": "What is the logical flaw in the argument that cities 'cannot afford to 'waste' land on parks,' as described by the author?", "answerOptions": [ { "text": "It is an ad hominem attack on city planners.", "isCorrect": false }, { "text": "It is a slippery slope argument that assumes parks will lead to bankruptcy.", "isCorrect": false }, { "text": "It presents a false dichotomy by suggesting the only choice is between parks and housing.", "isCorrect": true }, { "text": "It is a circular argument that repeats the claim without evidence.", "isCorrect": false } ] },
                            { "question": "Which of the following statements is presented as a fact rather than an opinion in the passage?", "answerOptions": [ { "text": "Green spaces are not a luxury, but a vital necessity.", "isCorrect": false }, { "text": "The argument against green spaces is shortsighted.", "isCorrect": false }, { "text": "Trees and vegetation absorb carbon dioxide.", "isCorrect": true }, { "text": "The choice is between short-term profit and long-term sustainability.", "isCorrect": false } ] },
                            { "question": "The author's argument would be most weakened by which of the following findings?", "answerOptions": [ { "text": "A new study showing that the cooling effect of trees is less than previously thought.", "isCorrect": true }, { "text": "A report that community gardens are growing in popularity.", "isCorrect": false }, { "text": "Evidence that most city residents prefer indoor recreation.", "isCorrect": false }, { "text": "A survey showing that people feel happier after visiting a park.", "isCorrect": false } ] },
                            { "question": "The author's argument would be most strengthened by including:", "answerOptions": [ { "text": "more emotional language about the beauty of nature.", "isCorrect": false }, { "text": "a personal story about the author's favorite park.", "isCorrect": false }, { "text": "specific data from a city where adding parks led to measurable economic and health benefits.", "isCorrect": true }, { "text": "a longer discussion of the history of urban development.", "isCorrect": false } ] },
                            { "question": "What unstated assumption does the author make about their audience?", "answerOptions": [ { "text": "The audience is primarily made up of real estate developers.", "isCorrect": false }, { "text": "The audience values scientific evidence and the well-being of citizens.", "isCorrect": true }, { "text": "The audience is opposed to any form of government spending.", "isCorrect": false }, { "text": "The audience has little interest in environmental issues.", "isCorrect": false } ] },
                            { "question": "By stating that the argument against green spaces is 'shortsighted,' the author implies that opponents are:", "answerOptions": [ { "text": "focusing on immediate costs without considering long-term benefits.", "isCorrect": true }, { "text": "maliciously trying to harm the environment.", "isCorrect": false }, { "text": "unaware of the current housing shortage.", "isCorrect": false }, { "text": "proposing a better long-term solution.", "isCorrect": false } ] },
                            { "question": "Is the author's claim that green spaces can 'save millions in infrastructure costs' a valid conclusion based on the evidence provided?", "answerOptions": [ { "text": "No, because the author provides no evidence to support this specific financial claim.", "isCorrect": false }, { "text": "Yes, because the author logically connects permeable surfaces to reduced stormwater runoff and flooding.", "isCorrect": true }, { "text": "No, because building parks is always more expensive than building flood barriers.", "isCorrect": false }, { "text": "Yes, because all green spaces are known to generate revenue for cities.", "isCorrect": false } ] },
                            { "question": "The author's argument that green spaces are 'essential infrastructure' is an attempt to:", "answerOptions": [ { "text": "frame parks as being as critical to a city's function as roads and bridges.", "isCorrect": true }, { "text": "suggest that parks should be funded through taxes on gasoline.", "isCorrect": false }, { "text": "argue that all green spaces should be built with concrete and steel.", "isCorrect": false }, { "text": "prove that green spaces are a new and untested idea.", "isCorrect": false } ] },
                            { "question": "How does the author use the example of 'underserved neighborhoods' in paragraph 3 to support the main argument?", "answerOptions": [ { "text": "To suggest that only poor neighborhoods need parks.", "isCorrect": false }, { "text": "To highlight the equity and social justice dimension of providing green spaces.", "isCorrect": true }, { "text": "To argue that parks in wealthy neighborhoods are a waste of money.", "isCorrect": false }, { "text": "To prove that all social gatherings happen in parks.", "isCorrect": false } ] },
                            { "question": "Which of the following claims made by the author is LEAST supported by specific evidence in the text?", "answerOptions": [ { "text": "Green spaces mitigate the urban heat island effect.", "isCorrect": false }, { "text": "Access to green space is linked to improved health.", "isCorrect": false }, { "text": "The presence of parks can increase the value of nearby residential properties.", "isCorrect": true }, { "text": "Green spaces can help manage stormwater.", "isCorrect": false } ] },
                            { "question": "Overall, is the author's argument that green spaces are a 'vital necessity' convincing?", "answerOptions": [ { "text": "No, because the author fails to address any counterarguments.", "isCorrect": false }, { "text": "No, because the author relies solely on emotional appeals without any factual evidence.", "isCorrect": false }, { "text": "Yes, because the author presents a variety of environmental, social, and health benefits and refutes a key counterargument.", "isCorrect": true }, { "text": "Yes, but only for cities that do not have a housing shortage.", "isCorrect": false } ] }
                        ]
                    },
                    {
                        id: "rla_info_graphics",
                        title: "Interpreting Graphics",
                        description: "Reading charts, graphs, and tables that accompany articles.",
                        type: "reading",
                        article: {
                            title: "Trends in Global Energy Consumption",
                            genre: "Informational Report with Graphics",
                            text: [
                                "Global energy consumption has seen dramatic shifts over the past fifty years. As developing nations industrialize and global population grows, the demand for energy continues to rise. While fossil fuels have long dominated the energy landscape, the mix of sources is beginning to change. The accompanying graphics illustrate these trends, providing a snapshot of where our energy comes from and which sectors are the largest consumers.",
                                "The pie chart below shows the breakdown of global energy consumption by source for the most recent year. As is evident, fossil fuels (coal, oil, and natural gas combined) still account for the vast majority of the world's energy supply. However, the share of renewables, including hydropower, solar, and wind, is steadily growing, driven by environmental concerns and decreasing costs. Nuclear energy remains a small but consistent contributor.",
                                "The bar chart further details the primary uses of electricity. The industrial sector is the largest consumer, powering factories and manufacturing processes. This is followed closely by the residential sector (for lighting, heating, and appliances) and the commercial sector (for businesses and offices). Transportation currently represents a smaller portion of electricity use, but this is expected to grow significantly with the adoption of electric vehicles."
                            ]
                        },
                        questions: [
                            { "questionNumber": 1, "type": "chart", "passage": `<div class="passage-text"><b>Allied Military Deaths in World War II (Approximate)</b><br><img src="Images/WorldWarII-MilitaryDeaths-Allies-Piechart.png" alt="A pie chart showing approximate Allied military deaths in WWII. Soviet Union: 48%, China: 22%, United States: 5%, United Kingdom: 5%, Other Allies: 20%." class="bg-white p-2 rounded"></div>`, "question": "According to the pie chart, which two Allied nations suffered the highest number of military deaths in World War II?", "answerOptions": [ { "text": "The Soviet Union and China", "rationale": "Correct. The chart shows the Soviet Union and China with the two largest percentages of military deaths among the Allies.", "isCorrect": true }, { "text": "The United States and the United Kingdom", "rationale": "The chart shows the U.S. and U.K. with relatively small percentages compared to the Soviet Union and China.", "isCorrect": false }, { "text": "China and the United States", "rationale": "While China's losses were very high, the U.S. losses were significantly smaller.", "isCorrect": false }, { "text": "The Soviet Union and the United Kingdom", "rationale": "While the Soviet Union's losses were the highest, the U.K.'s were much smaller.", "isCorrect": false } ] },
                            { "questionNumber": 2, "type": "chart", "passage": `<div class="passage-text"><b>Allied Military Deaths in World War II (Approximate)</b><br><img src="Images/WorldWarII-MilitaryDeaths-Allies-Piechart.png" alt="A pie chart showing approximate Allied military deaths in WWII. Soviet Union: 48%, China: 22%, United States: 5%, United Kingdom: 5%, Other Allies: 20%." class="bg-white p-2 rounded"></div>`, "question": "The combined military deaths of the United States and the United Kingdom make up approximately what percentage of the total Allied deaths shown?", "answerOptions": [ { "text": "5%", "rationale": "This is the approximate percentage for each country individually, not combined.", "isCorrect": false }, { "text": "10%", "rationale": "Correct. The chart shows the U.S. at 5% and the U.K. at 5%, for a combined total of 10%.", "isCorrect": true }, { "text": "22%", "rationale": "This is the approximate percentage for China alone.", "isCorrect": false }, { "text": "48%", "rationale": "This is the approximate percentage for the Soviet Union alone.", "isCorrect": false } ] },
                            { "questionNumber": 3, "type": "chart", "passage": `<div class="passage-text"><b>Allied Military Deaths in World War II (Approximate)</b><br><img src="Images/WorldWarII-MilitaryDeaths-Allies-Piechart.png" alt="A pie chart showing approximate Allied military deaths in WWII. Soviet Union: 48%, China: 22%, United States: 5%, United Kingdom: 5%, Other Allies: 20%." class="bg-white p-2 rounded"></div>`, "question": "What can be inferred from the pie chart about the human cost of World War II for the Soviet Union?", "answerOptions": [ { "text": "It was minimal compared to other Allies.", "rationale": "The chart shows the Soviet Union had the highest proportion of deaths by a large margin.", "isCorrect": false }, { "text": "It was immense, accounting for nearly half of all Allied military deaths shown.", "rationale": "Correct. The Soviet Union's slice of the pie is 48%, which is almost half, indicating a staggering human cost.", "isCorrect": true }, { "text": "It was less than the combined losses of the United States and the United Kingdom.", "rationale": "It was significantly greater than the combined losses of the U.S. and U.K.", "isCorrect": false }, { "text": "It was roughly equal to the losses of China.", "rationale": "The chart shows the Soviet Union's losses were more than double those of China.", "isCorrect": false } ] },
                            { "questionNumber": 4, "type": "chart", "passage": `<div class="passage-text"><b>Electricity Consumption by Sector</b><br><img src="Images/ged-grsph-1.png" alt="A bar chart showing electricity consumption. Industrial: 40%, Residential: 35%, Commercial: 24%, Transportation: 1%." class="bg-white p-2 rounded"></div>`, "question": "Which sector is the largest consumer of electricity according to the bar chart?", "answerOptions": [ { "text": "Residential", "isCorrect": false }, { "text": "Commercial", "isCorrect": false }, { "text": "Transportation", "isCorrect": false }, { "text": "Industrial", "isCorrect": true } ] },
                            { "questionNumber": 5, "type": "chart", "passage": `<div class="passage-text"><b>Electricity Consumption by Sector</b><br><img src="Images/ged-grsph-1.png" alt="A bar chart showing electricity consumption. Industrial: 40%, Residential: 35%, Commercial: 24%, Transportation: 1%." class="bg-white p-2 rounded"></div>`, "question": "What is the combined percentage of electricity consumed by the Residential and Commercial sectors?", "answerOptions": [ { "text": "40%", "isCorrect": false }, { "text": "59%", "isCorrect": true }, { "text": "75%", "isCorrect": false }, { "text": "99%", "isCorrect": false } ] },
                            { "questionNumber": 6, "type": "multi-source", "passage": `<div class="passage-text">Refer to both the article text and the "Electricity Consumption by Sector" bar chart.</div><img src="Images/ged-grsph-1.png" alt="A bar chart showing electricity consumption. Industrial: 40%, Residential: 35%, Commercial: 24%, Transportation: 1%." class="bg-white p-2 rounded">`, "question": "The article states that electricity use for transportation is expected to grow. Based on the chart, why would this growth be significant?", "answerOptions": [ { "text": "Because transportation already uses the most electricity.", "isCorrect": false }, { "text": "Because transportation currently represents a very small fraction of electricity use, so any growth will be a large relative change.", "isCorrect": true }, { "text": "Because the industrial sector's electricity use is declining rapidly.", "isCorrect": false }, { "text": "Because transportation is the only sector where electricity use is measured.", "isCorrect": false } ] },
                            { "questionNumber": 7, "type": "chart", "passage": `<div class="passage-text"><b>Average Test Scores by Subject</b><br><table class="w-full text-left mt-2"><thead><tr><th class="p-2 border-b">Subject</th><th class="p-2 border-b">Score</th></tr></thead><tbody><tr class="border-b"><td class="p-2">Math</td><td class="p-2">82</td></tr><tr class="border-b"><td class="p-2">Reading</td><td class="p-2">88</td></tr><tr class="border-b"><td class="p-2">Science</td><td class="p-2">85</td></tr><tr class="border-b"><td class="p-2">Social Studies</td><td class="p-2">83</td></tr></tbody></table></div>`, "question": "Which subject has the highest average test score?", "answerOptions": [ { "text": "Math", "isCorrect": false }, { "text": "Reading", "isCorrect": true }, { "text": "Science", "isCorrect": false }, { "text": "Social Studies", "isCorrect": false } ] },
                            { "questionNumber": 8, "type": "chart", "passage": `<div class="passage-text"><b>Average Test Scores by Subject</b><br><table class="w-full text-left mt-2"><thead><tr><th class="p-2 border-b">Subject</th><th class="p-2 border-b">Score</th></tr></thead><tbody><tr class="border-b"><td class="p-2">Math</td><td class="p-2">82</td></tr><tr class="border-b"><td class="p-2">Reading</td><td class="p-2">88</td></tr><tr class="border-b"><td class="p-2">Science</td><td class="p-2">85</td></tr><tr class="border-b"><td class="p-2">Social Studies</td><td class="p-2">83</td></tr></tbody></table></div>`, "question": "What is the range of the average test scores?", "answerOptions": [ { "text": "6", "isCorrect": true }, { "text": "82", "isCorrect": false }, { "text": "84.5", "isCorrect": false }, { "text": "88", "isCorrect": false } ] },
                            { "questionNumber": 9, "type": "chart", "passage": `<div class="passage-text"><b>Projected Population Growth of City X</b><br><img src="Images/Questions-are-based-on-the-following-graph.-7.png" alt="A line graph showing population over time. 2020: 100k, 2025: 110k, 2030: 125k, 2035: 145k, 2040: 170k." class="bg-white p-2 rounded"></div>`, "question": "During which 5-year period is the population of City X projected to grow the most?", "answerOptions": [ { "text": "2020-2025", "isCorrect": false }, { "text": "2025-2030", "isCorrect": false }, { "text": "2030-2035", "isCorrect": false }, { "text": "2035-2040", "isCorrect": true } ] },
                            { "questionNumber": 10, "type": "chart", "passage": `<div class="passage-text"><b>Projected Population Growth of City X</b><br><img src="Images/Questions-are-based-on-the-following-graph.-7.png" alt="A line graph showing population over time. 2020: 100k, 2025: 110k, 2030: 125k, 2035: 145k, 2040: 170k." class="bg-white p-2 rounded"></div>`, "question": "What is the overall trend shown in the graph?", "answerOptions": [ { "text": "The population is projected to decrease over time.", "isCorrect": false }, { "text": "The population is projected to grow at a steady, constant rate.", "isCorrect": false }, { "text": "The population is projected to grow at an accelerating rate.", "isCorrect": true }, { "text": "The population is projected to remain stable after 2030.", "isCorrect": false } ] },
                            { "questionNumber": 11, "type": "knowledge", "question": "What is the primary purpose of a map key or legend?", "answerOptions": [ { "text": "To show the title of the map.", "isCorrect": false }, { "text": "To explain the meaning of the symbols and colors used on the map.", "isCorrect": true }, { "text": "To indicate the scale or distance.", "isCorrect": false }, { "text": "To show the direction of North.", "isCorrect": false } ] },
                            { "questionNumber": 12, "type": "knowledge", "question": "A political map is a type of map that primarily shows:", "answerOptions": [ { "text": "Physical features like mountains and rivers.", "isCorrect": false }, { "text": "Climate zones and vegetation.", "isCorrect": false }, { "text": "The boundaries of countries, states, and cities.", "isCorrect": true }, { "text": "Population density.", "isCorrect": false } ] },
                            { "questionNumber": 13, "type": "knowledge", "question": "On a map, what does the scale '1 inch = 100 miles' mean?", "answerOptions": [ { "text": "The map is 100 miles wide.", "isCorrect": false }, { "text": "Every inch on the map represents 100 miles in the real world.", "isCorrect": true }, { "text": "The map is not accurate.", "isCorrect": false }, { "text": "Every 100 inches on the map represents 1 mile in the real world.", "isCorrect": false } ] },
                            { "questionNumber": 14, "type": "knowledge", "question": "A bar chart is most effective for:", "answerOptions": [ { "text": "Showing a trend over a continuous period of time.", "isCorrect": false }, { "text": "Comparing distinct categories or groups.", "isCorrect": true }, { "text": "Showing the parts of a whole or percentages.", "isCorrect": false }, { "text": "Displaying the exact location of geographical features.", "isCorrect": false } ] },
                            { "questionNumber": 15, "type": "knowledge", "question": "A pie chart is most effective for:", "answerOptions": [ { "text": "Showing a trend over a continuous period of time.", "isCorrect": false }, { "text": "Comparing distinct categories or groups.", "isCorrect": false }, { "text": "Showing the parts of a whole or percentages.", "isCorrect": true }, { "text": "Displaying the exact location of geographical features.", "isCorrect": false } ] }
                        ]
                    }
                ]
            },
            "Reading Comprehension: Literary Texts": {
                description: "Learn to analyze plot, character, theme, and figurative language in fiction.",
                topics: [
                    {
                        id: "rla_lit_plot_character",
                        title: "Plot & Character",
                        description: "Analyzing story structure and character development.",
                        type: "reading",
                        article: {
                            title: "An Excerpt from 'The Gift of the Magi' by O. Henry",
                            genre: "Short Story",
                            text: [
                                "One dollar and eighty-seven cents. That was all. And sixty cents of it was in pennies. Pennies saved one and two at a time by bulldozing the grocer and the vegetable man and the butcher until one's cheeks burned with the silent imputation of parsimony that such close dealing implied. Three times Della counted it. One dollar and eighty-seven cents. And the next day would be Christmas.",
                                "There was clearly nothing to do but flop down on the shabby little couch and howl. So Della did it. Which instigates the moral reflection that life is made up of sobs, sniffles, and smiles, with sniffles predominating.",
                                "Della finished her cry and attended to her cheeks with the powder rag. She stood by the window and looked out dully at a gray cat walking a gray fence in a gray backyard. Tomorrow would be Christmas Day, and she had only $1.87 with which to buy Jim a present. Her Jim. Many a happy hour she had spent planning for something nice for him. Something fine and rare and sterling—something just a little bit near to being worthy of the honor of being owned by Jim.",
                                "Suddenly she whirled from the window and stood before the glass. Her eyes were shining brilliantly, but her face had lost its color within twenty seconds. Rapidly she pulled down her hair and let it fall to its full length. Now, there were two possessions of the James Dillingham Youngs in which they both took a mighty pride. One was Jim's gold watch that had been his father's and his grandfather's. The other was Della's hair. Had the queen of Sheba lived in the flat across the airshaft, Della would have let her hair hang out the window some day to dry just to depreciate Her Majesty's jewels and gifts. Had King Solomon been the janitor, with all his treasures piled up in the basement, Jim would have pulled out his watch every time he passed, just to see him pluck at his beard from envy.",
                                "So now Della's beautiful hair fell about her, rippling and shining like a cascade of brown waters. It reached below her knee and made itself almost a garment for her. And then she did it up again nervously and quickly. Once she faltered for a minute and stood still while a tear or two splashed on the worn red carpet. On went her old brown jacket; on went her old brown hat. With a whirl of skirts and with the brilliant sparkle still in her eyes, she fluttered out the door and down the stairs to the street."
                            ]
                        },
                        questions: [
                            { "question": "What is the central conflict that Della faces at the beginning of the passage?", "answerOptions": [ { "text": "She is unhappy with her apartment.", "isCorrect": false }, { "text": "She does not have enough money to buy a worthy Christmas present for her husband.", "isCorrect": true }, { "text": "She is in a disagreement with the local grocer.", "isCorrect": false }, { "text": "She is worried about her hair losing its color.", "isCorrect": false } ] },
                            { "question": "Which of the following character traits best describes Della in the first three paragraphs?", "answerOptions": [ { "text": "Careless and extravagant", "isCorrect": false }, { "text": "Angry and resentful", "isCorrect": false }, { "text": "Loving and resourceful, but distressed", "isCorrect": true }, { "text": "Calm and indifferent", "isCorrect": false } ] },
                            { "question": "The description of the 'gray cat walking a gray fence in a gray backyard' in paragraph 3 serves primarily to:", "answerOptions": [ { "text": "suggest that Della wants a pet.", "isCorrect": false }, { "text": "reflect Della's dull and hopeless mood at that moment.", "isCorrect": true }, { "text": "introduce a new character to the story.", "isCorrect": false }, { "text": "show that the story takes place in the city.", "isCorrect": false } ] },
                            { "question": "What happens in the plot that marks a turning point for Della's emotional state?", "answerOptions": [ { "text": "She counts her money for the third time.", "isCorrect": false }, { "text": "She looks out the window at the gray cat.", "isCorrect": false }, { "text": "She suddenly has an idea while looking in the mirror.", "isCorrect": true }, { "text": "She puts on her old brown jacket and hat.", "isCorrect": false } ] },
                            { "question": "The author states that Della's hair and Jim's watch are possessions in which they 'took a mighty pride.' What is the purpose of highlighting these two items?", "answerOptions": [ { "text": "To show that Della and Jim are wealthy and materialistic.", "isCorrect": false }, { "text": "To establish these items as the most valuable things they own, foreshadowing their importance to the plot.", "isCorrect": true }, { "text": "To suggest that they should sell both items to improve their living situation.", "isCorrect": false }, { "text": "To describe the history of the James Dillingham Young family.", "isCorrect": false } ] },
                            { "question": "How does Della's character evolve from the beginning of the passage to the end?", "answerOptions": [ { "text": "She goes from being happy to being sad.", "isCorrect": false }, { "text": "She goes from a state of despair to one of determined action.", "isCorrect": true }, { "text": "She becomes more concerned with her own appearance.", "isCorrect": false }, { "text": "She decides that buying a gift is not important.", "isCorrect": false } ] },
                            { "question": "The phrase 'silent imputation of parsimony' in the first paragraph means that Della felt:", "answerOptions": [ { "text": "proud of her ability to save money.", "isCorrect": false }, { "text": "the shopkeepers were silently accusing her of being overly cheap.", "isCorrect": true }, { "text": "the shopkeepers admired her for her bargaining skills.", "isCorrect": false }, { "text": "that she was not paying enough for the groceries.", "isCorrect": false } ] },
                            { "question": "What is the climax of this particular excerpt?", "answerOptions": [ { "text": "Della counting her money.", "isCorrect": false }, { "text": "Della looking out the window.", "isCorrect": false }, { "text": "Della realizing what she can do and then quickly leaving the apartment.", "isCorrect": true }, { "text": "The author's moral reflection on life.", "isCorrect": false } ] },
                            { "question": "The author's comparison of Della's hair to the Queen of Sheba's jewels and Jim's watch to King Solomon's treasures is an example of what literary device?", "answerOptions": [ { "text": "Metaphor", "isCorrect": false }, { "text": "Personification", "isCorrect": false }, { "text": "Allusion", "isCorrect": true }, { "text": "Onomatopoeia", "isCorrect": false } ] },
                            { "question": "What primary motivation drives Della's actions throughout the passage?", "answerOptions": [ { "text": "Her desire to be wealthy.", "isCorrect": false }, { "text": "Her deep love for her husband, Jim.", "isCorrect": true }, { "text": "Her frustration with her living conditions.", "isCorrect": false }, { "text": "Her wish to compete with royalty.", "isCorrect": false } ] },
                            { "question": "The author writes, 'Once she faltered for a minute and stood still while a tear or two splashed on the worn red carpet.' This moment in the plot reveals that Della's decision:", "answerOptions": [ { "text": "was easy and made without any emotion.", "isCorrect": false }, { "text": "was difficult and caused her a moment of sadness or hesitation.", "isCorrect": true }, { "text": "was something she had planned for a long time.", "isCorrect": false }, { "text": "was an accident.", "isCorrect": false } ] },
                            { "question": "Which of the following is part of the exposition of the story, as presented in the excerpt?", "answerOptions": [ { "text": "Della's decision to leave the apartment.", "isCorrect": false }, { "text": "The introduction of the setting, the main character (Della), and her central problem.", "isCorrect": true }, { "text": "The comparison of Della's hair to a cascade of brown waters.", "isCorrect": false }, { "text": "The 'brilliant sparkle' in Della's eyes.", "isCorrect": false } ] },
                            { "question": "The description of Della putting on her 'old brown jacket' and 'old brown hat' contributes to the characterization by emphasizing her:", "answerOptions": [ { "text": "lack of style.", "isCorrect": false }, { "text": "love for the color brown.", "isCorrect": false }, { "text": "modest financial means.", "isCorrect": true }, { "text": "desire to be unnoticed.", "isCorrect": false } ] },
                            { "question": "What does the 'brilliant sparkle' in Della's eyes at the end of the passage symbolize?", "answerOptions": [ { "text": "Her lingering sadness and despair.", "isCorrect": false }, { "text": "Her newfound hope, determination, and love.", "isCorrect": true }, { "text": "Her anger at her situation.", "isCorrect": false }, { "text": "Her fear of what Jim will think.", "isCorrect": false } ] },
                            { "question": "The rising action of this excerpt begins when:", "answerOptions": [ { "text": "Della counts her money.", "isCorrect": false }, { "text": "Della looks out the window.", "isCorrect": false }, { "text": "Della suddenly whirls from the window with an idea.", "isCorrect": true }, { "text": "The author makes a moral reflection about life.", "isCorrect": false } ] }
                        ]
                    },
                    {
                        id: "rla_lit_theme_figurative_language",
                        title: "Theme & Figurative Language",
                        description: "Identifying the underlying message and interpreting metaphors, similes, etc.",
                        type: "reading",
                        article: {
                            title: "The Road Not Taken",
                            genre: "Poem by Robert Frost",
                            text: [
                                "Two roads diverged in a yellow wood,",
                                "And sorry I could not travel both",
                                "And be one traveler, long I stood",
                                "And looked down one as far as I could",
                                "To where it bent in the undergrowth;",
                                "<br/>",
                                "Then took the other, as just as fair,",
                                "And having perhaps the better claim,",
                                "Because it was grassy and wanted wear;",
                                "Though as for that the passing there",
                                "Had worn them really about the same,",
                                "<br/>",
                                "And both that morning equally lay",
                                "In leaves no step had trodden black.",
                                "Oh, I kept the first for another day!",
                                "Yet knowing how way leads on to way,",
                                "I doubted if I should ever come back.",
                                "<br/>",
                                "I shall be telling this with a sigh",
                                "Somewhere ages and ages hence:",
                                "Two roads diverged in a wood, and I—",
                                "I took the one less traveled by,",
                                "And that has made all the difference."
                            ]
                        },
                        questions: [
                            { "question": "The 'two roads' in the poem are a metaphor for what?", "answerOptions": [ { "text": "An actual forest path.", "isCorrect": false }, { "text": "Choices one must make in life.", "isCorrect": true }, { "text": "The past and the future.", "isCorrect": false }, { "text": "Friendships.", "isCorrect": false } ] },
                            { "question": "What is the central theme of the poem?", "answerOptions": [ { "text": "The beauty of nature in autumn.", "isCorrect": false }, { "text": "The importance of following the crowd.", "isCorrect": false }, { "text": "The idea that individual choices shape one's life and identity.", "isCorrect": true }, { "text": "The regret that comes from making a wrong decision.", "isCorrect": false } ] },
                            { "question": "In the first stanza, what does the 'yellow wood' symbolize?", "answerOptions": [ { "text": "A time of decision or a crossroads in the speaker's life.", "isCorrect": true }, { "text": "The speaker's fear and uncertainty.", "isCorrect": false }, { "text": "A place of danger.", "isCorrect": false }, { "text": "The speaker's happy memories.", "isCorrect": false } ] },
                            { "question": "In the second stanza, the speaker notes that the second road 'was grassy and wanted wear.' What does this figurative language suggest?", "answerOptions": [ { "text": "The road was poorly maintained.", "isCorrect": false }, { "text": "The road was more beautiful than the first.", "isCorrect": false }, { "text": "The road appeared to be less traveled or less conventional.", "isCorrect": true }, { "text": "The road was dangerous and overgrown.", "isCorrect": false } ] },
                            { "question": "How does the speaker contradict his own description of the two roads in the second stanza?", "answerOptions": [ { "text": "By saying one was much more difficult.", "isCorrect": false }, { "text": "By admitting that 'the passing there / Had worn them really about the same.'", "isCorrect": true }, { "text": "By claiming that one road was made of stone.", "isCorrect": false }, { "text": "By stating that he had traveled both roads before.", "isCorrect": false } ] },
                            { "question": "What does the line 'And both that morning equally lay / In leaves no step had trodden black' imply?", "answerOptions": [ { "text": "That the speaker was the first person there that day, and the choice was truly his own.", "isCorrect": true }, { "text": "That it was too dark to see the paths clearly.", "isCorrect": false }, { "text": "That both paths were unpopular.", "isCorrect": false }, { "text": "That the speaker was lost.", "isCorrect": false } ] },
                            { "question": "The 'sigh' mentioned in the final stanza ('I shall be telling this with a sigh') is best interpreted as a sigh of:", "answerOptions": [ { "text": "simple regret for the path not taken.", "isCorrect": false }, { "text": "satisfaction and contentment with the choice made.", "isCorrect": false }, { "text": "complex reflection, blending nostalgia, satisfaction, and a sense of the weight of the decision.", "isCorrect": true }, { "text": "deep sadness and disappointment.", "isCorrect": false } ] },
                            { "question": "The phrase 'way leads on to way' in the third stanza suggests that:", "answerOptions": [ { "text": "all paths eventually lead to the same destination.", "isCorrect": false }, { "text": "it is easy to get lost in the woods.", "isCorrect": false }, { "text": "one choice in life inevitably leads to another, making it difficult to go back and change the past.", "isCorrect": true }, { "text": "the speaker plans to explore all possible paths.", "isCorrect": false } ] },
                            { "question": "The final lines, 'I took the one less traveled by, / And that has made all the difference,' are often interpreted as a celebration of individualism. However, considering the poem's earlier statement that the roads were 'really about the same,' what is another possible interpretation of the theme?", "answerOptions": [ { "text": "The speaker made a terrible mistake.", "isCorrect": false }, { "text": "The poem is about how we create meaning and significance for our choices after we make them.", "isCorrect": true }, { "text": "The speaker is lying about which road he took.", "isCorrect": false }, { "text": "The poem is a warning against taking any risks.", "isCorrect": false } ] },
                            { "question": "The repetition of the word 'And' at the beginning of lines 2, 3, and 4 is a literary device called anaphora. What is its effect?", "answerOptions": [ { "text": "It makes the poem sound confusing.", "isCorrect": false }, { "text": "It creates a sense of hesitation and thoughtful deliberation as the speaker weighs his options.", "isCorrect": true }, { "text": "It shows that the speaker is in a hurry.", "isCorrect": false }, { "text": "It suggests the speaker is not telling the truth.", "isCorrect": false } ] },
                            { "question": "The 'undergrowth' where the path bends can be seen as a symbol for:", "answerOptions": [ { "text": "a beautiful garden.", "isCorrect": false }, { "text": "the future, which cannot be fully seen or understood from the present.", "isCorrect": true }, { "text": "the speaker's past mistakes.", "isCorrect": false }, { "text": "a place of safety and comfort.", "isCorrect": false } ] },
                            { "question": "The poem's rhyme scheme is ABAAB. What effect does this consistent structure have?", "answerOptions": [ { "text": "It makes the poem feel chaotic and unpredictable.", "isCorrect": false }, { "text": "It gives the poem a thoughtful, musical quality that reinforces its contemplative mood.", "isCorrect": true }, { "text": "It makes the poem difficult to understand.", "isCorrect": false }, { "text": "It signals that the poem should be read as a joke.", "isCorrect": false } ] },
                            { "question": "Which of the following words best describes the overall mood of the poem?", "answerOptions": [ { "text": "Joyful and carefree", "isCorrect": false }, { "text": "Angry and bitter", "isCorrect": false }, { "text": "Reflective and contemplative", "isCorrect": true }, { "text": "Frightened and anxious", "isCorrect": false } ] },
                            { "question": "The title 'The Road Not Taken' is significant because the poem focuses heavily on:", "answerOptions": [ { "text": "the road the speaker chose to travel.", "isCorrect": false }, { "text": "the memory and imagined possibilities of the road the speaker did not choose.", "isCorrect": true }, { "text": "the physical characteristics of both roads.", "isCorrect": false }, { "text": "the speaker's hiking ability.", "isCorrect": false } ] },
                            { "question": "The poem uses the past tense until the final stanza. Why does the poet switch to the future tense ('I shall be telling this...')?", "answerOptions": [ { "text": "To show that the speaker has forgotten what happened.", "isCorrect": false }, { "text": "To emphasize how the speaker will reflect on this moment and assign it meaning in the distant future.", "isCorrect": true }, { "text": "To suggest that the events of the poem have not actually happened yet.", "isCorrect": false }, { "text": "To confuse the reader about the timeline of the story.", "isCorrect": false } ] }
                        ]
                    }
                ]
            },
            "Language & Grammar": {
                description: "Master the rules of standard English grammar, punctuation, and sentence structure.",
                topics: [
                    {
                        id: "rla_grammar_structure",
                        title: "Sentence Structure",
                        description: "Correcting fragments, run-on sentences, and comma splices.",
                        questions: [
                            { "questionNumber": 1, "question": "Which of the following is a complete sentence?", "answerOptions": [ { "text": "Because she studied hard for the test.", "isCorrect": false, "rationale": "This is a dependent clause (a sentence fragment) and cannot stand on its own." }, { "text": "Studying hard for the test and reviewing her notes.", "isCorrect": false, "rationale": "This is a participial phrase (a sentence fragment) lacking a subject and a main verb." }, { "text": "She studied hard for the test.", "isCorrect": true, "rationale": "This sentence has a subject ('She') and a verb ('studied') and expresses a complete thought." }, { "text": "Although she studied hard for the test.", "isCorrect": false, "rationale": "This is a dependent clause (a sentence fragment) and cannot stand on its own." } ] },
                            { "questionNumber": 2, "question": "Which option correctly revises the following run-on sentence? 'The park was beautiful the sun was shining brightly.'", "answerOptions": [ { "text": "The park was beautiful, the sun was shining brightly.", "isCorrect": false, "rationale": "This creates a comma splice, which is a grammatical error." }, { "text": "The park was beautiful the sun, was shining brightly.", "isCorrect": false, "rationale": "This punctuation is incorrect and does not fix the run-on." }, { "text": "The park was beautiful; the sun was shining brightly.", "isCorrect": true, "rationale": "A semicolon is a correct way to join two closely related independent clauses." }, { "text": "The park was beautiful and the sun shining brightly.", "isCorrect": false, "rationale": "This creates a fragment because the second clause lacks a verb." } ] },
                            { "questionNumber": 3, "question": "Identify the sentence fragment.", "answerOptions": [ { "text": "He finished his work and went home.", "isCorrect": false, "rationale": "This is a complete sentence with a compound verb." }, { "text": "After the long and tiring meeting.", "isCorrect": true, "rationale": "This is a prepositional phrase that does not express a complete thought. It is a fragment." }, { "text": "The results were inconclusive.", "isCorrect": false, "rationale": "This is a complete sentence." }, { "text": "Wait for me.", "isCorrect": false, "rationale": "This is a complete sentence (an imperative sentence where the subject 'you' is implied)." } ] },
                            { "questionNumber": 4, "question": "Which sentence contains a comma splice?", "answerOptions": [ { "text": "She loves to read, however, she rarely has time.", "isCorrect": true, "rationale": "A comma alone cannot separate two independent clauses, especially when a conjunctive adverb like 'however' is used. It should be a semicolon or a period." }, { "text": "She loves to read, but she rarely has time.", "isCorrect": false, "rationale": "This is a correctly punctuated compound sentence using a comma and a coordinating conjunction." }, { "text": "Although she loves to read, she rarely has time.", "isCorrect": false, "rationale": "This is a correctly punctuated complex sentence." }, { "text": "She loves to read; however, she rarely has time.", "isCorrect": false, "rationale": "This is a correctly punctuated sentence using a semicolon." } ] },
                            { "questionNumber": 5, "question": "How can the following two sentences be best combined? 'The team practiced for weeks. They still lost the championship game.'", "answerOptions": [ { "text": "The team practiced for weeks, they still lost the championship game.", "isCorrect": false, "rationale": "This is a comma splice." }, { "text": "The team practiced for weeks, but they still lost the championship game.", "isCorrect": true, "rationale": "Using a comma and the coordinating conjunction 'but' correctly shows the contrast between the two ideas." }, { "text": "The team practiced for weeks they still lost the championship game.", "isCorrect": false, "rationale": "This is a run-on sentence." }, { "text": "Practicing for weeks, the team still lost the championship game.", "isCorrect": false, "rationale": "While grammatically correct, it is less clear and direct than the option with 'but'." } ] },
                            { "questionNumber": 6, "question": "Which of the following is a run-on sentence?", "answerOptions": [ { "text": "The concert was amazing, and the band played all their famous songs.", "isCorrect": false, "rationale": "This is a correctly formed compound sentence." }, { "text": "I need to go to the store I am out of milk.", "isCorrect": true, "rationale": "This is a fused sentence, a type of run-on where two independent clauses are joined with no punctuation." }, { "text": "Because the weather was bad, the game was canceled.", "isCorrect": false, "rationale": "This is a correctly formed complex sentence." }, { "text": "The dog barked loudly.", "isCorrect": false, "rationale": "This is a simple, complete sentence." } ] },
                            { "questionNumber": 7, "question": "Which of the following is NOT a complete sentence?", "answerOptions": [ { "text": "To ensure that all the details were correct.", "isCorrect": true, "rationale": "This is an infinitive phrase acting as a fragment. It doesn't state who is ensuring the details or what happened." }, { "text": "Please check your work carefully.", "isCorrect": false, "rationale": "This is a complete imperative sentence." }, { "text": "The report was finished on time.", "isCorrect": false, "rationale": "This is a complete sentence." }, { "text": "Did you finish the assignment?", "isCorrect": false, "rationale": "This is a complete interrogative sentence." } ] },
                            { "questionNumber": 8, "question": "Choose the correctly punctuated sentence.", "answerOptions": [ { "text": "He is a talented musician, he plays both the guitar and the piano.", "isCorrect": false, "rationale": "This is a comma splice." }, { "text": "He is a talented musician for he plays both the guitar and the piano.", "isCorrect": false, "rationale": "Using 'for' as a conjunction here is awkward and less common; it also requires a comma before it." }, { "text": "He is a talented musician; he plays both the guitar and the piano.", "isCorrect": true, "rationale": "A semicolon correctly joins the two related independent clauses." }, { "text": "He is a talented musician, and playing both the guitar and the piano.", "isCorrect": false, "rationale": "This creates a fragment in the second part of the sentence." } ] },
                            { "questionNumber": 9, "question": "Which revision fixes the fragment? 'While the city slept peacefully.'", "answerOptions": [ { "text": "While the city slept peacefully, a lone fox crossed the street.", "isCorrect": true, "rationale": "Adding an independent clause ('a lone fox crossed the street') makes this a complete complex sentence." }, { "text": "The city slept peacefully.", "isCorrect": false, "rationale": "This is a complete sentence, but it does not correctly incorporate the original fragment." }, { "text": "While the city was sleeping peacefully.", "isCorrect": false, "rationale": "This is still a dependent clause and a fragment." }, { "text": "The city slept peacefully and.", "isCorrect": false, "rationale": "This is grammatically incorrect." } ] },
                            { "questionNumber": 10, "question": "Which sentence is correctly structured?", "answerOptions": [ { "text": "The new manager is very effective, she has increased productivity by 20%.", "isCorrect": false, "rationale": "This is a comma splice." }, { "text": "The new manager is very effective she has increased productivity by 20%.", "isCorrect": false, "rationale": "This is a run-on (fused) sentence." }, { "text": "The new manager is very effective because she has increased productivity by 20%.", "isCorrect": true, "rationale": "The subordinating conjunction 'because' correctly joins the two clauses, creating a complete complex sentence." }, { "text": "The new manager being very effective and increasing productivity by 20%.", "isCorrect": false, "rationale": "This is a sentence fragment." } ] },
                            { "questionNumber": 11, "question": "Identify the run-on sentence.", "answerOptions": [ { "text": "The storm was intense, but it passed quickly.", "isCorrect": false, "rationale": "This is a correctly formed compound sentence." }, { "text": "Although the storm was intense, it passed quickly.", "isCorrect": false, "rationale": "This is a correctly formed complex sentence." }, { "text": "The storm was intense it passed quickly.", "isCorrect": true, "rationale": "This is a fused sentence, a type of run-on, as it lacks any punctuation or conjunction between the two independent clauses." }, { "text": "The storm, which was intense, passed quickly.", "isCorrect": false, "rationale": "This is a correctly formed sentence with a non-essential clause." } ] },
                            { "questionNumber": 12, "question": "Which of the following is a sentence fragment?", "answerOptions": [ { "text": "The cat, sleeping in the sunbeam.", "isCorrect": true, "rationale": "This is a noun phrase with a participial phrase modifying it. It lacks a main verb to make it a complete sentence." }, { "text": "The cat slept in the sunbeam.", "isCorrect": false, "rationale": "This is a complete sentence." }, { "text": "Where is the cat sleeping?", "isCorrect": false, "rationale": "This is a complete sentence." }, { "text": "The cat sleeps there all day.", "isCorrect": false, "rationale": "This is a complete sentence." } ] },
                            { "questionNumber": 13, "question": "How should this comma splice be corrected? 'The project is due tomorrow, we have to work late tonight.'", "answerOptions": [ { "text": "The project is due tomorrow we have to work late tonight.", "isCorrect": false, "rationale": "This creates a run-on sentence." }, { "text": "The project is due tomorrow, so we have to work late tonight.", "isCorrect": true, "rationale": "Adding the coordinating conjunction 'so' after the comma correctly joins the two independent clauses and shows a cause-and-effect relationship." }, { "text": "The project is due tomorrow, and we have to work late tonight.", "isCorrect": false, "rationale": "While grammatically correct, 'so' provides a stronger logical connection than 'and' in this context." }, { "text": "The project is due tomorrow, we, have to work late tonight.", "isCorrect": false, "rationale": "The extra comma is incorrect." } ] },
                            { "questionNumber": 14, "question": "Which is a complete and correctly structured sentence?", "answerOptions": [ { "text": "Running through the park before the sun came up.", "isCorrect": false, "rationale": "This is a sentence fragment (a participial phrase)." }, { "text": "I enjoy running through the park before the sun comes up.", "isCorrect": true, "rationale": "This sentence has a subject ('I') and a verb ('enjoy') and expresses a complete thought." }, { "text": "Running through the park, the sun coming up.", "isCorrect": false, "rationale": "This contains two fragments joined by a comma." }, { "text": "I enjoy running through the park, the sun comes up.", "isCorrect": false, "rationale": "This is a comma splice." } ] },
                            { "questionNumber": 15, "question": "Which sentence correctly uses a semicolon?", "answerOptions": [ { "text": "I have a big test tomorrow; I can't go out tonight.", "isCorrect": true, "rationale": "The semicolon correctly joins two closely related independent clauses." }, { "text": "I have a big test tomorrow; so I can't go out tonight.", "isCorrect": false, "rationale": "A semicolon should not be followed by a coordinating conjunction like 'so'. A comma would be used here instead." }, { "text": "Because I have a big test tomorrow; I can't go out tonight.", "isCorrect": false, "rationale": "The first clause is dependent, so it should be followed by a comma, not a semicolon." }, { "text": "I have; a big test tomorrow, I can't go out tonight.", "isCorrect": false, "rationale": "The semicolon is incorrectly placed." } ] }
                        ]
                    },
                    {
                        id: "rla_grammar_punctuation",
                        title: "Punctuation & Mechanics",
                        description: "Proper use of commas, semicolons, apostrophes, and capitalization.",
                        questions: [
                            { "questionNumber": 1, "question": "Choose the correctly punctuated sentence.", "answerOptions": [ { "text": "Please bring a pencil, a notebook and a calculator to the test.", "isCorrect": false, "rationale": "This sentence is missing the optional but standard Oxford comma before 'and'." }, { "text": "Please bring a pencil, a notebook, and a calculator to the test.", "isCorrect": true, "rationale": "Use commas to separate three or more items in a series. The comma before 'and' (the Oxford comma) is standard in formal writing." }, { "text": "Please bring: a pencil, a notebook, and a calculator to the test.", "isCorrect": false, "rationale": "A colon is not needed here as the list flows directly from the verb." }, { "text": "Please bring a pencil a notebook and a calculator to the test.", "isCorrect": false, "rationale": "Commas are required to separate the items in the list." } ] },
                            { "questionNumber": 2, "question": "Which sentence uses an apostrophe correctly to show possession?", "answerOptions": [ { "text": "The dogs leash is hanging on the hook.", "isCorrect": false, "rationale": "This is missing an apostrophe. It should be 'dog's'." }, { "text": "The dogs' leashes are hanging on the hook.", "isCorrect": true, "rationale": "To show possession for a plural noun ending in 's' (dogs), the apostrophe is placed after the 's'." }, { "text": "The dog's are hanging on the hook.", "isCorrect": false, "rationale": "This incorrectly uses an apostrophe; 'dog's' means 'dog is' in this context, which is incorrect." }, { "text": "Its a shame the dog lost its' leash.", "isCorrect": false, "rationale": "'Its'' is not a word. The correct possessive is 'its'." } ] },
                            { "questionNumber": 3, "question": "Choose the correctly capitalized sentence.", "answerOptions": [ { "text": "My favorite book is 'the catcher in the rye'.", "isCorrect": false, "rationale": "All major words in a title should be capitalized." }, { "text": "I am traveling to Paris, france, this summer.", "isCorrect": false, "rationale": "The country 'France' should be capitalized." }, { "text": "She works for the Federal Bureau of Investigation.", "isCorrect": true, "rationale": "The full names of specific government agencies are proper nouns and should be capitalized." }, { "text": "We live in the south, near the gulf of Mexico.", "isCorrect": false, "rationale": "Directions like 'south' are not capitalized unless part of a proper name. 'Gulf of Mexico' is a proper name and should be capitalized." } ] },
                            { "questionNumber": 4, "question": "Which sentence correctly uses a semicolon?", "answerOptions": [ { "text": "The meeting was long; but we accomplished a lot.", "isCorrect": false, "rationale": "A semicolon should not be used before a coordinating conjunction like 'but'. A comma would be correct here." }, { "text": "I have three favorite foods; pizza, tacos, and sushi.", "isCorrect": false, "rationale": "A colon, not a semicolon, should be used to introduce a list." }, { "text": "The weather was perfect; consequently, we decided to have a picnic.", "isCorrect": true, "rationale": "A semicolon is used correctly here to join two independent clauses, with the second clause beginning with a conjunctive adverb ('consequently')." }, { "text": "She wanted to leave; because she was tired.", "isCorrect": false, "rationale": "The second clause is dependent and cannot be joined with a semicolon." } ] },
                            { "questionNumber": 5, "question": "Which sentence uses commas correctly with an introductory phrase?", "answerOptions": [ { "text": "After the movie we went out for ice cream.", "isCorrect": false, "rationale": "A comma is needed after the introductory prepositional phrase." }, { "text": "After the movie, we went out for ice cream.", "isCorrect": true, "rationale": "A comma should be placed after an introductory phrase or clause to separate it from the main clause." }, { "text": "After the movie we, went out for ice cream.", "isCorrect": false, "rationale": "The comma is incorrectly placed." }, { "text": "After, the movie, we went out for ice cream.", "isCorrect": false, "rationale": "The comma is incorrectly placed." } ] },
                            { "questionNumber": 6, "question": "Choose the sentence with the correct use of an apostrophe.", "answerOptions": [ { "text": "Its going to be a beautiful day.", "isCorrect": false, "rationale": "This should be 'It's', the contraction for 'it is'." }, { "text": "The car lost it's front tire.", "isCorrect": false, "rationale": "This should be 'its', the possessive pronoun." }, { "text": "Who's book is this on the table?", "isCorrect": false, "rationale": "This should be 'Whose', the possessive pronoun. 'Who's' means 'who is'." }, { "text": "You're the person I was looking for.", "isCorrect": true, "rationale": "'You're' is the correct contraction for 'you are'." } ] },
                            { "questionNumber": 7, "question": "Which sentence is correctly capitalized?", "answerOptions": [ { "text": "My Uncle, Bob, is a Doctor.", "isCorrect": false, "rationale": "The title 'Doctor' should not be capitalized unless it precedes a name." }, { "text": "We drove North on interstate 95.", "isCorrect": false, "rationale": "Directions are not capitalized unless part of a proper name. 'Interstate 95' is a proper name." }, { "text": "She is taking Algebra II and World History.", "isCorrect": true, "rationale": "Specific course titles are capitalized." }, { "text": "I love the Fall season, it's my favorite.", "isCorrect": false, "rationale": "Seasons are not capitalized." } ] },
                            { "questionNumber": 8, "question": "Which sentence correctly punctuates a non-essential clause?", "answerOptions": [ { "text": "The man who is wearing the red hat is my brother.", "isCorrect": false, "rationale": "The clause 'who is wearing the red hat' is essential to identify the man, so it should not have commas." }, { "text": "My car, which is over ten years old, still runs well.", "isCorrect": true, "rationale": "The clause 'which is over ten years old' is non-essential (extra information), so it is correctly set off by commas." }, { "text": "The book that I am reading is very interesting.", "isCorrect": false, "rationale": "The clause 'that I am reading' is essential and should not have commas." }, { "text": "My brother, who is wearing the red hat is my brother.", "isCorrect": false, "rationale": "This sentence is missing the second comma to close the non-essential clause." } ] },
                            { "questionNumber": 9, "question": "Choose the correctly punctuated sentence.", "answerOptions": [ { "text": "Her favorite activities are: hiking, biking, and swimming.", "isCorrect": false, "rationale": "A colon should not be used after a verb like 'are' when it directly introduces a list." }, { "text": "She said, 'Let's go to the park.'", "isCorrect": true, "rationale": "The comma is correctly placed before the quotation, and the period is correctly placed inside the quotation mark." }, { "text": "He asked 'What time is it?'.", "isCorrect": false, "rationale": "A comma should precede the quote, and the question mark should be inside the quotation mark." }, { "text": "The sign read, 'Stop'!", "isCorrect": false, "rationale": "The exclamation point should be inside the quotation mark." } ] },
                            { "questionNumber": 10, "question": "Which sentence correctly uses an apostrophe for a plural possessive?", "answerOptions": [ { "text": "The childrens' toys were all over the floor.", "isCorrect": false, "rationale": "'Children' is an irregular plural, so its possessive is 'children's'." }, { "text": "The two companies's merger was approved.", "isCorrect": false, "rationale": "The possessive of the plural 'companies' is 'companies'." }, { "text": "All of the students' projects were impressive.", "isCorrect": true, "rationale": "For the plural noun 'students', the possessive is correctly formed by adding an apostrophe after the 's'." }, { "text": "The men's room is on the left.", "isCorrect": false, "rationale": "This is a correct singular possessive, but the question asks for a plural possessive example." } ] },
                            { "questionNumber": 11, "question": "Choose the correctly capitalized title.", "answerOptions": [ { "text": "To Kill A Mockingbird", "isCorrect": false, "rationale": "Articles like 'a' are not capitalized unless they are the first word." }, { "text": "The Catcher In The Rye", "isCorrect": false, "rationale": "Prepositions like 'in' and 'the' are not capitalized unless they are the first or last word." }, { "text": "Of Mice and Men", "isCorrect": true, "rationale": "This follows standard title capitalization rules (capitalize first word, and all major words)." }, { "text": "the great gatsby", "isCorrect": false, "rationale": "All major words should be capitalized." } ] },
                            { "questionNumber": 12, "question": "Which sentence uses a colon correctly?", "answerOptions": [ { "text": "I need to buy: milk, eggs, and bread.", "isCorrect": false, "rationale": "A colon should not be used after a verb like 'buy' when the list flows naturally from it." }, { "text": "She had one goal in mind: to win.", "isCorrect": true, "rationale": "A colon is used correctly here to introduce an explanation or amplification of the preceding independent clause." }, { "text": "He visited: Paris, Rome, and London.", "isCorrect": false, "rationale": "A colon should not be used after a verb like 'visited'." }, { "text": "The ingredients are: flour, sugar, and butter.", "isCorrect": false, "rationale": "A colon should not be used after a linking verb like 'are'." } ] },
                            { "questionNumber": 13, "question": "Which sentence correctly punctuates the date?", "answerOptions": [ { "text": "The event took place on December 7 1941.", "isCorrect": false, "rationale": "A comma is needed between the day and the year." }, { "text": "On December 7, 1941, the event took place.", "isCorrect": true, "rationale": "Commas are used to separate the day from the year, and the year from the rest of the sentence when the date is used as an introductory phrase." }, { "text": "The event took place on December, 7, 1941.", "isCorrect": false, "rationale": "A comma is not used between the month and the day." }, { "text": "The event took place on, December 7 1941.", "isCorrect": false, "rationale": "The comma is incorrectly placed." } ] },
                            { "questionNumber": 14, "question": "Which of the following is correctly capitalized?", "answerOptions": [ { "text": "queen Elizabeth II", "isCorrect": false }, { "text": "The President of the united states", "isCorrect": false }, { "text": "World War II", "isCorrect": true }, { "text": "The industrial revolution", "isCorrect": false } ] },
                            { "questionNumber": 15, "question": "What is the correct way to write the possessive form of 'Mr. Jones'?", "answerOptions": [ { "text": "Mr. Jone's", "isCorrect": false }, { "text": "Mr. Jones'", "isCorrect": true }, { "text": "Mr. Jones's", "isCorrect": false, "rationale": "While adding 's is sometimes acceptable, the standard and simpler rule for singular nouns ending in 's' is to just add an apostrophe." }, { "text": "Mr. Joneses", "isCorrect": false } ] }
                        ]
                    },
                    {
                        id: "rla_grammar_usage",
                        title: "Grammar & Usage",
                        description: "Subject-verb agreement, pronoun usage, and correct word choice.",
                        questions: [
                            { "questionNumber": 1, "question": "Choose the correct verb to complete the sentence: 'Each of the students ___ responsible for their own project.'", "answerOptions": [ { "text": "are", "isCorrect": false, "rationale": "The subject is 'Each,' which is a singular pronoun, so it requires a singular verb." }, { "text": "is", "isCorrect": true, "rationale": "The singular subject 'Each' requires the singular verb 'is'." }, { "text": "were", "isCorrect": false, "rationale": "'Were' is a plural verb." }, { "text": "have been", "isCorrect": false, "rationale": "'Have' is a plural verb." } ] },
                            { "questionNumber": 2, "question": "Choose the correct pronoun to complete the sentence: 'The manager spoke to my colleague and ___ about the new project.'", "answerOptions": [ { "text": "I", "isCorrect": false, "rationale": "'I' is a subject pronoun. The pronoun here is the object of the preposition 'to,' so the object pronoun 'me' is needed." }, { "text": "myself", "isCorrect": false, "rationale": "'Myself' is a reflexive pronoun and is not appropriate here." }, { "text": "me", "isCorrect": true, "rationale": "As the object of the preposition 'to,' the objective case pronoun 'me' is correct." }, { "text": "mine", "isCorrect": false, "rationale": "'Mine' is a possessive pronoun." } ] },
                            { "questionNumber": 3, "question": "Which sentence demonstrates correct subject-verb agreement?", "answerOptions": [ { "text": "The team of players are celebrating their victory.", "isCorrect": false, "rationale": "The subject is 'team' (a singular collective noun), so the verb should be 'is celebrating'." }, { "text": "Neither the cat nor the dogs wants to go outside.", "isCorrect": false, "rationale": "When subjects are joined by 'nor,' the verb agrees with the closer subject ('dogs'), so the verb should be 'want'." }, { "text": "The news from the headquarters is encouraging.", "isCorrect": true, "rationale": "'News' is a singular noun and requires the singular verb 'is'." }, { "text": "There is several reasons for the delay.", "isCorrect": false, "rationale": "The subject is 'reasons' (plural), which follows the verb, so the verb should be 'are'." } ] },
                            { "questionNumber": 4, "question": "Choose the correct word to complete the sentence: 'The ___ of the new policy on employee morale was significant.'", "answerOptions": [ { "text": "affect", "isCorrect": false, "rationale": "'Affect' is usually a verb meaning 'to influence'." }, { "text": "effect", "isCorrect": true, "rationale": "'Effect' is a noun meaning 'a result' or 'consequence'." }, { "text": "affects", "isCorrect": false, "rationale": "This is the third-person singular form of the verb 'affect'." }, { "text": "effects", "isCorrect": false, "rationale": "While 'effects' is the plural noun, the sentence requires the singular 'effect' to match 'was'." } ] },
                            { "questionNumber": 5, "question": "Which pronoun correctly completes the sentence? 'If a student wants to succeed, ___ must study diligently.'", "answerOptions": [ { "text": "they", "isCorrect": false, "rationale": "While often used in informal speech, 'they' is a plural pronoun. The singular 'he or she' is grammatically correct for the singular subject 'a student'." }, { "text": "you", "isCorrect": false, "rationale": "This incorrectly shifts the point of view to the second person." }, { "text": "he or she", "isCorrect": true, "rationale": "The singular antecedent 'a student' requires a singular pronoun. 'He or she' is the correct gender-neutral singular form." }, { "text": "we", "isCorrect": false, "rationale": "This incorrectly shifts the point of view to the first person." } ] },
                            { "questionNumber": 6, "question": "Choose the correct verb: 'The committee ___ on the new budget proposal.'", "answerOptions": [ { "text": "disagrees", "isCorrect": true, "rationale": "A collective noun like 'committee' can be treated as singular when it acts as a single unit. 'Disagrees' is the singular verb." }, { "text": "disagree", "isCorrect": false, "rationale": "While 'disagree' could be used if the members are acting individually, 'disagrees' is more common when the committee is seen as a single entity." }, { "text": "are disagreeing", "isCorrect": false, "rationale": "This uses a plural auxiliary verb." }, { "text": "have disagreed", "isCorrect": false, "rationale": "This uses a plural auxiliary verb." } ] },
                            { "questionNumber": 7, "question": "Which sentence uses the correct word choice?", "answerOptions": [ { "text": "I would like less cookies, please.", "isCorrect": false, "rationale": "'Less' is used for uncountable nouns (like 'water'). 'Fewer' should be used for countable nouns (like 'cookies')." }, { "text": "He ran farther than anyone else in the race.", "isCorrect": true, "rationale": "'Farther' refers to physical distance, while 'further' refers to a metaphorical or figurative distance. This usage is correct." }, { "text": "She feels badder about the mistake than I do.", "isCorrect": false, "rationale": "'Badder' is not a word. The correct comparative is 'worse'." }, { "text": "Can I borrow your pen?", "isCorrect": false, "rationale": "In formal English, 'May I' is used to ask for permission, while 'Can I' asks about ability." } ] },
                            { "questionNumber": 8, "question": "Choose the correct pronoun: 'The prize was awarded to the person ___ sold the most tickets.'", "answerOptions": [ { "text": "whom", "isCorrect": false, "rationale": "'Whom' is an object pronoun. The pronoun here is the subject of the verb 'sold,' so 'who' is correct." }, { "text": "who", "isCorrect": true, "rationale": "The pronoun is the subject of the verb 'sold' ('who sold the most tickets'), so the subject pronoun 'who' is correct." }, { "text": "whose", "isCorrect": false, "rationale": "'Whose' is a possessive pronoun." }, { "text": "which", "isCorrect": false, "rationale": "'Which' is used for things, not people." } ] },
                            { "questionNumber": 9, "question": "Which sentence has the correct subject-verb agreement?", "answerOptions": [ { "text": "One of my friends are coming over.", "isCorrect": false, "rationale": "The subject is 'One,' which is singular. The verb should be 'is'." }, { "text": "The data from the study is unreliable.", "isCorrect": false, "rationale": "'Data' is technically a plural noun (the singular is 'datum'), so the verb should be 'are'. However, 'is' is becoming common in informal use." }, { "text": "The man with all the dogs live on my street.", "isCorrect": false, "rationale": "The subject is 'man' (singular), not 'dogs'. The verb should be 'lives'." }, { "text": "A number of employees were absent yesterday.", "isCorrect": true, "rationale": "When 'a number of' is used, it means 'several' and takes a plural verb. 'The number of' takes a singular verb." } ] },
                            { "questionNumber": 10, "question": "Choose the correct word: 'Please don't ___ with my work.'", "answerOptions": [ { "text": "meddle", "isCorrect": true, "rationale": "'Meddle' means to interfere in something that is not one's concern." }, { "text": "metal", "isCorrect": false, "rationale": "'Metal' is a type of material." }, { "text": "medal", "isCorrect": false, "rationale": "'Medal' is an award." }, { "text": "mettle", "isCorrect": false, "rationale": "'Mettle' refers to a person's spirit or resilience." } ] },
                            { "questionNumber": 11, "question": "Which sentence uses pronouns correctly?", "answerOptions": [ { "text": "Me and my friends went to the movies.", "isCorrect": false, "rationale": "'Me' is an object pronoun. As part of the subject, it should be 'My friends and I'." }, { "text": "Give the report to either John or I.", "isCorrect": false, "rationale": "The pronoun is the object of the preposition 'to,' so it should be 'me'." }, { "text": "Her and her sister look just alike.", "isCorrect": false, "rationale": "'Her' is an object pronoun. As a subject, it should be 'She'." }, { "text": "Between you and me, I think the plan will work.", "isCorrect": true, "rationale": "'Between' is a preposition, so it requires the object pronouns 'you' and 'me'." } ] },
                            { "questionNumber": 12, "question": "Choose the correct verb: 'Macaroni and cheese ___ my favorite meal.'", "answerOptions": [ { "text": "is", "isCorrect": true, "rationale": "Although it has two parts, 'macaroni and cheese' is treated as a single dish and therefore takes a singular verb." }, { "text": "are", "isCorrect": false, "rationale": "'Are' is a plural verb." }, { "text": "were", "isCorrect": false, "rationale": "'Were' is a plural verb." }, { "text": "have", "isCorrect": false, "rationale": "'Have' is a plural verb." } ] },
                            { "questionNumber": 13, "question": "Choose the correct word usage: 'The new law will ___ the entire community.'", "answerOptions": [ { "text": "effect", "isCorrect": false, "rationale": "'Effect' is usually a noun." }, { "text": "affect", "isCorrect": true, "rationale": "'Affect' is a verb meaning 'to influence' or 'to have an impact on'." }, { "text": "except", "isCorrect": false, "rationale": "'Except' means 'not including'." }, { "text": "accept", "isCorrect": false, "rationale": "'Accept' means 'to receive'." } ] },
                            { "questionNumber": 14, "question": "Which sentence is grammatically correct?", "answerOptions": [ { "text": "Them books belong on the top shelf.", "isCorrect": false, "rationale": "'Them' is an object pronoun and cannot be used as an adjective. It should be 'Those'." }, { "text": "He did good on the test.", "isCorrect": false, "rationale": "'Good' is an adjective. The adverb 'well' should be used to modify the verb 'did'." }, { "text": "She feels well enough to return to work.", "isCorrect": true, "rationale": "'Well' is correctly used here as an adverb describing how she feels in terms of health." }, { "text": "I could of gone with you.", "isCorrect": false, "rationale": "This is a common error. The correct phrasing is 'could have' or 'could've'." } ] },
                        { "questionNumber": 15, "calculator": false, "question": "Expand the expression: $(x - 5)^2$", "answerOptions": [ { "text": "$x^2 - 10x + 25$", "isCorrect": true, "rationale": "Using the formula $(a-b)^2 = a^2 - 2ab + b^2$, we get $x^2 - 2(x)(5) + 5^2 = x^2 - 10x + 25$." }, { "text": "$x^2 - 25$", "isCorrect": false, "rationale": "This is a common mistake. It forgets the middle term from the expansion." }, { "text": "$x^2 + 10x + 25$", "isCorrect": false, "rationale": "The middle term should be negative." }, { "text": "$x^2 + 25$", "isCorrect": false, "rationale": "This incorrectly squares each term and ignores the middle term." } ] },
                        { "questionNumber": 16, "calculator": false, "question": "What is the result of $(3x^2 + 2x - 1) + (x^2 - 5x + 7)$?", "answerOptions": [ { "text": "$4x^2 - 3x + 6$", "isCorrect": true, "rationale": "Combine like terms: $(3x^2 + x^2) + (2x - 5x) + (-1 + 7) = 4x^2 - 3x + 6$." }, { "text": "$3x^2 - 3x + 6$", "isCorrect": false, "rationale": "Incorrectly combined the $x^2$ terms." }, { "text": "$4x^2 + 7x + 8$", "isCorrect": false, "rationale": "Incorrectly calculated the sum of the coefficients for x and the constant terms." }, { "text": "$4x^4 - 3x^2 + 6$", "isCorrect": false, "rationale": "Incorrectly added the exponents of the variables." } ] },
                        { "questionNumber": 17, "calculator": false, "question": "Factor the expression: $x^2 - 9$", "answerOptions": [ { "text": "$(x - 3)(x + 3)$", "isCorrect": true, "rationale": "This is a difference of squares, $a^2 - b^2$, which factors to $(a - b)(a + b)$." }, { "text": "$(x - 3)(x - 3)$", "isCorrect": false, "rationale": "This would expand to $x^2 - 6x + 9$." }, { "text": "$(x + 3)(x + 3)$", "isCorrect": false, "rationale": "This would expand to $x^2 + 6x + 9$." }, { "text": "Cannot be factored", "isCorrect": false, "rationale": "This expression can be factored." } ] },
                        { "questionNumber": 15, "calculator": false, "question": "Solve the inequality: $2x + 5 > 15$", "answerOptions": [ { "text": "$x > 5$", "isCorrect": true, "rationale": "Subtract 5 from both sides to get $2x > 10$. Then divide by 2 to get $x > 5$." }, { "text": "$x < 5$", "isCorrect": false, "rationale": "The inequality sign does not flip unless you multiply or divide by a negative number." }, { "text": "$x > 10$", "isCorrect": false, "rationale": "This is the result before dividing by 2." }, { "text": "$x = 5$", "isCorrect": false, "rationale": "This is an equation, not an inequality." } ] },
                        { "questionNumber": 16, "calculator": false, "question": "If $3(y - 2) = 9$, what is the value of y?", "answerOptions": [ { "text": "5", "isCorrect": true, "rationale": "Divide both sides by 3 to get $y - 2 = 3$. Add 2 to both sides to get $y = 5$." }, { "text": "3", "isCorrect": false, "rationale": "This is the result of the first step, not the final answer." }, { "text": "4", "isCorrect": false, "rationale": "Incorrect calculation. $3(4-2) = 6$, not 9." }, { "text": "$\\frac{11}{3}$", "isCorrect": false, "rationale": "This would be the result if the equation was $3y-2=9$." } ] },
                        { "questionNumber": 17, "calculator": false, "question": "Solve for x: $\\frac{x}{4} + 2 = 5$", "answerOptions": [ { "text": "12", "isCorrect": true, "rationale": "Subtract 2 from both sides to get $\\frac{x}{4} = 3$. Multiply both sides by 4 to get $x = 12$." }, { "text": "3", "isCorrect": false, "rationale": "This is the result before multiplying by 4." }, { "text": "28", "isCorrect": false, "rationale": "Incorrectly added 2 to 5 and then multiplied by 4." }, { "text": "8", "isCorrect": false, "rationale": "Incorrect calculation." } ] },
                        { "questionNumber": 18, "calculator": true, "question": "Which of the following is a solution to the inequality $5 - 2x \\leq 1$?", "answerOptions": [ { "text": "1", "isCorrect": false, "rationale": "If x=1, $5 - 2(1) = 3$, and $3$ is not less than or equal to 1." }, { "text": "0", "isCorrect": false, "rationale": "If x=0, $5 - 2(0) = 5$, and $5$ is not less than or equal to 1." }, { "text": "2", "isCorrect": true, "rationale": "Subtract 5 from both sides: $-2x \\leq -4$. Divide by -2 and flip the inequality sign: $x \\geq 2$. The number 2 is a solution." }, { "text": "-1", "isCorrect": false, "rationale": "If x=-1, $5 - 2(-1) = 7$, and $7$ is not less than or equal to 1." } ] }
                        ]
                    }
                ]
            },
        }
    },
    "Simulations": {
        icon: "BeakerIcon",
        categories: {
            "Interactive Labs": {
                description: "Engage with hands-on simulations to explore concepts.",
                topics: [
                    {
                      id: "sim_life",
                      title: "The Game of Life",
                      description: "A cellular automaton devised by the British mathematician John Horton Conway in 1970.",
                      type: "simulation"
                    },
                    {
                      id: "sim_graphing_tool",
                      title: "Interactive Graphing Tool",
                      description: "Plot linear equations and explore the coordinate plane.",
                      type: "graphing_tool"
                    }
                ]
            }
        }
    }
};

const getTopicById = (subjectName, topicId) => {
    if (!subjectName || !topicId) {
        return null;
    }
    const subject = AppData?.[subjectName];
    if (!subject || !subject.categories) {
        return null;
    }
    for (const category of Object.values(subject.categories)) {
        const topics = Array.isArray(category?.topics) ? category.topics : [];
        const match = topics.find((candidate) => candidate && candidate.id === topicId);
        if (match) {
            return match;
        }
    }
    return null;
};

const resolveQuizQuestions = (subjectName, topic, quiz) => {
    if (quiz && Array.isArray(quiz.questions) && quiz.questions.length) {
        return quiz.questions;
    }
    if (quiz?.questionSourceTopicId) {
        const sourceTopic = getTopicById(subjectName, quiz.questionSourceTopicId);
        if (sourceTopic && Array.isArray(sourceTopic.questions) && sourceTopic.questions.length) {
            return sourceTopic.questions;
        }
    }
    if (topic && Array.isArray(topic.questions) && topic.questions.length) {
        return topic.questions;
    }
    return [];
};

const quizHasAvailableQuestions = (subjectName, topic, quiz) => {
    if (!quiz) {
        return false;
    }
    if (Array.isArray(quiz.questions) && quiz.questions.length) {
        return true;
    }
    if (quiz.questionSourceTopicId) {
        const sourceTopic = getTopicById(subjectName, quiz.questionSourceTopicId);
        if (sourceTopic && Array.isArray(sourceTopic.questions) && sourceTopic.questions.length) {
            return true;
        }
    }
    return Array.isArray(topic?.questions) && topic.questions.length > 0;
};

const integrateExpandedQuizData = (baseData, expandedData) => {
    if (!expandedData || typeof expandedData !== 'object') {
        return baseData;
    }

    Object.entries(expandedData).forEach(([subjectName, expandedSubject]) => {
        if (!expandedSubject || typeof expandedSubject !== 'object') {
            return;
        }

        if (!baseData[subjectName]) {
            baseData[subjectName] = JSON.parse(JSON.stringify(expandedSubject));
            return;
        }

        const baseSubject = baseData[subjectName];
        if (!baseSubject.categories) {
            baseSubject.categories = {};
        }
        if (expandedSubject.icon && !baseSubject.icon) {
            baseSubject.icon = expandedSubject.icon;
        }

        Object.entries(expandedSubject.categories || {}).forEach(([categoryName, expandedCategory]) => {
            if (!expandedCategory || typeof expandedCategory !== 'object') {
                return;
            }

            if (!baseSubject.categories[categoryName]) {
                baseSubject.categories[categoryName] = JSON.parse(JSON.stringify(expandedCategory));
                return;
            }

            const baseCategory = baseSubject.categories[categoryName];
            if (expandedCategory.description && !baseCategory.description) {
                baseCategory.description = expandedCategory.description;
            }

            if (!Array.isArray(baseCategory.topics)) {
                baseCategory.topics = [];
            }
            const topicList = baseCategory.topics;

            (expandedCategory.topics || []).forEach((expandedTopic) => {
                if (!expandedTopic || typeof expandedTopic !== 'object') {
                    return;
                }

                let existingTopic = topicList.find((topic) => topic.id === expandedTopic.id || topic.title === expandedTopic.title);
                if (!existingTopic) {
                    existingTopic = JSON.parse(JSON.stringify(expandedTopic));
                    topicList.push(existingTopic);
                } else {
                    if (expandedTopic.description && !existingTopic.description) {
                        existingTopic.description = expandedTopic.description;
                    }
                }

                if (Array.isArray(expandedTopic.quizzes) && expandedTopic.quizzes.length) {
                    existingTopic.quizzes = expandedTopic.quizzes.map((quiz) => ({
                        ...quiz,
                        questions: Array.isArray(quiz.questions) ? quiz.questions : []
                    }));

                    if (!Array.isArray(existingTopic.questions) || !existingTopic.questions.length) {
                        const firstQuiz = existingTopic.quizzes[0];
                        if (firstQuiz && Array.isArray(firstQuiz.questions)) {
                            existingTopic.questions = [...firstQuiz.questions];
                        }
                    }
                }
            });
        });
    });

    return baseData;
};

const expandedQuizDataSource = (typeof window !== 'undefined' && window.ExpandedQuizData)
    ? window.ExpandedQuizData
    : (typeof globalThis !== 'undefined' ? globalThis.ExpandedQuizData : null);
if (expandedQuizDataSource) {
    integrateExpandedQuizData(AppData, expandedQuizDataSource);
}

function sanitizeCodeSegment(value, fallback = '') {
    if (typeof value !== 'string') {
        return fallback;
    }
    const trimmed = value.trim();
    if (!trimmed) {
        return fallback;
    }
    const normalized = trimmed.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');
    return normalized || fallback;
}

function assignPremadeQuizCodes(data) {
    const catalog = {};
    if (!data || typeof data !== 'object') {
        return catalog;
    }

    Object.entries(data).forEach(([subjectName, subject]) => {
        if (!subject || typeof subject !== 'object') {
            return;
        }

        const subjectSlug = sanitizeCodeSegment(subjectName, 'subject');
        if (!catalog[subjectName]) {
            catalog[subjectName] = [];
        }

        Object.entries(subject.categories || {}).forEach(([categoryName, category], categoryIndex) => {
            if (!category || typeof category !== 'object') {
                return;
            }

            const categorySlug = sanitizeCodeSegment(categoryName, `cat-${categoryIndex + 1}`);
            const topics = Array.isArray(category.topics) ? category.topics : [];

            topics.forEach((topic, topicIndex) => {
                if (!topic || typeof topic !== 'object') {
                    return;
                }

                const topicSlugFromId = topic.id ? sanitizeCodeSegment(topic.id) : '';
                const topicSlug = sanitizeCodeSegment(topic.title, topicSlugFromId || `topic-${topicIndex + 1}`);
                const baseSegment = topicSlugFromId || `${categorySlug}-${topicSlug}`;

                const registerQuiz = (target, code, title) => {
                    if (!code) {
                        return;
                    }
                    if (!catalog[subjectName].some((entry) => entry.code === code)) {
                        catalog[subjectName].push({ code, title });
                    }
                    if (target && typeof target === 'object') {
                        target.quizCode = code;
                    }
                };

                if (Array.isArray(topic.quizzes) && topic.quizzes.length) {
                    topic.quizzes.forEach((quiz, quizIndex) => {
                        if (!quiz || typeof quiz !== 'object') {
                            return;
                        }

                        const quizIdSegment = sanitizeCodeSegment(quiz.quizId || '', '');
                        const labelSegment = sanitizeCodeSegment(quiz.label || '', '');
                        const setSegment = quizIdSegment || labelSegment || `set-${quizIndex + 1}`;
                        const code = [subjectSlug, baseSegment || topicSlug, setSegment].filter(Boolean).join('__');
                        const quizTitle = quiz.title || `${topic.title || 'Quiz'} — ${quiz.label || `Quiz ${String.fromCharCode(65 + quizIndex)}`}`;
                        registerQuiz(quiz, code, quizTitle);
                    });
                } else if (Array.isArray(topic.questions) && topic.questions.length) {
                    const code = [subjectSlug, baseSegment || topicSlug || `topic-${topicIndex + 1}`].filter(Boolean).join('__');
                    const quizTitle = topic.title || `Topic ${topicIndex + 1}`;
                    registerQuiz(topic, code, quizTitle);
                }
            });
        });
    });

    return catalog;
}

PREMADE_QUIZ_CATALOG = assignPremadeQuizCodes(AppData);

// --- ICON COMPONENTS ---
const BookOpenIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" /></svg>;
const GlobeIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2h1a2 2 0 002-2v-1a2 2 0 012-2h1.945M7.737 16.963l.44-2.22a2 2 0 011.98-1.633h1.69a2 2 0 011.98 1.634l.44 2.219m-6.47 4.953h6.47M12 3a9 9 0 110 18 9 9 0 010-18z" /></svg>;
const BeakerIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547a2 2 0 00-.547 1.806l.477 2.387a6 6 0 00.517 3.86l.158.318a6 6 0 00.517 3.86l2.387.477a2 2 0 001.806-.547a2 2 0 00.547-1.806l-.477-2.387a6 6 0 00-.517-3.86l-.158-.318a6 6 0 01-.517-3.86l2.387-.477a2 2 0 011.806.547a2 2 0 01.547 1.806l-.477 2.387a6 6 0 01-.517 3.86l-.158-.318a6 6 0 01-.517 3.86l2.387.477a2 2 0 001.806-.547a2 2 0 00.547-1.806l-.477-2.387a6 6 0 00-.517-3.86l-.158-.318a6 6 0 00-.517-3.86z" /></svg>;
const CalculatorIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m-3 10v-6m-3 3h6m-6 4h6m2-12H7a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2z" /></svg>;
const ChartBarIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" /></svg>;
const VariableIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.874 4.874l14.252 14.252m0-14.252L4.874 19.126M12 4.5v15" /></svg>;
const ShapesIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12l-9-9-9 9m18 0l-9 9-9-9" /></svg>;
const UserIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" /></svg>;
const ArrowLeftIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" /></svg>;
const HomeIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" /></svg>;
const SparklesIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.293 2.293a1 1 0 010 1.414L11 15l-4 6h12l-4-6-1.293-1.293a1 1 0 010-1.414L15 5m0 0l2.293-2.293a1 1 0 011.414 0L21 5m-6 12v4m2-2h-4" /></svg>;

// --- Helper Functions ---
const shuffleArray = (array) => {
    if (!Array.isArray(array)) {
        console.error("shuffleArray received a non-array value:", array);
        return [];
    }
    let newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
};

const VALID_FONT_SIZES = new Set(['sm', 'md', 'lg', 'xl']);
const VALID_THEMES = new Set(['light', 'dark']);
const DEFAULT_PREFERENCES = Object.freeze({ fontSize: 'md', theme: 'light' });

const normalizePreferences = (prefs = {}) => ({
    fontSize: VALID_FONT_SIZES.has(prefs.fontSize) ? prefs.fontSize : DEFAULT_PREFERENCES.fontSize,
    theme: VALID_THEMES.has(prefs.theme) ? prefs.theme : DEFAULT_PREFERENCES.theme,
});

const SUBJECT_NAMES = ['Math', 'RLA', 'Science', 'Social Studies'];

function createEmptySubjectEdits() {
    return {
        Math: { testDate: '', testLocation: '', passed: false },
        RLA: { testDate: '', testLocation: '', passed: false },
        Science: { testDate: '', testLocation: '', passed: false },
        'Social Studies': { testDate: '', testLocation: '', passed: false },
    };
}

function buildSubjectEditsFromPlan(plan) {
    const planFromServer = {};
    if (Array.isArray(plan)) {
        for (const row of plan) {
            if (!row || !row.subject) {
                continue;
            }
            planFromServer[row.subject] = {
                testDate: row.testDate || '',
                testLocation: row.testLocation || '',
                passed: !!row.passed,
            };
        }
    }
    const base = createEmptySubjectEdits();
    const merged = {
        ...base,
        Math: {
            ...base.Math,
            ...planFromServer.Math,
        },
        RLA: {
            ...base.RLA,
            ...planFromServer.RLA,
        },
        Science: {
            ...base.Science,
            ...planFromServer.Science,
        },
        'Social Studies': {
            ...base['Social Studies'],
            ...planFromServer['Social Studies'],
        },
    };

    for (const subject of Object.keys(planFromServer)) {
        if (!SUBJECT_NAMES.includes(subject)) {
            merged[subject] = {
                testDate: planFromServer[subject].testDate || '',
                testLocation: planFromServer[subject].testLocation || '',
                passed: !!planFromServer[subject].passed,
            };
        }
    }

    return merged;
}

async function fetchJSON(url, options = {}) {
    const { headers, ...rest } = options || {};
    const finalHeaders = headers ? { ...headers } : undefined;
    const response = await fetch(url, {
        credentials: 'include',
        ...rest,
        headers: finalHeaders,
    });

    if (!response.ok) {
        let message = `Request failed (${response.status})`;
        try {
            const text = await response.text();
            message = text || message;
        } catch (error) {
            // ignore parse failure
        }
        throw new Error(message);
    }

    const contentType = response.headers.get('content-type') || '';
    if (contentType.includes('application/json')) {
        return response.json();
    }
    return null;
}

// --- App Structure Components ---
function AppHeader({ currentUser, onLogout, onShowHome, onShowProfile, onShowSettings, activePanel, theme, onToggleTheme }) {
    const displayName = currentUser?.name || currentUser?.email || 'Learner';
    const initial = displayName ? displayName.trim().charAt(0).toUpperCase() : 'U';
    const isProfileActive = activePanel === 'profile';
    const isSettingsActive = activePanel === 'settings';
    const isDark = theme === 'dark';

    return (
        <header className="fixed top-0 left-0 right-0 z-40 bg-white/80 dark:bg-slate-900/70 backdrop-blur-md border-b border-slate-200 dark:border-slate-700 shadow-sm">
            <div className="max-w-6xl mx-auto flex items-center gap-4 justify-between px-4 sm:px-6 py-3">
                <div className="flex items-center gap-3">
                    <button
                        type="button"
                        onClick={onShowHome}
                        className="text-left text-base sm:text-lg font-semibold text-slate-800 dark:text-slate-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-slate-900 rounded-lg px-2"
                    >
                        Mr. Smith's Learning Canvas
                    </button>
                    <nav className="hidden md:flex items-center gap-4 text-xs sm:text-sm font-medium text-slate-700 dark:text-slate-300">
                        <button onClick={onShowHome} className="hover:text-sky-600 dark:hover:text-sky-400 transition" type="button">Dashboard</button>
                        <a className="hover:text-sky-600 dark:hover:text-sky-400 transition" href="#quizzes">Quizzes</a>
                        <a className="hover:text-sky-600 dark:hover:text-sky-400 transition" href="#progress">Progress</a>
                    </nav>
                </div>
                <div className="flex items-center gap-4">
                    <button
                        type="button"
                        onClick={onToggleTheme}
                        aria-label="Toggle color mode"
                        aria-pressed={isDark}
                        className="relative inline-flex h-10 w-10 items-center justify-center rounded-full border border-slate-200 bg-white/70 text-slate-700 shadow-sm transition hover:bg-slate-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2 dark:border-slate-600 dark:bg-slate-800/80 dark:text-slate-200 dark:hover:bg-slate-700/80"
                    >
                        {isDark ? (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" role="img" aria-hidden="true">
                                <path d="M17.293 13.293A8 8 0 016.707 2.707 6 6 0 1017.293 13.293z" />
                            </svg>
                        ) : (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" role="img" aria-hidden="true">
                                <path d="M10 3a1 1 0 011 1v1a1 1 0 11-2 0V4a1 1 0 011-1zm4.22 1.78a1 1 0 011.415 1.414l-.708.708a1 1 0 11-1.414-1.414l.707-.708zM17 9a1 1 0 110 2h-1a1 1 0 110-2h1zm-2.072 5.657a1 1 0 011.414 1.414l-.707.707a1 1 0 11-1.415-1.414l.708-.707zM11 16a1 1 0 11-2 0v-1a1 1 0 112 0v1zm-5.657-.343a1 1 0 10-1.414-1.414l-.707.707a1 1 0 001.414 1.414l.707-.707zM4 9a1 1 0 100 2H3a1 1 0 100-2h1zm2.343-3.657a1 1 0 10-1.414-1.414l-.707.707A1 1 0 105.636 6.05l.707-.707z" />
                                <path d="M10 5a5 5 0 100 10A5 5 0 0010 5z" />
                            </svg>
                        )}
                    </button>
                    {currentUser && (
                        <div className="flex items-center gap-4">
                            <div className="flex items-center gap-2">
                                {currentUser.picture ? (
                                    <img src={currentUser.picture} alt="User avatar" className="w-9 h-9 rounded-full object-cover shadow" />
                                ) : (
                                    <div className="w-9 h-9 rounded-full bg-sky-600 text-white flex items-center justify-center font-semibold shadow">
                                    {initial}
                                </div>
                            )}
                            <div className="flex flex-col leading-tight">
                                <span className="text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400">Welcome</span>
                                <span className="text-sm font-semibold text-slate-700 dark:text-slate-200 truncate max-w-[10rem]">
                                    {currentUser.name || 'Learner'}
                                </span>
                            </div>
                        </div>
                        <div className="flex items-center gap-2">
                            <button
                                type="button"
                                id="btnProfile"
                                onClick={onShowProfile}
                                className={`px-3 py-2 text-xs sm:text-sm font-semibold rounded-lg border transition ${isProfileActive ? 'bg-sky-500 text-white border-transparent' : 'text-sky-700 dark:text-sky-300 border-sky-200/70 dark:border-slate-600 hover:bg-sky-50 dark:hover:bg-slate-800/70'}`}
                                aria-controls="profileView"
                                aria-expanded={isProfileActive}
                            >
                                Profile
                            </button>
                            <button
                                type="button"
                                id="btnSettings"
                                onClick={onShowSettings}
                                className={`px-3 py-2 text-xs sm:text-sm font-semibold rounded-lg border transition ${isSettingsActive ? 'bg-sky-500 text-white border-transparent' : 'text-sky-700 dark:text-sky-300 border-sky-200/70 dark:border-slate-600 hover:bg-sky-50 dark:hover:bg-slate-800/70'}`}
                                aria-controls="settingsView"
                                aria-expanded={isSettingsActive}
                            >
                                Settings
                            </button>
                            <button
                                type="button"
                                onClick={onLogout}
                                className="px-3 py-2 text-xs sm:text-sm font-semibold text-rose-600 hover:text-rose-500 dark:text-rose-300 dark:hover:text-rose-200 transition"
                            >
                                Log Out
                            </button>
                        </div>
                        </div>
                    )}
                </div>
            </div>
        </header>
    );
}

function NamePromptModal({ user, onSave, onDismiss }) {
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');

    useEffect(() => {
        if (user && user.name) {
            const nameParts = user.name.split(' ');
            setFirstName(nameParts[0] || '');
            setLastName(nameParts.slice(1).join(' ') || '');
        }
    }, [user]);

    const handleSave = async () => {
        if (firstName.trim() && lastName.trim()) {
            try {
                await onSave(firstName.trim(), lastName.trim());
            } catch (error) {
                console.error('Failed to save name from modal:', error);
                alert('Unable to save your name right now. Please try again.');
            }
        } else {
            alert('Please enter both a first and last name.');
        }
    };

    return (
        <div
            className="fixed inset-0 z-50 flex h-full w-full items-center justify-center"
            role="dialog"
            aria-modal="true"
            style={{ backgroundColor: 'var(--modal-overlay)' }}
        >
            <div
                className="relative w-11/12 max-w-md rounded-lg p-8 shadow-2xl"
                style={{ backgroundColor: 'var(--modal-surface)', color: 'var(--modal-text)', border: `1px solid var(--modal-border)` }}
            >
                {onDismiss && (
                    <button
                        type="button"
                        onClick={onDismiss}
                        className="absolute right-4 top-4 rounded-full focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2"
                        style={{ color: 'var(--text-secondary)' }}
                        aria-label="Close name prompt"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5">
                            <path
                                fillRule="evenodd"
                                d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                                clipRule="evenodd"
                            />
                        </svg>
                    </button>
                )}
                <h2 className="mb-4 text-2xl font-bold" style={{ color: 'var(--text-primary)' }}>Welcome! Let's set up your name.</h2>
                <p className="mb-6" style={{ color: 'var(--text-secondary)' }}>Please confirm your name below. This will be used to personalize your experience.</p>
                <div className="space-y-4">
                    <div>
                        <label htmlFor="firstName" className="block text-sm font-medium" style={{ color: 'var(--text-secondary)' }}>First Name</label>
                        <input
                            type="text"
                            id="firstName"
                            value={firstName}
                            onChange={(e) => setFirstName(e.target.value)}
                            className="mt-1 block w-full rounded-md px-3 py-2 shadow-sm focus:outline-none"
                            style={{
                                backgroundColor: 'var(--bg-surface)',
                                border: `1px solid var(--border-subtle)`,
                                color: 'var(--text-primary)',
                            }}
                        />
                    </div>
                    <div>
                        <label htmlFor="lastName" className="block text-sm font-medium" style={{ color: 'var(--text-secondary)' }}>Last Name</label>
                        <input
                            type="text"
                            id="lastName"
                            value={lastName}
                            onChange={(e) => setLastName(e.target.value)}
                            className="mt-1 block w-full rounded-md px-3 py-2 shadow-sm focus:outline-none"
                            style={{
                                backgroundColor: 'var(--bg-surface)',
                                border: `1px solid var(--border-subtle)`,
                                color: 'var(--text-primary)',
                            }}
                        />
                    </div>
                </div>
                <div className="mt-8 space-y-3">
                    <button
                        onClick={handleSave}
                        className="w-full rounded-lg px-6 py-3 font-bold transition"
                        data-role="primary"
                        style={{ backgroundColor: 'var(--accent)', color: 'var(--accent-text)', borderColor: 'var(--accent)' }}
                    >
                        Save Name
                    </button>
                    {onDismiss && (
                        <button
                            type="button"
                            onClick={onDismiss}
                            className="w-full rounded-lg px-6 py-3 font-semibold transition"
                            data-role="secondary"
                            style={{ color: 'var(--text-secondary)', borderColor: 'var(--border-subtle)' }}
                        >
                            Skip for now
                        </button>
                    )}
                </div>
            </div>
        </div>
    );
}

// --- Main App Component ---
function App({ externalTheme, onThemeChange }) {
    const SMITHING_PROMPTS = [
        "Heating the forge...",
        "The smith is at the anvil...",
        "Hammering out the questions...",
        "Shaping the perfect practice test...",
        "Quenching the final details...",
        "Smithing your exam now..."
    ];
    const [view, setView] = useState('start');
    const [activeQuiz, setActiveQuiz] = useState(null);
    const [quizResults, setQuizResults] = useState(null);
    const [activeGenerator, setActiveGenerator] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [loadingMessage, setLoadingMessage] = useState('');
    const [revolvingPrompt, setRevolvingPrompt] = useState('');
    const [currentUser, setCurrentUser] = useState(null);
    const currentUserRef = useRef(null);
    const [progress, setProgress] = useState(() => createEmptyProgress());
    const [quizAttempts, setQuizAttempts] = useState([]);
    const [showFormulaSheet, setShowFormulaSheet] = useState(false);
    const [showNamePrompt, setShowNamePrompt] = useState(false);
    const [isMathToolsOpen, setIsMathToolsOpen] = useState(false);
    const [mathToolsActiveTab, setMathToolsActiveTab] = useState('graphing');
    const [vocabulary, setVocabulary] = useState(FALLBACK_VOCABULARY);
    const [showWelcomeSplash, setShowWelcomeSplash] = useState(false);
    const [welcomeName, setWelcomeName] = useState('');
    const [welcomeFading, setWelcomeFading] = useState(false);
    const welcomeTimeoutRef = useRef(null);
    const welcomeFadeTimeoutRef = useRef(null);
    const lastAttemptsFetchRef = useRef(0);
    const pendingAttemptsFetchRef = useRef(null);

    useEffect(() => {
        currentUserRef.current = currentUser;
    }, [currentUser]);

    useEffect(() => {
        let isMounted = true;
        (async () => {
            try {
                const response = await fetch('data/vocabulary.json', { cache: 'no-store' });
                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }
                const data = await response.json();
                if (!isMounted) return;
                setVocabulary(mergeVocabularyData(FALLBACK_VOCABULARY, data));
            } catch (err) {
                console.warn('Unable to load vocabulary data:', err);
            }
        })();
        return () => {
            isMounted = false;
        };
    }, []);
    const [mathToolsInitialized, setMathToolsInitialized] = useState(false);

    useEffect(() => {
        return () => {
            if (welcomeTimeoutRef.current) {
                clearTimeout(welcomeTimeoutRef.current);
            }
            if (welcomeFadeTimeoutRef.current) {
                clearTimeout(welcomeFadeTimeoutRef.current);
            }
        };
    }, []);

    const hasLocalPrefsRef = useRef(false);
    const pendingThemeSyncRef = useRef(null);
    const [preferences, setPreferences] = useState(() => {
        const resolveInitialTheme = (baseTheme) => {
            if (VALID_THEMES.has(externalTheme)) {
                return externalTheme;
            }
            return baseTheme;
        };
        if (typeof window === 'undefined') {
            return { ...DEFAULT_PREFERENCES, theme: resolveInitialTheme(DEFAULT_PREFERENCES.theme) };
        }
        try {
            const stored = window.localStorage.getItem('prefs');
            if (stored) {
                const parsed = JSON.parse(stored);
                hasLocalPrefsRef.current = true;
                const normalized = normalizePreferences(parsed);
                return { ...normalized, theme: resolveInitialTheme(normalized.theme) };
            }
        } catch (error) {
            console.warn('Failed to restore saved preferences:', error);
        }
        const prefersDark = typeof window.matchMedia === 'function'
            ? window.matchMedia('(prefers-color-scheme: dark)').matches
            : false;
        if (prefersDark) {
            const normalized = normalizePreferences({ ...DEFAULT_PREFERENCES, theme: 'dark' });
            return { ...normalized, theme: resolveInitialTheme(normalized.theme) };
        }
        return { ...DEFAULT_PREFERENCES, theme: resolveInitialTheme(DEFAULT_PREFERENCES.theme) };
    });
    const [profileData, setProfileData] = useState(null);
    const [profileLoading, setProfileLoading] = useState(false);
    const [profileError, setProfileError] = useState(null);
    const [subjectEdits, setSubjectEdits] = useState(() => createEmptySubjectEdits());
    const [nameDraft, setNameDraft] = useState('');
    const [nameStatus, setNameStatus] = useState('');
    const [nameSaving, setNameSaving] = useState(false);
    const [settingsStatus, setSettingsStatus] = useState('');
    const [settingsSaving, setSettingsSaving] = useState(false);
    const [onboardingComplete, setOnboardingComplete] = useState(true);
    const [testSaving, setTestSaving] = useState(null);
    const [challengesSaving, setChallengesSaving] = useState(false);
    const [finishingOnboarding, setFinishingOnboarding] = useState(false);

    const syncSubjectEditsFromBundle = useCallback((bundle) => {
        setSubjectEdits(buildSubjectEditsFromPlan(bundle?.testPlan));
    }, []);

    useEffect(() => {
        if (typeof document === 'undefined') {
            return;
        }
        const root = document.documentElement;
        const sizeClasses = ['fs-sm', 'fs-md', 'fs-lg', 'fs-xl'];
        sizeClasses.forEach((cls) => root.classList.remove(cls));
        root.classList.add(`fs-${preferences.fontSize}`);
        try {
            window.localStorage.setItem('prefs', JSON.stringify({
                fontSize: preferences.fontSize,
                theme: preferences.theme,
            }));
        } catch (error) {
            console.warn('Unable to persist preferences locally:', error);
        }
    }, [preferences.fontSize, preferences.theme]);

    const openMathTools = useCallback((tab = 'graphing') => {
        setMathToolsActiveTab(tab);
        setIsMathToolsOpen(true);
        setMathToolsInitialized(true);
    }, []);

    const closeMathTools = useCallback(() => {
        setIsMathToolsOpen(false);
    }, []);

    const recalcProgress = useCallback((attemptList) => {
        setProgress(buildProgressFromAttempts(attemptList));
    }, []);

    const applyPreferenceUpdate = useCallback((partialPrefs, options = {}) => {
        setPreferences((prev) => {
            const merged = normalizePreferences({ ...prev, ...partialPrefs });
            if (
                options.markLocal
                && partialPrefs
                && Object.prototype.hasOwnProperty.call(partialPrefs, 'theme')
                && merged.theme !== prev.theme
            ) {
                pendingThemeSyncRef.current = merged.theme;
            }
            return merged;
        });
        if (options.markLocal) {
            hasLocalPrefsRef.current = true;
        }
    }, []);

    useEffect(() => {
        if (!VALID_THEMES.has(externalTheme)) {
            return;
        }
        if (preferences.theme !== externalTheme) {
            applyPreferenceUpdate({ theme: externalTheme });
        }
    }, [externalTheme, preferences.theme, applyPreferenceUpdate]);

    useEffect(() => {
        if (preferences.theme === externalTheme) {
            pendingThemeSyncRef.current = null;
            return;
        }
        if (typeof onThemeChange !== 'function') {
            pendingThemeSyncRef.current = null;
            return;
        }
        if (!VALID_THEMES.has(preferences.theme)) {
            pendingThemeSyncRef.current = null;
            return;
        }
        if (pendingThemeSyncRef.current !== preferences.theme) {
            return;
        }
        onThemeChange(preferences.theme);
        pendingThemeSyncRef.current = null;
    }, [onThemeChange, preferences.theme, externalTheme]);

    const handleSettingsInstantChange = useCallback((partialPrefs) => {
        setSettingsStatus('');
        applyPreferenceUpdate(partialPrefs, { markLocal: true });
    }, [applyPreferenceUpdate]);

    const toggleThemePreference = useCallback(() => {
        const nextTheme = preferences.theme === 'dark' ? 'light' : 'dark';
        applyPreferenceUpdate({ theme: nextTheme }, { markLocal: true });
    }, [applyPreferenceUpdate, preferences.theme]);

    const handlePersistPreferences = useCallback(async ({ fontSize = preferences.fontSize, theme = preferences.theme }) => {
        const nextPrefs = normalizePreferences({ fontSize, theme });
        applyPreferenceUpdate(nextPrefs, { markLocal: true });
        setSettingsSaving(true);
        setSettingsStatus('');
        try {
            const response = await fetchJSON('/api/profile/preferences', {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(nextPrefs),
            });
            if (response) {
                const updatedFontSize = typeof response === 'object' && response !== null ? response.fontSize : undefined;
                const updatedTheme = typeof response === 'object' && response !== null ? response.theme : undefined;
                const persistedUpdates = {};
                if (updatedFontSize && VALID_FONT_SIZES.has(updatedFontSize)) {
                    persistedUpdates.fontSize = updatedFontSize;
                }
                if (updatedTheme && VALID_THEMES.has(updatedTheme)) {
                    persistedUpdates.theme = updatedTheme;
                }
                if (Object.keys(persistedUpdates).length > 0) {
                    applyPreferenceUpdate(persistedUpdates);
                }
            }
            setSettingsStatus('Settings saved.');
        } catch (error) {
            console.warn('Failed to persist preferences:', error);
            setSettingsStatus('Settings saved locally. We will sync when the server is available.');
        } finally {
            setSettingsSaving(false);
        }
    }, [applyPreferenceUpdate, preferences.fontSize, preferences.theme]);

    const updateLocalUserName = useCallback((name, { markCustomized = false } = {}) => {
        setCurrentUser((prev) => {
            if (!prev) {
                return prev;
            }
            const updated = { ...prev, name };
            try {
                if (typeof window !== 'undefined' && window.localStorage) {
                    window.localStorage.setItem('appUser', JSON.stringify(updated));
                    if (markCustomized && prev.id) {
                        window.localStorage.setItem(`customNameSet_${prev.id}`, 'true');
                    }
                }
            } catch (error) {
                console.warn('Unable to persist updated name locally:', error);
            }
            return updated;
        });
        setProfileData((prev) => {
            if (!prev) {
                return prev;
            }
            return {
                ...prev,
                profile: {
                    ...prev.profile,
                    name,
                },
            };
        });
    }, []);

    const persistDisplayName = useCallback(async (fullName) => {
        const trimmed = String(fullName || '').trim();
        if (!trimmed) {
            throw new Error('Name is required');
        }
        let savedName = trimmed;
        let persistedToServer = false;
        try {
            const response = await fetchJSON('/api/profile/name', {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: trimmed }),
            });
            if (response && response.name) {
                savedName = response.name;
            }
            persistedToServer = true;
        } catch (error) {
            console.warn('Failed to persist name to server:', error);
        }
        updateLocalUserName(savedName, { markCustomized: true });
        setNameDraft(savedName);
        return { name: savedName, persistedToServer };
    }, [updateLocalUserName]);

    const loadProfileOnce = useCallback(async () => {
        const user = currentUserRef.current;
        if (!user) {
            return null;
        }

        setProfileLoading(true);
        setProfileError(null);

        try {
            const response = await fetch('/api/profile/me', {
                credentials: 'include',
            });

            if (!response.ok) {
                console.error('Failed to load profile: status', response.status);
                setProfileError('We could not load your profile. Please try again soon.');
                setProfileLoading(false);
                return null;
            }

            const data = await response.json();
            setProfileData(data);
            syncSubjectEditsFromBundle(data);

            const serverName = data?.profile?.name;
            if (serverName) {
                setNameDraft(serverName);
                updateLocalUserName(serverName);
            } else if (user?.name) {
                setNameDraft(user.name);
            }

            setPreferences((prev) => {
                const serverPrefs = normalizePreferences({
                    fontSize: data?.profile?.fontSize,
                });
                if (hasLocalPrefsRef.current) {
                    return normalizePreferences({ ...serverPrefs, ...prev });
                }
                return serverPrefs;
            });

            const onboardingFlag = !!data?.profile?.onboardingComplete;
            setOnboardingComplete(onboardingFlag);
            if (typeof window !== 'undefined') {
                window._onboardingComplete = onboardingFlag;
            }

            setProfileLoading(false);
            return data;
        } catch (error) {
            console.error('Failed to load profile:', error);
            setProfileError('We could not load your profile. Please try again soon.');
            setProfileLoading(false);
            return null;
        }
    }, []);

    useEffect(() => {
        if (currentUser?.name) {
            setNameDraft(currentUser.name);
        }
    }, [currentUser?.name]);

    useEffect(() => {
        if (!currentUser) {
            return;
        }
        if (!onboardingComplete) {
            setView('profile');
        }
    }, [currentUser, onboardingComplete]);

    const currentUserId = currentUser?.id ?? null;

    useEffect(() => {
        if (!currentUserId) {
            return;
        }
        loadProfileOnce();
    }, [currentUserId, loadProfileOnce]);

    const handleNameDraftChange = useCallback((value) => {
        setNameDraft(value);
        setNameStatus('');
    }, []);

    const handleProfileNameSubmit = useCallback(async (event) => {
        event.preventDefault();
        const trimmed = nameDraft.trim();
        if (!trimmed) {
            setNameStatus('Please enter a display name.');
            return;
        }
        setNameSaving(true);
        setNameStatus('');
        try {
            const result = await persistDisplayName(trimmed);
            setNameStatus(result.persistedToServer ? 'Name saved.' : 'Name saved locally. We will sync when the server is available.');
        } catch (error) {
            console.error('Failed to save profile name:', error);
            setNameStatus(error?.message || 'Unable to save your name right now.');
        } finally {
            setNameSaving(false);
        }
    }, [nameDraft, persistDisplayName]);

    const handleProfileRefresh = useCallback(() => {
        loadProfileOnce();
    }, [loadProfileOnce]);

    const handleSubjectFieldChange = useCallback((subject, field, value) => {
        if (!subject) {
            return;
        }
        setSubjectEdits((prev) => {
            const existing = prev?.[subject] || { testDate: '', testLocation: '', passed: false };
            return {
                ...prev,
                [subject]: {
                    ...existing,
                    [field]: field === 'passed' ? !!value : value,
                },
            };
        });
    }, []);

    const handleSaveSubject = useCallback(async (subject) => {
        const trimmedSubject = subject ? String(subject).trim() : '';
        if (!trimmedSubject) {
            window.alert('Missing subject.');
            return;
        }

        const edits = subjectEdits[trimmedSubject] || { testDate: '', testLocation: '', passed: false };
        const payload = {
            subject: trimmedSubject,
            testDate: edits.testDate || null,
            testLocation: edits.testLocation || null,
            passed: !!edits.passed,
        };

        console.log('[saveTestInfo] about to POST', payload);

        setTestSaving(trimmedSubject);
        try {
            const response = await fetch(`${API_BASE_URL}/api/profile/test`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify(payload),
            });

            console.log('[saveTestInfo] resp.status =', response.status);

            let data;
            try {
                data = await response.json();
            } catch (parseError) {
                console.error('[saveTestInfo] could not parse JSON from server:', parseError);
            }

            console.log('[saveTestInfo] resp body =', data);

            if (!response.ok || !data || data.ok !== true) {
                window.alert('Could not save test info.');
                return;
            }

            const bundle = data.bundle || data;
            if (bundle) {
                setProfileData(bundle);
                syncSubjectEditsFromBundle(bundle);
                const onboardingFlag = !!bundle?.profile?.onboardingComplete;
                setOnboardingComplete(onboardingFlag);
                if (typeof window !== 'undefined') {
                    window._onboardingComplete = onboardingFlag;
                }
            }

            window.alert('Saved!');
        } catch (error) {
            console.error('[saveTestInfo] FETCH ERROR:', error);
            window.alert('Could not save test info (network).');
        } finally {
            setTestSaving(null);
        }
    }, [subjectEdits, syncSubjectEditsFromBundle]);

    const handleSaveChallenges = useCallback(async (selectedIds) => {
        setChallengesSaving(true);
        try {
            const response = await fetch('/api/profile/challenges/tags', {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({ selectedIds }),
            });
            if (!response.ok) {
                throw new Error(`Failed with status ${response.status}`);
            }
            const data = await response.json();
            setProfileData(data);
            syncSubjectEditsFromBundle(data);
            const onboardingFlag = !!data?.profile?.onboardingComplete;
            setOnboardingComplete(onboardingFlag);
            if (typeof window !== 'undefined') {
                window._onboardingComplete = onboardingFlag;
            }
            window.alert('Saved!');
        } catch (error) {
            console.error('Failed to save challenges:', error);
            window.alert('Could not save challenges.');
        } finally {
            setChallengesSaving(false);
        }
    }, [syncSubjectEditsFromBundle]);

    const handleFinishOnboarding = useCallback(async () => {
        setFinishingOnboarding(true);
        try {
            const response = await fetch('/api/profile/complete-onboarding', {
                method: 'POST',
                credentials: 'include',
            });
            if (!response.ok) {
                throw new Error(`Failed with status ${response.status}`);
            }
            const data = await response.json();
            if (data?.ok) {
                setOnboardingComplete(true);
                if (typeof window !== 'undefined') {
                    window._onboardingComplete = true;
                }
                await loadProfileOnce();
                window.alert('Great! You’re all set.');
                setView('start');
            } else {
                await loadProfileOnce();
                window.alert('Almost there! Please finish the highlighted sections.');
            }
        } catch (error) {
            console.error('Failed to complete onboarding:', error);
            window.alert('Unable to complete onboarding right now.');
        } finally {
            setFinishingOnboarding(false);
        }
    }, [loadProfileOnce]);

    const loadQuizAttempts = useCallback(async (token, options = {}) => {
        if (!token) {
            return;
        }

        const { force = false } = options;
        const now = Date.now();
        const timeSinceLastFetch = now - lastAttemptsFetchRef.current;

        if (!force) {
            if (pendingAttemptsFetchRef.current) {
                return pendingAttemptsFetchRef.current;
            }
            if (timeSinceLastFetch < SCORE_FETCH_INTERVAL_MS) {
                return;
            }
        }

        lastAttemptsFetchRef.current = now;

        const fetchPromise = (async () => {
            try {
                const response = await fetch(`${API_BASE_URL}/api/quiz-attempts`, {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error(`Failed to fetch quiz attempts: ${response.status}`);
                }

                const data = await response.json();
                const normalized = Array.isArray(data) ? data : [];
                setQuizAttempts(normalized);
                recalcProgress(normalized);
            } catch (error) {
                console.error('Failed to load quiz attempts:', error);
                setQuizAttempts([]);
                recalcProgress([]);
            } finally {
                pendingAttemptsFetchRef.current = null;
            }
        })();

        pendingAttemptsFetchRef.current = fetchPromise;
        return fetchPromise;
    }, [recalcProgress]);

    const persistQuizAttempt = useCallback(async ({ subject, quizCode, quizTitle, quizType = null, score, totalQuestions, scaledScore, passed }) => {
        if (!currentUser) {
            return;
        }

        const token = localStorage.getItem('appToken');
        if (!token) {
            return;
        }

        const normalizedSubject = typeof subject === 'string' ? subject.trim() : '';
        const normalizedQuizCode = typeof quizCode === 'string' ? quizCode.trim() : '';
        const normalizedQuizTitle = typeof quizTitle === 'string' ? quizTitle.trim() : '';

        if (!normalizedSubject || !normalizedQuizCode || !normalizedQuizTitle) {
            return;
        }

        const toRoundedNumber = (value) => {
            const num = Number(value);
            return Number.isFinite(num) ? Math.round(num) : null;
        };

        const payload = {
            subject: normalizedSubject,
            quizCode: normalizedQuizCode,
            quizTitle: normalizedQuizTitle,
            quizType: quizType || null,
            score: toRoundedNumber(score),
            totalQuestions: toRoundedNumber(totalQuestions),
            scaledScore: toRoundedNumber(scaledScore),
            passed: typeof passed === 'boolean' ? passed : undefined,
        };

        if (payload.passed === undefined && payload.scaledScore != null) {
            payload.passed = payload.scaledScore >= GED_PASSING_SCORE;
        }

        try {
            const response = await fetch(`${API_BASE_URL}/api/quiz-attempts`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`Failed to save quiz attempt: ${response.status}`);
            }

            const savedAttempt = await response.json();
            setQuizAttempts((prevAttempts) => {
                const nextAttempts = Array.isArray(prevAttempts) ? [savedAttempt, ...prevAttempts] : [savedAttempt];
                recalcProgress(nextAttempts);
                return nextAttempts;
            });
        } catch (error) {
            console.error('Failed to save quiz attempt:', error);
        }
    }, [currentUser, recalcProgress]);

    useEffect(() => {
        const storedUser = localStorage.getItem('appUser');
        const storedToken = localStorage.getItem('appToken');

        if (!storedUser || !storedToken) {
            return;
        }

        try {
            const parsedUser = JSON.parse(storedUser);
            const profile = ensureUserProfile(parsedUser);
            if (profile) {
                currentUserRef.current = profile;
                setCurrentUser(profile);
                const customNameSet = localStorage.getItem(`customNameSet_${profile.id}`);
                if (!customNameSet) {
                    setShowNamePrompt(true);
                }
                loadQuizAttempts(storedToken);
            }
        } catch (error) {
            console.error('Failed to restore stored user:', error);
            localStorage.removeItem('appUser');
            localStorage.removeItem('appToken');
        }
    }, [loadQuizAttempts]);

    const handleLogin = (user, token) => {
        if (!token) {
            console.error('Login response did not include a token.');
            return;
        }

        const profile = ensureUserProfile(user);
        if (!profile) {
            console.error('Login response did not include a valid user profile.');
            return;
        }

        try {
            localStorage.setItem('appUser', JSON.stringify(profile));
            localStorage.setItem('appToken', token);
        } catch (error) {
            console.warn('Unable to persist login locally:', error);
        }

        if (welcomeTimeoutRef.current) {
            clearTimeout(welcomeTimeoutRef.current);
        }
        if (welcomeFadeTimeoutRef.current) {
            clearTimeout(welcomeFadeTimeoutRef.current);
        }

        const firstName = (() => {
            if (profile?.name) {
                const trimmed = profile.name.trim();
                if (trimmed) {
                    return trimmed.split(/\s+/)[0];
                }
            }
            if (profile?.email) {
                const [emailName] = profile.email.split('@');
                return emailName || '';
            }
            return '';
        })();

        setWelcomeName(firstName);
        setWelcomeFading(false);
        setShowWelcomeSplash(true);

        if (typeof window !== 'undefined') {
            welcomeFadeTimeoutRef.current = window.setTimeout(() => {
                setWelcomeFading(true);
            }, 2200);
            welcomeTimeoutRef.current = window.setTimeout(() => {
                setShowWelcomeSplash(false);
                setWelcomeFading(false);
            }, 3000);
        }

        currentUserRef.current = profile;
        setCurrentUser(profile);
        setProfileData(null);
        setSubjectEdits(createEmptySubjectEdits());
        setProfileError(null);
        setQuizAttempts([]);
        recalcProgress([]);

        const customNameSet = localStorage.getItem(`customNameSet_${profile.id}`);
        if (!customNameSet) {
            setShowNamePrompt(true);
        }

        loadQuizAttempts(token);
        setView('start');
    };

    const handleSaveName = async (firstName, lastName) => {
        const newName = `${firstName} ${lastName}`.trim();
        if (!newName) {
            alert('Please enter both a first and last name.');
            return;
        }
        try {
            const result = await persistDisplayName(newName);
            if (!result.persistedToServer) {
                console.warn('Display name saved locally; server update pending.');
            }
            setShowNamePrompt(false);
        } catch (error) {
            console.error('Failed to save name:', error);
            alert(error?.message || 'Unable to save your name right now. Please try again.');
        }
    };

    const handleDismissNamePrompt = () => {
        setShowNamePrompt(false);
    };

    const handleLogout = () => {
        localStorage.removeItem('appUser');
        localStorage.removeItem('appToken');
        setCurrentUser(null);
        setQuizAttempts([]);
        recalcProgress([]);
        setShowNamePrompt(false);
        setProfileData(null);
        setSubjectEdits(createEmptySubjectEdits());
        setProfileError(null);
        setProfileLoading(false);
        setOnboardingComplete(true);
        setNameDraft('');
        setNameStatus('');
        setNameSaving(false);
        currentUserRef.current = null;
        if (welcomeTimeoutRef.current) {
            clearTimeout(welcomeTimeoutRef.current);
        }
        if (welcomeFadeTimeoutRef.current) {
            clearTimeout(welcomeFadeTimeoutRef.current);
        }
        setShowWelcomeSplash(false);
        setWelcomeFading(false);
        setWelcomeName('');
        setSettingsStatus('');
        setSettingsSaving(false);
        if (window.google && google.accounts.id) {
            google.accounts.id.disableAutoSelect();
        }
    };

    const handleGenerateComprehensiveExam = async (subject) => {
        setIsLoading(true);
        setLoadingMessage(`Generating your comprehensive ${subject} exam...`);
        setActiveQuiz(null);

        try {
            const response = await fetch(`${API_BASE_URL}/generate-quiz`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    subject: subject,
                    topic: "Comprehensive Exam",
                    comprehensive: true
                })
            });

            if (!response.ok) {
              const err = await response.json();
              throw new Error(err.error || `Request failed with status ${response.status}`);
            }

            const examData = await response.json();
            startQuiz(examData, subject);

        } catch (err) {
            console.error('Failed to generate exam:', err);
            alert('Failed to generate exam: ' + err.message);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        let intervalId = null;
        if (isLoading) {
            let currentIndex = 0;
            setRevolvingPrompt(SMITHING_PROMPTS[currentIndex]);

            intervalId = setInterval(() => {
                currentIndex = (currentIndex + 1) % SMITHING_PROMPTS.length;
                setRevolvingPrompt(SMITHING_PROMPTS[currentIndex]);
            }, 2500);
        }

        return () => {
            if (intervalId) {
                clearInterval(intervalId);
            }
        };
    }, [isLoading]);

    useEffect(() => {
        window.test_setShowNamePrompt = setShowNamePrompt;
        return () => {
            if (window.test_setShowNamePrompt === setShowNamePrompt) {
                window.test_setShowNamePrompt = undefined;
            }
        };
    }, []);

    const normalizeQuestionList = (list) => {
        if (!Array.isArray(list)) {
            return [];
        }
        return list
            .filter(item => item && typeof item === 'object')
            .map(item => ({
                ...item,
                answerOptions: shuffleArray(Array.isArray(item.answerOptions) ? item.answerOptions : [])
            }));
    };

    const startQuiz = (quizPayload, subject) => {
        console.log("Starting quiz with data:", quizPayload); // Debugging line

        if (!quizPayload || typeof quizPayload !== 'object') {
            console.error('Received invalid quiz payload:', quizPayload);
            alert('Sorry, the generated quiz data was invalid. Please try again.');
            return;
        }

        if (quizPayload.type === 'essay') {
            setActiveQuiz({ ...quizPayload, subject });
            setView('essay');
            return;
        }

        if (quizPayload.type === 'simulation') {
            setActiveQuiz({ ...quizPayload, subject });
            setView('simulation');
            return;
        }

        if (quizPayload.type === 'graphing_tool' || quizPayload.type === 'geometry_practice_tool') {
            openMathTools(quizPayload.type === 'graphing_tool' ? 'graphing' : 'geometry');
            setActiveQuiz(null);
            setView('start');
            return;
        }

        const preparedQuiz = { ...quizPayload, subject };
        preparedQuiz.quizCode = quizPayload.quizCode || quizPayload.code || quizPayload.id || preparedQuiz.quizCode || null;
        preparedQuiz.isPremade = Boolean(preparedQuiz.quizCode);
        let normalizedQuestions = normalizeQuestionList(quizPayload.questions);

        if (quizPayload.type === 'multi-part-math') {
            let part1 = normalizeQuestionList(quizPayload.part1_non_calculator);
            let part2 = normalizeQuestionList(quizPayload.part2_calculator);

            if (!part1.length && normalizedQuestions.length) {
                part1 = normalizedQuestions.slice(0, 5);
            }
            if (!part2.length && normalizedQuestions.length) {
                part2 = normalizedQuestions.slice(part1.length || 5);
            }

            if (!part1.length || !part2.length) {
                console.error('Incomplete multi-part math payload received:', quizPayload);
                alert('The generated math exam was incomplete. Please try again.');
                return;
            }

            preparedQuiz.part1_non_calculator = part1;
            preparedQuiz.part2_calculator = part2;
            normalizedQuestions = [...part1, ...part2];
        } else if (quizPayload.type === 'multi-part-rla') {
            const part1 = normalizeQuestionList(quizPayload.part1_reading);
            const part3 = normalizeQuestionList(quizPayload.part3_language);
            const essay = quizPayload.part2_essay;

            const hasEssayContent = essay && typeof essay === 'object' && Array.isArray(essay.passages) && essay.passages.length >= 2 && typeof essay.prompt === 'string';

            if (!part1.length || !part3.length || !hasEssayContent) {
                console.error('Incomplete multi-part RLA payload received:', quizPayload);
                alert('The generated RLA exam was incomplete. Please try again.');
                return;
            }

            preparedQuiz.part1_reading = part1;
            preparedQuiz.part3_language = part3;
            preparedQuiz.part2_essay = essay;
            normalizedQuestions = [...part1, ...part3];
        }

        if (!normalizedQuestions.length) {
            console.error('Quiz payload did not include any valid questions:', quizPayload);
            alert('The generated quiz did not include any questions. Please try again.');
            return;
        }

        preparedQuiz.questions = normalizedQuestions;

        setActiveQuiz(preparedQuiz);
        // For any multi-part quiz, the view should be 'quiz' so the main QuizRunner can handle routing.
        const viewType = (preparedQuiz.type === 'multi-part-rla' || preparedQuiz.type === 'multi-part-math') ? 'quiz' : (preparedQuiz.type || 'quiz');
        setView(viewType);
    };

    const onQuizComplete = (results) => {
        setQuizResults(results);
        setView('results');

        if (results.quiz) {
            setActiveQuiz(results.quiz);
        }

        const { subject } = results;

        if (subject === 'Pop Quiz') return; // Do not track progress for pop quizzes

        const quizDetails = results.quiz || activeQuiz;
        if (!quizDetails) {
            return;
        }

        const quizCode = quizDetails.quizCode || quizDetails.code || quizDetails.id || null;
        if (!quizCode) {
            return;
        }

        persistQuizAttempt({
            subject,
            quizCode,
            quizTitle: quizDetails.title || quizDetails.topicTitle || 'GED® Practice Exam',
            quizType: quizDetails.type,
            score: results.score,
            totalQuestions: results.totalQuestions,
            scaledScore: results.scaledScore,
            passed: typeof results.scaledScore === 'number' ? results.scaledScore >= GED_PASSING_SCORE : undefined,
        });
    };

    const handleStartPopQuiz = () => {
        const allQuestions = [];
        Object.values(AppData).forEach(subject => {
            if (subject?.categories) {
                Object.values(subject.categories).forEach(category => {
                    if (Array.isArray(category?.topics)) {
                        category.topics.forEach(topic => {
                            if (!topic || typeof topic !== 'object') {
                                return;
                            }
                            if (Array.isArray(topic.quizzes) && topic.quizzes.length) {
                                topic.quizzes.forEach(quiz => {
                                    if (quiz && Array.isArray(quiz.questions)) {
                                        allQuestions.push(...quiz.questions);
                                    }
                                });
                            } else if (Array.isArray(topic.questions) && topic.questions.length) {
                                allQuestions.push(...topic.questions);
                            }
                        });
                    }
                });
            }
        });

        const shuffled = shuffleArray(allQuestions);
        const selectedQuestions = shuffled.slice(0, 5).map((q, index) => ({
            ...q,
            questionNumber: index + 1
        }));

        const popQuiz = {
            id: 'pop_quiz_' + new Date().getTime(),
            title: '5-Minute Pop Quiz',
            questions: selectedQuestions,
            timeLimit: 300 // 5 minutes in seconds
        };

        startQuiz(popQuiz, 'Pop Quiz');
    };

    const navigateHome = useCallback(() => {
        setActiveQuiz(null);
        setQuizResults(null);
        setActiveGenerator(null);
        if (!onboardingComplete) {
            setView('profile');
            return;
        }
        setView('start');
    }, [onboardingComplete]);

    const handleShowProfileView = useCallback(() => {
        setView('profile');
    }, []);

    const handleShowSettingsView = useCallback(() => {
        if (!onboardingComplete) {
            setView('profile');
            return;
        }
        setView('settings');
        if (!profileData) {
            loadProfileOnce();
        }
    }, [loadProfileOnce, onboardingComplete, profileData]);

    const handleReviewMarked = (markedQuestions) => {
        const reviewQuiz = {
            id: 'review_quiz_' + new Date().getTime(),
            title: 'Review Marked Questions',
            questions: markedQuestions.map((q, index) => ({ ...q, questionNumber: index + 1 })),
        };
        startQuiz(reviewQuiz, 'Review');
    };

    const renderView = () => {
        if (!currentUser) {
            return <AuthScreen onLogin={handleLogin} />;
        }
        switch (view) {
            case 'quiz':
                return <QuizRunner quiz={activeQuiz} onComplete={onQuizComplete} onExit={navigateHome} />;
            case 'reading':
                 return <ReadingPractice quiz={activeQuiz} onComplete={onQuizComplete} onExit={navigateHome} />;
            case 'essay':
                return <EssayGuide onExit={navigateHome} />;
            case 'simulation':
                return (
                    <div className="relative overflow-hidden rounded-2xl bg-gradient-to-br from-orange-500 via-orange-400 to-orange-600 text-white p-8 sm:p-10 text-center shadow-xl">
                        <div className="absolute inset-0 bg-[radial-gradient(circle_at_top_left,_rgba(255,255,255,0.25),_transparent_55%)] pointer-events-none"></div>
                        <div className="relative z-10 flex flex-col items-center gap-6">
                            <div className="flex items-center justify-center w-16 h-16 rounded-full bg-white/20 shadow-lg">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5" className="w-9 h-9">
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6l3.5 3.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <div>
                                <h1 className="text-3xl font-extrabold">The Game of Life Simulation</h1>
                                <p className="mt-3 text-lg text-orange-50/90 max-w-xl">
                                    We&apos;re polishing this interactive experience. Soon you&apos;ll be able to explore scenarios, make choices, and see how decisions impact real-world outcomes.
                                </p>
                            </div>
                            <div className="bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl p-4 max-w-2xl w-full text-left">
                                <h2 className="text-sm uppercase tracking-wide text-orange-100/90">What to Expect</h2>
                                <ul className="mt-2 space-y-1 text-base">
                                    <li>• Dynamic, choice-driven practice scenarios</li>
                                    <li>• Instant feedback with skill tips</li>
                                    <li>• Progress tracking tailored to you</li>
                                </ul>
                            </div>
                            <button
                                onClick={navigateHome}
                                className="px-6 py-2.5 rounded-full bg-white text-orange-600 font-semibold shadow-lg transition hover:shadow-xl hover:bg-orange-50"
                            >
                                Back to Dashboard
                            </button>
                        </div>
                    </div>
                );
            case 'results':
                return <ResultsScreen results={quizResults} quiz={activeQuiz} onRestart={() => startQuiz(activeQuiz, activeQuiz.subject)} onHome={navigateHome} onReviewMarked={handleReviewMarked} />;
            case 'generator':
                return <AIQuizGenerator {...activeGenerator} onQuizGenerated={(quiz) => startQuiz(quiz, activeGenerator.subject)} onExit={navigateHome} />;
            case 'profile':
                return (
                    <ProfileView
                        loading={profileLoading}
                        error={profileError}
                        data={profileData}
                        nameDraft={nameDraft}
                        onNameDraftChange={handleNameDraftChange}
                        onSubmitName={handleProfileNameSubmit}
                        nameSaving={nameSaving}
                        nameStatus={nameStatus}
                        onRefresh={handleProfileRefresh}
                        onBack={navigateHome}
                        subjectEdits={subjectEdits}
                        onSubjectFieldChange={handleSubjectFieldChange}
                        onSubjectSave={handleSaveSubject}
                        testSaving={testSaving}
                        onSaveChallenges={handleSaveChallenges}
                        challengesSaving={challengesSaving}
                        onFinishOnboarding={handleFinishOnboarding}
                        finishingOnboarding={finishingOnboarding}
                        onboardingComplete={onboardingComplete}
                    />
                );
            case 'settings':
                return (
                    <SettingsView
                        preferences={preferences}
                        onApply={handleSettingsInstantChange}
                        onSave={handlePersistPreferences}
                        saving={settingsSaving}
                        status={settingsStatus}
                        onBack={navigateHome}
                        loading={profileLoading}
                    />
                );
            case 'start':
            default:
                return (
                    <StartScreen
                        currentUser={currentUser}
                        onLogout={handleLogout}
                        progress={progress}
                        profileBundle={profileData}
                        onboardingComplete={onboardingComplete}
                        onShowProfile={handleShowProfileView}
                        onSelectQuiz={startQuiz}
                        vocabulary={vocabulary}
                        onStartPopQuiz={handleStartPopQuiz}
                        onStartComprehensiveExam={handleGenerateComprehensiveExam}
                        setIsLoading={setIsLoading}
                        setLoadingMessage={setLoadingMessage}
                        setShowFormulaSheet={setShowFormulaSheet}
                        onOpenMathTools={openMathTools}
                        theme={preferences.theme}
                        onSelectGenerator={async (subject, topic, setIsLoading, setLoadingMessage) => {
                            if (!topic) {
                                alert("Please select a topic first.");
                                return;
                            }
                            const subjectParam = resolveSubjectParam(subject);
                            if (!subjectParam) {
                                alert('Sorry, this subject is not supported yet.');
                                return;
                            }
                            setLoadingMessage("Please give us a moment to smith this for you...");
                            setIsLoading(true);

                            try {
                                const questions = await generateTopicQuiz(subjectParam, topic);

                                if (!questions.length) {
                                    throw new Error('The quiz service returned an empty quiz.');
                                }

                                const generatedQuiz = {
                                    subject,
                                    topic,
                                    id: `ai_${Date.now()}`,
                                    title: `${subject} Quiz: ${topic}`,
                                    questions
                                };

                                startQuiz(generatedQuiz, subject);

                            } catch (err) {
                                console.error("Error generating quiz:", err);
                                alert(`Sorry, something went wrong. ${err.message}`);
                            } finally {
                                setIsLoading(false);
                            }
                        }}
                    />
                );
        }
    };

    const mathToolsNodes = useMemo(() => {
        if (!mathToolsInitialized) {
            return null;
        }
        return {
            graphing: <GraphingTool key="math-tools-graphing" />,
            geometry: <GeometryPracticeTool key="math-tools-geometry" />,
        };
    }, [mathToolsInitialized]);

    return (
        <>
            {showWelcomeSplash && (
                <div
                    className={`fixed inset-0 z-[60] flex flex-col items-center justify-center text-white transition-opacity duration-700 ${welcomeFading ? 'opacity-0' : 'opacity-100'}`}
                    style={{ backgroundColor: 'var(--modal-overlay)' }}
                >
                    <img
                        src="Logo.svg"
                        alt="Kingmakerconsults logo"
                        className="w-4/5 max-w-4xl h-auto object-contain drop-shadow-2xl"
                    />
                    <p className="mt-8 text-3xl sm:text-4xl font-semibold tracking-wide">
                        Welcome{welcomeName ? `, ${welcomeName}!` : '!'}
                    </p>
                </div>
            )}
            <div
                className="min-h-screen flex flex-col transition-colors"
                style={{ backgroundColor: 'var(--bg-page)', color: 'var(--text-primary)' }}
            >
                <AppHeader
                    currentUser={currentUser}
                    onLogout={handleLogout}
                    onShowHome={navigateHome}
                    onShowProfile={handleShowProfileView}
                    onShowSettings={handleShowSettingsView}
                    activePanel={view === 'profile' ? 'profile' : view === 'settings' ? 'settings' : null}
                    theme={preferences.theme}
                    onToggleTheme={toggleThemePreference}
                />
                {isLoading && (
                    <div
                        className="fade-in fixed inset-0 w-full h-full flex flex-col items-center justify-center z-50 text-center px-4"
                        style={{ backgroundColor: 'var(--modal-overlay)' }}
                    >
                        <h2 className="text-3xl font-bold text-white mb-4">Loading...</h2>
                        <p className="text-xl text-sky-300 mb-2">{loadingMessage}</p>
                        <p className="text-lg text-slate-300 italic h-8 transition-opacity duration-500">{revolvingPrompt}</p>
                        {/* Optional: Add a spinner element here */}
                    </div>
                )}
                {showFormulaSheet && <FormulaSheetModal onClose={() => setShowFormulaSheet(false)} />}
                {showNamePrompt && <NamePromptModal user={currentUser} onSave={handleSaveName} onDismiss={handleDismissNamePrompt} />}
                <MathPracticeToolsModal
                    isOpen={isMathToolsOpen}
                    onClose={closeMathTools}
                    activeTab={mathToolsActiveTab}
                    onTabChange={setMathToolsActiveTab}
                    graphingNode={mathToolsNodes ? mathToolsNodes.graphing : null}
                    geometryNode={mathToolsNodes ? mathToolsNodes.geometry : null}
                />
                <main className="flex-1 w-full max-w-6xl mx-auto p-4 sm:p-6 md:p-8 pt-[4.5rem] space-y-8 text-slate-900 dark:text-slate-100 transition-colors duration-300">
                    <div className="bg-white dark:bg-slate-900/90 border border-slate-200/70 dark:border-slate-700/70 rounded-2xl shadow-xl p-4 sm:p-6 md:p-8 transition-all duration-300 relative">
                        {renderView()}
                    </div>
                </main>
                <footer className="w-full flex flex-col items-center gap-3 text-xs sm:text-sm text-slate-500 pb-6">
                    <img src="Logo.svg" alt="Kingmakerconsults logo" className="h-48 w-auto object-contain" />
                    <p>Kingmakerconsults Copyright ©</p>
                </footer>
            </div>
        </>
    );
}

// --- VIEWS & COMPONENTS ---


function ProfileView({
    loading,
    error,
    data,
    nameDraft,
    onNameDraftChange,
    onSubmitName,
    nameSaving,
    nameStatus,
    onRefresh,
    onBack,
    subjectEdits,
    onSubjectFieldChange,
    onSubjectSave,
    testSaving,
    onSaveChallenges,
    challengesSaving,
    onFinishOnboarding,
    finishingOnboarding,
    onboardingComplete,
}) {
    const profile = data?.profile || {};
    const challengeOptions = Array.isArray(data?.challengeOptions) ? data.challengeOptions : [];
    const recentSummary = data?.recentScoresDashboard || {};
    const legacyScores = data?.scores || {};
    const SUBJECT_ORDER = useMemo(() => [...SUBJECT_NAMES], []);
    const rawTestPlan = Array.isArray(data?.testPlan) ? data.testPlan : [];
    const normalizedTestPlan = useMemo(() => {
        const map = new Map();
        rawTestPlan.forEach((entry) => {
            if (!entry || !entry.subject) {
                return;
            }
            const subject = String(entry.subject);
            map.set(subject, {
                subject,
                testDate: entry.testDate || '',
                testLocation: entry.testLocation || '',
                passed: !!entry.passed,
                daysUntil: entry.daysUntil ?? null,
            });
        });
        SUBJECT_ORDER.forEach((subject) => {
            if (!map.has(subject)) {
                map.set(subject, {
                    subject,
                    testDate: '',
                    testLocation: '',
                    passed: false,
                    daysUntil: null,
                });
            }
        });
        const orderedSubjects = [
            ...SUBJECT_ORDER,
            ...Array.from(map.keys()).filter((subject) => !SUBJECT_ORDER.includes(subject)),
        ];
        const seen = new Set();
        const result = [];
        orderedSubjects.forEach((subject) => {
            if (!seen.has(subject) && map.has(subject)) {
                result.push(map.get(subject));
                seen.add(subject);
            }
        });
        map.forEach((value, subject) => {
            if (!seen.has(subject)) {
                result.push(value);
            }
        });
        return result;
    }, [rawTestPlan, SUBJECT_ORDER]);

    const nextUpcoming = data?.nextUpcomingTest || null;
    const formatDayCount = (value) => {
        if (typeof value !== 'number' || !Number.isFinite(value)) {
            return null;
        }
        const rounded = Math.max(0, Math.floor(value));
        return `${rounded} day${rounded === 1 ? '' : 's'}`;
    };
    const nextUpcomingDaysText = formatDayCount(nextUpcoming?.daysUntil);
    const nextUpcomingSummary = nextUpcoming && nextUpcoming.testDate
        ? `Next test: ${nextUpcoming.subject} on ${nextUpcoming.testDate}${nextUpcomingDaysText ? ` (${nextUpcomingDaysText})` : ''}`
        : 'No test scheduled yet.';

    const selectedFromServer = useMemo(
        () => challengeOptions.filter((opt) => opt.selected).map((opt) => opt.id),
        [challengeOptions]
    );
    const [selectedIds, setSelectedIds] = useState(selectedFromServer);
    useEffect(() => {
        setSelectedIds(selectedFromServer);
    }, [selectedFromServer]);

    const groupedChallenges = useMemo(() => {
        const grouped = {};
        challengeOptions.forEach((opt) => {
            const subjectKey = opt.subject || 'Other';
            const subtopicKey = opt.subtopic || 'General';
            if (!grouped[subjectKey]) {
                grouped[subjectKey] = {};
            }
            if (!grouped[subjectKey][subtopicKey]) {
                grouped[subjectKey][subtopicKey] = [];
            }
            grouped[subjectKey][subtopicKey].push(opt);
        });
        return grouped;
    }, [challengeOptions]);

    const selectedCount = selectedIds.length;
    const highlightName = !onboardingComplete && !profile.name;
    const hasAnyTestProgress = normalizedTestPlan.some((entry) => entry.passed || entry.testDate);
    const highlightTest = !onboardingComplete && !hasAnyTestProgress;
    const highlightChallenges = !onboardingComplete && selectedCount === 0;

    const handleChallengeToggle = (id) => {
        setSelectedIds((prev) => {
            const next = new Set(prev);
            if (next.has(id)) {
                next.delete(id);
            } else {
                next.add(id);
            }
            return Array.from(next);
        });
    };

    const handleChallengesSubmit = (event) => {
        event.preventDefault();
        onSaveChallenges?.(selectedIds);
    };

    const handleBackClick = () => {
        if (!onboardingComplete) {
            window.alert('Please finish onboarding before heading to the dashboard.');
            return;
        }
        onBack?.();
    };

    const timezoneLabel = profile.timezone || 'America/New_York';
    const reminderLabel = profile.reminderEnabled === false ? 'Off' : 'On';

    return (
        <section id="profileView" data-view="profile" tabIndex={-1} className="outline-none">
            <div className="max-w-4xl mx-auto space-y-6">
                <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h1 className="text-3xl font-bold text-slate-800">Profile</h1>
                        <p className="text-sm text-slate-500">Update your learning plan and keep your information in sync.</p>
                    </div>
                    <div className="flex flex-col gap-2 sm:flex-row sm:items-center">
                        <button
                            type="button"
                            onClick={onRefresh}
                            className="inline-flex items-center justify-center rounded-lg border border-slate-300 px-3 py-2 text-sm font-semibold text-slate-700 hover:bg-slate-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2 disabled:opacity-60"
                            disabled={loading}
                        >
                            {loading ? 'Refreshing…' : 'Refresh'}
                        </button>
                        <button
                            type="button"
                            onClick={handleBackClick}
                            className="inline-flex items-center justify-center rounded-lg bg-sky-600 px-3 py-2 text-sm font-semibold text-white hover:bg-sky-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2"
                        >
                            Back to Dashboard
                        </button>
                    </div>
                </div>

                {error && !loading && (
                    <div className="rounded-xl border border-rose-200 bg-rose-50 p-4 text-sm text-rose-700" role="alert">
                        {error}
                    </div>
                )}

                {!onboardingComplete && (
                    <div
                        className="onboarding-banner"
                        style={{ border: '1px solid #f6c', background: '#fff0f6', padding: '1rem', borderRadius: '0.5rem' }}
                    >
                        <strong>Welcome!</strong> Before we start, fill this out so we can build you a plan:
                        <ol className="list-decimal pl-5 text-sm text-slate-700 space-y-1 mt-2">
                            <li>Pick the areas you struggle with</li>
                            <li>Set your test date (or mark "I passed")</li>
                            <li>Choose a display name</li>
                        </ol>
                        <button
                            id="finishOnboardingBtn"
                            type="button"
                            onClick={onFinishOnboarding}
                            className="mt-3 inline-flex items-center justify-center rounded-lg bg-sky-600 px-4 py-2 text-sm font-semibold text-white hover:bg-sky-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2 disabled:opacity-60"
                            disabled={finishingOnboarding}
                        >
                            {finishingOnboarding ? 'Checking…' : "I'm Done"}
                        </button>
                    </div>
                )}

                <form
                    onSubmit={onSubmitName}
                    className={`rounded-2xl border bg-white/95 p-5 shadow-sm space-y-4 ${highlightName ? 'border-rose-300 ring-1 ring-rose-200' : 'border-slate-200'}`}
                    aria-labelledby="profile-name-heading"
                >
                    <div>
                        <h2 id="profile-name-heading" className="text-xl font-semibold text-slate-800">Display Name</h2>
                        <p className="text-sm text-slate-500">This name appears across the app.</p>
                    </div>
                    <div className="flex flex-col gap-3 sm:flex-row sm:items-center">
                        <label className="w-full sm:flex-1">
                            <span className="sr-only">Display name</span>
                            <input
                                type="text"
                                value={nameDraft}
                                onChange={(event) => onNameDraftChange(event.target.value)}
                                maxLength={80}
                                placeholder="Your name"
                                className="w-full rounded-lg border border-slate-300 px-3 py-2 text-base focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500"
                            />
                        </label>
                        <button
                            type="submit"
                            className="inline-flex items-center justify-center rounded-lg bg-sky-600 px-4 py-2 text-sm font-semibold text-white hover:bg-sky-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2 disabled:opacity-60"
                            disabled={nameSaving}
                        >
                            {nameSaving ? 'Saving…' : 'Save Name'}
                        </button>
                    </div>
                    <p className="text-xs text-slate-500">Maximum 80 characters.</p>
                    {nameStatus && (
                        <p className="text-sm text-slate-600" role="status" aria-live="polite">
                            {nameStatus}
                        </p>
                    )}
                </form>

                <div className="grid gap-4 md:grid-cols-2">
                <section
                    id="testPlanCard"
                    className={`rounded-2xl border bg-white/95 p-5 shadow-sm space-y-4 ${highlightTest ? 'border-rose-300 ring-1 ring-rose-200' : 'border-slate-200'}`}
                >
                    <h2 className="text-lg font-semibold text-slate-800">Upcoming Tests</h2>
                    <div id="nextUpcomingSummary" className="note text-sm text-slate-600">
                        {nextUpcomingSummary}
                    </div>
                    <div id="testPlanList" className="grid gap-4 md:grid-cols-2">
                        {normalizedTestPlan.length === 0 ? (
                            <p className="col-span-full text-sm text-slate-500">No subjects available yet.</p>
                        ) : normalizedTestPlan.map((entry) => {
                            const edits = (subjectEdits && subjectEdits[entry.subject]) || {
                                testDate: '',
                                testLocation: '',
                                passed: false,
                            };
                            const savingThisSubject = testSaving === entry.subject;
                            const countdownLabel = (() => {
                                if (!entry.testDate || edits.passed) {
                                    return null;
                                }
                                if (entry.daysUntil != null) {
                                    const value = entry.daysUntil;
                                    return `${value} day${value === 1 ? '' : 's'} remaining`;
                                }
                                return 'Countdown not available';
                            })();

                            return (
                                <div
                                    key={entry.subject}
                                    className="subject-test-block rounded-xl border border-slate-200 bg-white/80 p-4 space-y-3 shadow-sm"
                                >
                                    <h3 className="text-base font-semibold text-slate-700">{entry.subject}</h3>
                                    <label className="flex flex-col gap-1 text-sm text-slate-600">
                                        Date
                                        <input
                                            type="date"
                                            className="tp-date rounded-lg border border-slate-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500"
                                            data-subject={entry.subject}
                                            value={edits.testDate || ''}
                                            onChange={(event) => onSubjectFieldChange?.(entry.subject, 'testDate', event.target.value)}
                                            disabled={savingThisSubject}
                                        />
                                    </label>
                                    <label className="flex flex-col gap-1 text-sm text-slate-600">
                                        Location
                                        <input
                                            type="text"
                                            className="tp-location rounded-lg border border-slate-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500"
                                            placeholder="Test center (optional)"
                                            data-subject={entry.subject}
                                            value={edits.testLocation || ''}
                                            onChange={(event) => onSubjectFieldChange?.(entry.subject, 'testLocation', event.target.value)}
                                            disabled={savingThisSubject}
                                        />
                                    </label>
                                    <label className="inline-row flex items-center gap-2 text-sm text-slate-600">
                                        <input
                                            type="checkbox"
                                            className="tp-passed h-4 w-4 rounded border-slate-300 text-sky-600 focus:ring-sky-500"
                                            data-subject={entry.subject}
                                            checked={!!edits.passed}
                                            onChange={(event) => onSubjectFieldChange?.(entry.subject, 'passed', event.target.checked)}
                                            disabled={savingThisSubject}
                                        />
                                        I already passed this subject
                                    </label>
                                    <button
                                        type="button"
                                        className="btn tp-save inline-flex items-center justify-center rounded-lg bg-sky-600 px-4 py-2 text-sm font-semibold text-white hover:bg-sky-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2 disabled:opacity-60"
                                        data-subject={entry.subject}
                                        onClick={() => onSubjectSave?.(entry.subject)}
                                        disabled={savingThisSubject}
                                    >
                                        {savingThisSubject ? 'Saving…' : `Save ${entry.subject}`}
                                    </button>
                                    {edits.passed ? (
                                        <p className="text-xs text-emerald-600">Great job! We marked this subject as passed.</p>
                                    ) : countdownLabel ? (
                                        <p className="text-xs text-slate-500">{countdownLabel}</p>
                                    ) : null}
                                </div>
                            );
                        })}
                    </div>
                    <p className="text-xs text-slate-500">Dates saved here will also appear on your dashboard.</p>
                </section>

                    <article className="glass rounded-2xl border border-slate-200/70 dark:border-slate-700/60 bg-white/70 dark:bg-slate-800/70 p-5 shadow-lg space-y-3">
                        <h2 className="text-lg font-semibold text-slate-800">Preferences Snapshot</h2>
                        <dl className="space-y-2 text-sm text-slate-600">
                            <div className="flex items-center justify-between rounded-lg bg-slate-50 px-3 py-2">
                                <dt className="font-medium text-slate-700">Font Size</dt>
                                <dd className="capitalize">{profile.fontSize || 'md'}</dd>
                            </div>
                            <div className="flex items-center justify-between rounded-lg bg-slate-50 px-3 py-2">
                                <dt className="font-medium text-slate-700">Color Contrast</dt>
                                <dd className="capitalize">Automatic</dd>
                            </div>
                            <div className="flex items-center justify-between rounded-lg bg-slate-50 px-3 py-2">
                                <dt className="font-medium text-slate-700">Timezone</dt>
                                <dd>{timezoneLabel}</dd>
                            </div>
                            <div className="flex items-center justify-between rounded-lg bg-slate-50 px-3 py-2">
                                <dt className="font-medium text-slate-700">Test Reminders</dt>
                                <dd>{reminderLabel}</dd>
                            </div>
                        </dl>
                        <p className="text-xs text-slate-500">Adjust these settings anytime from the Settings panel.</p>
                    </article>
                </div>

                <form
                    onSubmit={handleChallengesSubmit}
                    className={`rounded-2xl border bg-white/95 p-5 shadow-sm space-y-4 ${highlightChallenges ? 'border-rose-300 ring-1 ring-rose-200' : 'border-slate-200'}`}
                >
                    <h2 className="text-lg font-semibold text-slate-800">Learning Challenges</h2>
                    <p className="text-sm text-slate-600">Select the areas you find tough. We’ll use this later to build a study plan for you.</p>
                    <div id="challengeList" className="max-h-64 overflow-y-auto rounded-lg border border-slate-200 p-2">
                        {Object.keys(groupedChallenges).length === 0 ? (
                            <p className="text-sm text-slate-500">No challenge options available yet.</p>
                        ) : (
                            Object.keys(groupedChallenges)
                                .sort()
                                .map((subject) => (
                                    <div key={subject} className="mb-3">
                                        <div className="challenge-subject font-semibold text-slate-700">{subject}</div>
                                        {Object.keys(groupedChallenges[subject])
                                            .sort()
                                            .map((subtopic) => (
                                                <div key={`${subject}-${subtopic}`} className="mt-1">
                                                    <div className="challenge-subtopic ml-4 text-sm italic text-slate-500">{subtopic}</div>
                                                    {groupedChallenges[subject][subtopic].map((opt) => {
                                                        const isChecked = selectedIds.includes(opt.id);
                                                        return (
                                                            <label
                                                                key={opt.id}
                                                                className="ml-8 mt-2 flex items-start gap-2 text-sm text-slate-600"
                                                            >
                                                                <input
                                                                    type="checkbox"
                                                                    className="challengeBox mt-1 h-4 w-4 rounded border-slate-300 text-sky-600 focus:ring-sky-500"
                                                                    data-id={opt.id}
                                                                    checked={isChecked}
                                                                    onChange={() => handleChallengeToggle(opt.id)}
                                                                />
                                                                <span>{opt.label || opt.subtopic || opt.subject}</span>
                                                            </label>
                                                        );
                                                    })}
                                                </div>
                                            ))}
                                    </div>
                                ))
                        )}
                    </div>
                    <div className="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                        <p className="text-xs text-slate-500">Selected: {selectedCount}</p>
                        <button
                            id="saveChallengesBtn"
                            type="submit"
                            className="inline-flex items-center justify-center rounded-lg bg-sky-600 px-4 py-2 text-sm font-semibold text-white hover:bg-sky-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2 disabled:opacity-60"
                            disabled={challengesSaving}
                        >
                            {challengesSaving ? 'Saving…' : 'Save Challenges'}
                        </button>
                    </div>
                </form>

                <RecentScoresPanel
                    title="Recent Scores"
                    summary={recentSummary}
                    legacyScores={legacyScores}
                    loading={loading}
                />
            </div>
        </section>
    );
}

function RecentScoresPanel({ summary, legacyScores, loading, title = 'Recent Scores' }) {
    if (loading) {
        return (
            <section className="rounded-2xl border border-slate-200 bg-white/95 p-5 shadow-sm space-y-3">
                <h2 className="text-lg font-semibold text-slate-800">{title}</h2>
                <p className="text-sm text-slate-600">Loading…</p>
            </section>
        );
    }

    const hasSummary = summary && Object.keys(summary).length > 0;
    const subjectScores = Array.isArray(summary?.subjects) ? summary.subjects : [];
    const cardScores = Array.isArray(summary?.cards) ? summary.cards : [];
    const highlightScores = Array.isArray(summary?.highlights) ? summary.highlights : [];
    const overallValue = summary?.overall ?? summary?.total ?? null;

    const formatScoreValue = (value) => {
        if (value == null) {
            return '—';
        }
        if (typeof value === 'number' && Number.isFinite(value)) {
            return `${Math.round(value)}%`;
        }
        if (typeof value === 'object') {
            if (typeof value.score === 'number') {
                return `${Math.round(value.score)}%`;
            }
            if (typeof value.value === 'number') {
                return `${Math.round(value.value)}%`;
            }
            if (typeof value.display === 'string') {
                return value.display;
            }
        }
        return String(value);
    };

    const renderCard = (item, index, fallbackLabel) => {
        const label = item?.subject || item?.name || item?.label || fallbackLabel || `Item ${index + 1}`;
        const primary = item?.latest ?? item?.score ?? item?.value ?? item?.percent ?? item?.percentage ?? item?.current ?? null;
        const secondary = item?.average ?? item?.avg ?? item?.trend ?? item?.previous ?? null;
        const note = item?.description || item?.note;
        return (
            <div key={item?.id || `${label}-${index}`} className="rounded-lg border border-slate-200 bg-white p-4 shadow-sm">
                <p className="text-xs font-semibold uppercase tracking-wide text-slate-500">{label}</p>
                {primary != null && <p className="mt-1 text-2xl font-bold text-slate-800">{formatScoreValue(primary)}</p>}
                {secondary != null && <p className="text-xs text-slate-500">Average: {formatScoreValue(secondary)}</p>}
                {note && <p className="mt-1 text-xs text-slate-500">{note}</p>}
            </div>
        );
    };

    if (hasSummary) {
        return (
            <section className="rounded-2xl border border-slate-200 bg-white/95 p-5 shadow-sm space-y-4">
                <h2 className="text-lg font-semibold text-slate-800">{title}</h2>
                <div className="space-y-4">
                    {overallValue != null && (
                        <div className="rounded-lg border border-slate-200 bg-slate-50 px-4 py-3">
                            <p className="text-xs font-semibold uppercase tracking-wide text-slate-500">Overall</p>
                            <p className="text-2xl font-bold text-slate-800">{formatScoreValue(overallValue)}</p>
                        </div>
                    )}
                    {(subjectScores.length || cardScores.length || highlightScores.length) ? (
                        <div className="grid gap-3 sm:grid-cols-2">
                            {subjectScores.map((item, index) => renderCard(item, index, 'Subject'))}
                            {cardScores.map((item, index) => renderCard(item, index + subjectScores.length, 'Summary'))}
                            {highlightScores.map((item, index) => renderCard(item, index + subjectScores.length + cardScores.length, 'Highlight'))}
                        </div>
                    ) : null}
                    {summary?.lastUpdated && (
                        <p className="text-xs text-slate-500">Last updated {summary.lastUpdated}</p>
                    )}
                    {overallValue == null && !subjectScores.length && !cardScores.length && !highlightScores.length && (
                        <pre className="whitespace-pre-wrap rounded-lg border border-slate-100 bg-slate-50 p-3 text-xs text-slate-500">{JSON.stringify(summary, null, 2)}</pre>
                    )}
                </div>
            </section>
        );
    }

    const subjectRows = Array.isArray(legacyScores?.bySubject) ? legacyScores.bySubject : [];
    const subtopicRows = Array.isArray(legacyScores?.bySubtopic) ? legacyScores.bySubtopic : [];

    if (!subjectRows.length && !subtopicRows.length) {
        return (
            <section className="rounded-2xl border border-slate-200 bg-white/95 p-5 shadow-sm space-y-3">
                <h2 className="text-lg font-semibold text-slate-800">{title}</h2>
                <p className="text-sm text-slate-600">No scores yet.</p>
            </section>
        );
    }

    return (
        <section className="rounded-2xl border border-slate-200 bg-white/95 p-5 shadow-sm space-y-4">
            <h2 className="text-lg font-semibold text-slate-800">{title}</h2>
            {subjectRows.length ? (
                <div>
                    <h3 className="text-sm font-semibold text-slate-700 uppercase tracking-wide">By Subject</h3>
                    <div className="mt-2 overflow-x-auto">
                        <table className="min-w-full divide-y divide-slate-200 text-sm">
                            <thead className="bg-slate-50 text-xs uppercase tracking-wide text-slate-500">
                                <tr>
                                    <th scope="col" className="px-3 py-2 text-left font-semibold">Subject</th>
                                    <th scope="col" className="px-3 py-2 text-left font-semibold">Latest</th>
                                    <th scope="col" className="px-3 py-2 text-left font-semibold">Average</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-200 text-slate-600">
                                {subjectRows.map((row, index) => (
                                    <tr key={`${row.subject}-${index}`}>
                                        <td className="px-3 py-2 font-medium text-slate-700">{row.subject}</td>
                                        <td className="px-3 py-2">{row.latest != null ? `${row.latest}%` : '—'}</td>
                                        <td className="px-3 py-2">{row.avg != null ? `${row.avg}%` : '—'}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            ) : null}
            {subtopicRows.length ? (
                <div>
                    <h3 className="text-sm font-semibold text-slate-700 uppercase tracking-wide">By Subtopic</h3>
                    <div className="mt-2 overflow-x-auto">
                        <table className="min-w-full divide-y divide-slate-200 text-sm">
                            <thead className="bg-slate-50 text-xs uppercase tracking-wide text-slate-500">
                                <tr>
                                    <th scope="col" className="px-3 py-2 text-left font-semibold">Subject</th>
                                    <th scope="col" className="px-3 py-2 text-left font-semibold">Subtopic</th>
                                    <th scope="col" className="px-3 py-2 text-left font-semibold">Latest</th>
                                    <th scope="col" className="px-3 py-2 text-left font-semibold">Average</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-200 text-slate-600">
                                {subtopicRows.map((row, index) => (
                                    <tr key={`${row.subject}-${row.subtopic}-${index}`}>
                                        <td className="px-3 py-2 font-medium text-slate-700">{row.subject}</td>
                                        <td className="px-3 py-2">{row.subtopic}</td>
                                        <td className="px-3 py-2">{row.latest != null ? `${row.latest}%` : '—'}</td>
                                        <td className="px-3 py-2">{row.avg != null ? `${row.avg}%` : '—'}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            ) : null}
        </section>
    );
}

function SettingsView({ preferences, onApply, onSave, saving, status, onBack, loading }) {
    const [fontSize, setFontSize] = useState(preferences.fontSize);
    const [theme, setTheme] = useState(preferences.theme);

    useEffect(() => {
        setFontSize(preferences.fontSize);
    }, [preferences.fontSize]);

    useEffect(() => {
        setTheme(preferences.theme);
    }, [preferences.theme]);

    const fontSizeOptions = [
        { value: 'sm', label: 'Small', description: 'Compact text for dense layouts.' },
        { value: 'md', label: 'Medium', description: 'Balanced for most learners.' },
        { value: 'lg', label: 'Large', description: 'Larger text for improved legibility.' },
        { value: 'xl', label: 'Extra Large', description: 'Maximum size for easy reading.' },
    ];

    const themeOptions = [
        { value: 'light', label: 'Light', description: 'Bright background with dark text.' },
        { value: 'dark', label: 'Dark', description: 'Dim background with light text.' },
    ];

    const handleFontSizeChange = (event) => {
        const value = event.target.value;
        setFontSize(value);
        if (onApply) {
            onApply({ fontSize: value });
        }
    };

    const handleThemeChange = (event) => {
        const value = event.target.value;
        setTheme(value);
        if (onApply) {
            onApply({ theme: value });
        }
    };

    const handleSubmit = async (event) => {
        event.preventDefault();
        await onSave({ fontSize, theme });
    };

    return (
        <section id="settingsView" data-view="settings" tabIndex={-1} className="outline-none">
            <div className="max-w-4xl mx-auto space-y-6">
                <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h1 className="text-3xl font-bold text-slate-800 dark:text-slate-100">Settings</h1>
                        <p className="text-sm text-slate-500 dark:text-slate-300">Choose the font size and color mode that feel right for your reading style. Changes apply instantly.</p>
                    </div>
                    <button
                        type="button"
                        onClick={onBack}
                        className="inline-flex items-center justify-center rounded-lg bg-sky-600 px-3 py-2 text-sm font-semibold text-white hover:bg-sky-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2 dark:bg-sky-500 dark:hover:bg-sky-400"
                    >
                        Back to Dashboard
                    </button>
                </div>

                <form onSubmit={handleSubmit} className="rounded-2xl border border-slate-200 dark:border-slate-700/70 bg-white/95 dark:bg-slate-900/80 p-5 shadow-sm space-y-6">
                    <fieldset className="space-y-3">
                        <legend className="text-lg font-semibold text-slate-800 dark:text-slate-100">Font Size</legend>
                        <p className="text-sm text-slate-500 dark:text-slate-300">Pick the text size that feels comfortable on your device.</p>
                        <div className="grid gap-2 sm:grid-cols-2">
                            {fontSizeOptions.map((option) => (
                                <label
                                    key={option.value}
                                    className="flex items-center gap-3 rounded-lg border border-slate-200 dark:border-slate-600 bg-white dark:bg-slate-900/60 px-3 py-2 hover:border-sky-300 dark:hover:border-sky-400 focus-within:ring-2 focus-within:ring-sky-500"
                                >
                                    <input
                                        type="radio"
                                        name="fontSize"
                                        value={option.value}
                                        checked={fontSize === option.value}
                                        onChange={handleFontSizeChange}
                                        className="h-4 w-4 text-sky-600 focus:ring-sky-500 dark:bg-slate-900 dark:border-slate-600"
                                    />
                                    <span className="flex flex-col">
                                        <span className="font-semibold text-slate-700 dark:text-slate-200">{option.label}</span>
                                        <span className="text-xs text-slate-500 dark:text-slate-400">{option.description}</span>
                                    </span>
                                </label>
                            ))}
                        </div>
                    </fieldset>

                    <fieldset className="space-y-3">
                        <legend className="text-lg font-semibold text-slate-800 dark:text-slate-100">Color Mode</legend>
                        <p className="text-sm text-slate-500 dark:text-slate-300">Choose between light and dark themes. We’ll remember your pick.</p>
                        <div className="grid gap-2 sm:grid-cols-2">
                            {themeOptions.map((option) => (
                                <label
                                    key={option.value}
                                    className={`flex items-center gap-3 rounded-lg border px-3 py-2 transition ${theme === option.value ? 'border-sky-400 ring-2 ring-sky-200 dark:ring-sky-500/40' : 'border-slate-200 dark:border-slate-600'} bg-white dark:bg-slate-900/60 hover:border-sky-300 dark:hover:border-sky-400`}
                                >
                                    <input
                                        type="radio"
                                        name="theme"
                                        value={option.value}
                                        checked={theme === option.value}
                                        onChange={handleThemeChange}
                                        className="h-4 w-4 text-sky-600 focus:ring-sky-500 dark:bg-slate-900 dark:border-slate-600"
                                    />
                                    <span className="flex flex-col">
                                        <span className="font-semibold text-slate-700 dark:text-slate-200">{option.label}</span>
                                        <span className="text-xs text-slate-500 dark:text-slate-400">{option.description}</span>
                                    </span>
                                </label>
                            ))}
                        </div>
                    </fieldset>

                    <div className="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                        <p className="text-xs text-slate-500 dark:text-slate-400" role="status" aria-live="polite">
                            {status}
                        </p>
                        <button
                            type="submit"
                            className="inline-flex items-center justify-center rounded-lg bg-sky-600 px-4 py-2 text-sm font-semibold text-white hover:bg-sky-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-2 disabled:opacity-60 dark:bg-sky-500 dark:hover:bg-sky-400"
                            disabled={saving || loading}
                        >
                            {saving ? 'Saving…' : 'Save Settings'}
                        </button>
                    </div>
                </form>

                <div className="rounded-2xl border border-slate-200 dark:border-slate-700/70 bg-slate-50 dark:bg-slate-900/60 p-5 text-sm text-slate-600 dark:text-slate-300">
                    <h2 className="text-base font-semibold text-slate-700 dark:text-slate-100">How settings work</h2>
                    <ul className="mt-2 list-disc space-y-1 pl-5">
                        <li>Changes apply instantly so you can preview them before saving.</li>
                        <li>We try to sync your preferences to the server. If that fails, they stay on this device.</li>
                        <li>Text and background colors now adjust automatically so light text sits on darker surfaces for readability.</li>
                    </ul>
                </div>
            </div>
        </section>
    );
}

function AdminBypassForm() {
    const [password, setPassword] = useState('');
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (event) => {
        event.preventDefault();
        setLoading(true);
        setError(null);

        try {
            const response = await fetch('https://ged-website.onrender.com/api/admin/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({ password })
            });

            if (!response.ok) {
                let message = 'Login failed';
                try {
                    const body = await response.json();
                    if (body && body.error) message = body.error;
                } catch (err) {
                    // ignore
                }
                throw new Error(message);
            }

            window.location.reload();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Login failed');
        } finally {
            setLoading(false);
        }
    };

    return (
        <form onSubmit={handleSubmit} className="flex flex-col gap-3 max-w-sm mx-auto p-4 border rounded-lg shadow-sm bg-white">
            <label className="text-sm font-medium text-slate-700" htmlFor="admin-bypass-password">
                Preview Password
            </label>
            <input
                id="admin-bypass-password"
                type="password"
                autoComplete="current-password"
                value={password}
                onChange={(event) => setPassword(event.target.value)}
                className="border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-sky-500"
                placeholder="Enter password"
                disabled={loading}
            />
            {error && <p className="text-sm text-red-600">{error}</p>}
            <button
                type="submit"
                disabled={loading || !password}
                className="bg-sky-600 text-white font-semibold py-2 px-4 rounded hover:bg-sky-700 disabled:opacity-60"
            >
                {loading ? 'Signing in…' : 'Sign in'}
            </button>
        </form>
    );
}

function AdminPasswordLogin({ onAdminLogin }) {
    const [isOpen, setIsOpen] = useState(false);
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [submitting, setSubmitting] = useState(false);

    const ADMIN_PASSWORD = 'Kingmaker123!';

    const resetState = () => {
        setPassword('');
        setError('');
        setSubmitting(false);
    };

    const handleSubmit = (event) => {
        event.preventDefault();
        if (submitting) {
            return;
        }

        setSubmitting(true);
        if (password.trim() === ADMIN_PASSWORD) {
            const adminUser = {
                id: 'admin',
                name: 'Admin',
                email: 'admin@learningcanvas.com',
                picture: 'https://ui-avatars.com/api/?name=Admin&background=0EA5E9&color=FFFFFF'
            };

            try {
                localStorage.setItem('customNameSet_admin', 'true');
            } catch (err) {
                console.warn('Unable to persist admin custom name flag:', err);
            }

            resetState();
            setIsOpen(false);
            onAdminLogin(adminUser, 'admin-bypass-token');
            return;
        }

        setError('Incorrect password. Please try again.');
        setSubmitting(false);
    };

    const handleClose = () => {
        setIsOpen(false);
        resetState();
    };

    return (
        <>
            <button
                type="button"
                onClick={() => setIsOpen(true)}
                className="fixed bottom-6 right-6 z-40 px-5 py-2.5 bg-slate-900 text-white text-sm font-semibold rounded-full shadow-lg shadow-slate-900/30 hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500"
            >
                Admin Login
            </button>

            {isOpen && (
                <div
                    className="fixed inset-0 z-50 flex items-center justify-center"
                    style={{ backgroundColor: 'var(--modal-overlay)' }}
                >
                    <div className="relative w-11/12 max-w-sm rounded-2xl bg-white p-6 shadow-2xl">
                        <button
                            type="button"
                            onClick={handleClose}
                            className="absolute top-3 right-3 text-slate-400 hover:text-slate-600 text-2xl leading-none"
                            aria-label="Close admin login"
                        >
                            &times;
                        </button>
                        <h3 className="text-xl font-bold text-slate-800 mb-1">Admin Access</h3>
                        <p className="text-sm text-slate-500 mb-4">Enter the administrator password to continue.</p>
                        <form onSubmit={handleSubmit} className="space-y-4">
                            <div>
                                <label htmlFor="admin-password" className="block text-sm font-medium text-slate-600">
                                    Password
                                </label>
                                <input
                                    id="admin-password"
                                    type="password"
                                    value={password}
                                    onChange={(event) => setPassword(event.target.value)}
                                    className="mt-1 w-full rounded-lg border border-slate-300 px-3 py-2 text-slate-700 shadow-sm focus:border-sky-500 focus:outline-none focus:ring-2 focus:ring-sky-200"
                                    placeholder="Enter password"
                                    autoComplete="current-password"
                                    disabled={submitting}
                                />
                            </div>
                            {error && <p className="text-sm text-red-600">{error}</p>}
                            <button
                                type="submit"
                                disabled={submitting || password.trim() === ''}
                                className="w-full rounded-lg bg-sky-600 py-2 text-sm font-semibold text-white shadow hover:bg-sky-700 disabled:opacity-60"
                            >
                                {submitting ? 'Verifying…' : 'Login'}
                            </button>
                        </form>
                    </div>
                </div>
            )}
        </>
    );
}

function AuthScreen({ onLogin }) {
    const googleButton = useRef(null);
    const [mode, setMode] = useState('login');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [formError, setFormError] = useState(null);
    const [formMessage, setFormMessage] = useState(null);
    const [submitting, setSubmitting] = useState(false);

    const handleCredentialResponse = useCallback(async (response) => {
        try {
            const res = await fetch('https://ged-website.onrender.com/api/auth/google', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ credential: response.credential }),
            });

            if (!res.ok) {
                throw new Error(`Server responded with ${res.status}`);
            }

            const { user, token } = await res.json();
            onLogin(user, token);
        } catch (error) {
            console.error("Login Error:", error);
        }
    }, [onLogin]);

    useEffect(() => {
        const script = document.createElement('script');
        script.src = 'https://accounts.google.com/gsi/client';
        script.async = true;
        script.defer = true;
        script.onload = () => {
            if (window.google && google.accounts.id && googleButton.current) {
                google.accounts.id.initialize({
                    client_id: '828659988606-p9ct562f068p1778im2ck2o5iga89i7m.apps.googleusercontent.com',
                    callback: handleCredentialResponse,
                });
                google.accounts.id.renderButton(
                    googleButton.current,
                    { theme: "outline", size: "large", text: "signin_with", shape: "rectangular" }
                );
            }
        };
        script.onerror = () => {
            console.error('Google Sign-In script failed to load.');
        };

        document.body.appendChild(script);

        return () => {
            const goggleScript = document.querySelector('script[src="https://accounts.google.com/gsi/client"]');
            if (goggleScript) {
                document.body.removeChild(goggleScript);
            }
        };
    }, [handleCredentialResponse]);

    const showAdminBypass = typeof window !== 'undefined' && ['localhost', '127.0.0.1', '0.0.0.0'].includes(window.location.hostname);
    const modeLabel = mode === 'login' ? 'Log In' : 'Register';

    const toggleMode = () => {
        setMode((prev) => (prev === 'login' ? 'register' : 'login'));
        setFormError(null);
        setFormMessage(null);
        setPassword('');
    };

    const handleFormSubmit = async (event) => {
        event.preventDefault();
        setFormError(null);
        setFormMessage(null);

        if (!email.trim() || !password.trim()) {
            setFormError('Email and password are required');
            return;
        }

        setSubmitting(true);

        try {
            const endpoint = mode === 'login' ? '/api/login' : '/api/register';
            const response = await fetch(`${API_BASE_URL}${endpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email: email.trim(), password })
            });

            let body = {};
            try {
                body = await response.json();
            } catch (err) {
                body = {};
            }

            if (!response.ok) {
                throw new Error(body?.error || 'Unable to complete request');
            }

            if (body?.user && body?.token) {
                onLogin(body.user, body.token);
                setEmail('');
                setPassword('');
            } else {
                setFormMessage(body?.message || 'Success. You can now sign in.');
                if (mode === 'register') {
                    setMode('login');
                }
            }
        } catch (error) {
            setFormError(error instanceof Error ? error.message : 'Unable to complete request');
        } finally {
            setSubmitting(false);
        }
    };

    return (
        <>
            <div className="text-center max-w-md mx-auto">
                <h2 className="text-3xl font-extrabold text-slate-800 dark:text-slate-100 mb-2">Welcome!</h2>
                <p className="text-slate-500 dark:text-slate-300 mb-6">Sign in to save your progress across devices.</p>
                <form onSubmit={handleFormSubmit} className="bg-white dark:bg-slate-900/80 rounded-2xl shadow-md p-6 text-left space-y-4 border border-transparent dark:border-slate-700/60">
                    <div>
                        <label htmlFor="auth-email" className="block text-sm font-medium text-slate-600 dark:text-slate-300">Email</label>
                        <input
                            id="auth-email"
                            type="email"
                            value={email}
                            onChange={(event) => setEmail(event.target.value)}
                            className="mt-1 w-full rounded-lg border border-slate-300 px-3 py-2 text-slate-700 shadow-sm focus:border-sky-500 focus:outline-none focus:ring-2 focus:ring-sky-200 dark:border-slate-600 dark:bg-slate-900 dark:text-slate-100 dark:placeholder-slate-500 dark:focus:border-sky-400 dark:focus:ring-sky-500"
                            autoComplete="email"
                            placeholder="you@example.com"
                            required
                        />
                    </div>
                    <div>
                        <label htmlFor="auth-password" className="block text-sm font-medium text-slate-600 dark:text-slate-300">Password</label>
                        <input
                            id="auth-password"
                            type="password"
                            value={password}
                            onChange={(event) => setPassword(event.target.value)}
                            className="mt-1 w-full rounded-lg border border-slate-300 px-3 py-2 text-slate-700 shadow-sm focus:border-sky-500 focus:outline-none focus:ring-2 focus:ring-sky-200 dark:border-slate-600 dark:bg-slate-900 dark:text-slate-100 dark:placeholder-slate-500 dark:focus:border-sky-400 dark:focus:ring-sky-500"
                            autoComplete={mode === 'login' ? 'current-password' : 'new-password'}
                            placeholder="Enter your password"
                            required
                        />
                    </div>
                    {formError && <p className="text-sm text-red-600">{formError}</p>}
                    {formMessage && <p className="text-sm text-green-600">{formMessage}</p>}
                    <button
                        type="submit"
                        disabled={submitting}
                        className="w-full rounded-lg bg-sky-600 py-2 text-sm font-semibold text-white shadow hover:bg-sky-700 disabled:opacity-60"
                    >
                        {submitting ? 'Please wait…' : modeLabel}
                    </button>
                </form>
                <p className="mt-3 text-sm text-slate-600 dark:text-slate-300">
                    {mode === 'login' ? 'Need an account?' : 'Already have an account?'}{' '}
                    <button
                        type="button"
                        onClick={toggleMode}
                        className="font-semibold text-sky-600 hover:text-sky-800 dark:text-sky-300 dark:hover:text-sky-200"
                    >
                        {mode === 'login' ? 'Register' : 'Log in'}
                    </button>
                </p>
                <div className="my-6 flex items-center justify-center gap-3 text-xs uppercase tracking-wide text-slate-400 dark:text-slate-500">
                    <span className="h-px w-12 bg-slate-200" aria-hidden="true"></span>
                    <span>Or continue with</span>
                    <span className="h-px w-12 bg-slate-200" aria-hidden="true"></span>
                </div>
                <div ref={googleButton} className="flex justify-center"></div>
                {showAdminBypass && (
                    <div className="mt-8">
                        <AdminBypassForm />
                    </div>
                )}
            </div>
            <AdminPasswordLogin onAdminLogin={onLogin} />
        </>
    );
}

function DetailedProgressView({ subject, progressData, onBack }) {
    const attempts = Array.isArray(progressData?.attempts) ? progressData.attempts : [];
    const lastAttempt = progressData?.lastAttempt || (attempts.length ? attempts[0] : null);
    const totalPremade = typeof progressData?.totalPremadeExams === 'number' ? progressData.totalPremadeExams : 0;
    const completedCount = typeof progressData?.completedCount === 'number' ? progressData.completedCount : 0;
    const completionPercentage = typeof progressData?.completionPercentage === 'number' ? progressData.completionPercentage : 0;
    const averageScaledScore = typeof progressData?.averageScaledScore === 'number' ? progressData.averageScaledScore : null;

    const formatDate = (value) => {
        if (!value) return '—';
        const date = new Date(value);
        if (Number.isNaN(date.getTime())) {
            return '—';
        }
        return date.toLocaleString(undefined, { dateStyle: 'medium', timeStyle: 'short' });
    };

    const formatScore = (value) => (value == null ? 'N/A' : Math.round(value));
    const formatPassStatus = (passed) => {
        if (passed === true) return { label: 'Passed', className: 'text-emerald-600' };
        if (passed === false) return { label: 'Keep Practicing', className: 'text-amber-600' };
        return { label: '—', className: 'text-slate-500' };
    };

    const recentAttempts = attempts.slice(0, 10);

    return (
        <div className="fade-in">
            <header className="flex items-center pb-4 mb-4 border-b">
                <button type="button" onClick={onBack} className="flex items-center gap-1 text-sm text-sky-600 hover:text-sky-800 font-semibold"><ArrowLeftIcon /> Back to Dashboard</button>
            </header>
            <h2 className="text-3xl font-extrabold text-slate-800 mb-4">{subject} Progress Details</h2>
            <div className="space-y-6">
                <section className="rounded-lg border border-slate-200 bg-slate-50 p-5 shadow-inner">
                    <h3 className="text-lg font-semibold text-slate-700">Premade Exam Progress</h3>
                    <div className="mt-3 h-3 w-full rounded-full bg-white/70">
                        <div className="h-3 rounded-full bg-sky-500 transition-all duration-300" style={{ width: `${Math.min(100, Math.max(0, completionPercentage))}%` }}></div>
                    </div>
                    <div className="mt-2 flex flex-wrap justify-between text-sm text-slate-600">
                        <span>{completedCount} of {totalPremade} exams passed</span>
                        <span>{completionPercentage}% complete</span>
                    </div>
                    {averageScaledScore != null && (
                        <p className="mt-2 text-sm text-slate-600">
                            Average scaled score: <span className="font-semibold text-slate-800">{averageScaledScore}</span>
                        </p>
                    )}
                </section>

                <section className="rounded-lg border border-slate-200 bg-white p-5 shadow-sm">
                    <h3 className="text-lg font-semibold text-slate-700 mb-2">Last Exam</h3>
                    {lastAttempt ? (
                        <div className="space-y-2">
                            <p className="text-xl font-bold text-slate-900">{lastAttempt.quizTitle || 'Exam'}</p>
                            <p className="text-sm text-slate-600 break-words">Code: <span className="font-mono text-slate-700">{lastAttempt.quizCode || '—'}</span></p>
                            <p className="text-lg font-semibold text-slate-800">
                                Scaled Score: <span className="text-sky-700">{formatScore(lastAttempt.scaledScore)}</span>
                                <span className={`ml-3 text-sm font-semibold ${formatPassStatus(lastAttempt.passed).className}`}>
                                    {formatPassStatus(lastAttempt.passed).label}
                                </span>
                            </p>
                            {typeof lastAttempt.score === 'number' && typeof lastAttempt.totalQuestions === 'number' && (
                                <p className="text-sm text-slate-600">Correct: {lastAttempt.score} / {lastAttempt.totalQuestions}</p>
                            )}
                            <p className="text-sm text-slate-500">Completed {formatDate(lastAttempt.attemptedAt)}</p>
                        </div>
                    ) : (
                        <p className="text-sm text-slate-600">No completed exams recorded yet. Start a premade exam to see your progress here.</p>
                    )}
                </section>

                <section>
                    <h3 className="text-lg font-semibold text-slate-700 mb-3">Recent Attempts</h3>
                    {recentAttempts.length ? (
                        <ul className="space-y-3">
                            {recentAttempts.map((attempt, index) => {
                                const { label, className } = formatPassStatus(attempt.passed);
                                return (
                                    <li key={`${attempt.quizCode || 'attempt'}-${index}`} className="rounded-lg border border-slate-200 bg-white p-4 shadow-sm">
                                        <div className="flex items-start justify-between gap-3">
                                            <div>
                                                <p className="font-semibold text-slate-800">{attempt.quizTitle || attempt.quizCode || `Exam ${index + 1}`}</p>
                                                <p className="text-xs text-slate-500">Code: {attempt.quizCode || '—'}</p>
                                            </div>
                                            <div className="text-right">
                                                <p className="text-lg font-bold text-slate-900">{formatScore(attempt.scaledScore)}</p>
                                                <p className={`text-xs font-semibold ${className}`}>{label}</p>
                                            </div>
                                        </div>
                                        <div className="mt-2 flex flex-wrap justify-between text-xs text-slate-500">
                                            <span>{formatDate(attempt.attemptedAt)}</span>
                                            {typeof attempt.score === 'number' && typeof attempt.totalQuestions === 'number' && (
                                                <span>{attempt.score} / {attempt.totalQuestions} correct</span>
                                            )}
                                        </div>
                                    </li>
                                );
                            })}
                        </ul>
                    ) : (
                        <p className="text-sm text-slate-600">No attempts logged yet. Complete a premade exam to see detailed history.</p>
                    )}
                </section>
            </div>
        </div>
    );
}

function ProgressDashboard({ progress, onSubjectClick }) {
    const totalAttempts = Object.values(progress).reduce((acc, subjectData) => acc + (subjectData?.attemptCount || 0), 0);
    const subjects = SUBJECT_PROGRESS_KEYS;
    const getScoreTheme = (subject) => SUBJECT_COLORS[subject] || {};
    const getCardStyles = (subject) => {
        const theme = getScoreTheme(subject);
        const gradient = SUBJECT_BG_GRADIENTS[subject];
        const style = {
            borderColor: theme.scoreBorder || 'var(--border-subtle)',
            color: theme.scoreText || theme.text || '#ffffff',
            backgroundColor: theme.scoreBackground || theme.background || 'var(--bg-overlay)',
        };
        if (gradient) {
            style.backgroundImage = gradient;
        }
        return style;
    };
    const totalCardStyle = {
        borderColor: DEFAULT_COLOR_SCHEME.scoreBorder || 'var(--border-subtle)',
        backgroundColor: 'rgba(15,23,42,0.9)',
        color: '#f8fafc',
    };

    const formatAverage = (value) => (value == null ? 'N/A' : Math.round(value));

    return (
        <div className="grid grid-cols-1 sm:grid-cols-3 lg:grid-cols-5 gap-4 mb-8">
            <div className="p-4 rounded-lg text-center shadow-inner border sm:col-span-3 lg:col-span-1" style={totalCardStyle}>
                <p className="text-sm font-semibold uppercase tracking-wider" style={{ color: 'rgba(248,250,252,0.75)' }}>
                    Total Attempts
                </p>
                <p className="text-4xl font-bold" style={{ color: '#ffffff' }}>{totalAttempts}</p>
            </div>
            {subjects.map(subject => {
                const data = progress[subject] || {};
                const cardStyle = getCardStyles(subject);
                const completionPercent = Math.min(100, Math.max(0, data.completionPercentage || 0));
                const completedCount = data.completedCount || 0;
                const totalPremade = data.totalPremadeExams || 0;
                const averageScore = formatAverage(data.averageScaledScore);
                const lastTitle = data.lastAttempt?.quizTitle;
                const lastScore = data.lastAttempt?.scaledScore;
                const truncatedTitle = lastTitle && lastTitle.length > 52 ? `${lastTitle.slice(0, 49)}…` : lastTitle;
                return (
                    <button
                        key={subject}
                        onClick={() => onSubjectClick(subject)}
                        className="p-4 rounded-lg text-left shadow-inner border transition-transform duration-200 hover:-translate-y-1"
                        style={cardStyle}
                    >
                        <p className="text-sm font-semibold uppercase tracking-wider" style={{ color: 'rgba(255,255,255,0.85)' }}>
                            {subject}
                        </p>
                        <div className="mt-3 h-2 w-full rounded-full bg-white/30">
                            <div className="h-2 rounded-full bg-white shadow-sm" style={{ width: `${completionPercent}%`, opacity: 0.9 }}></div>
                        </div>
                        <p className="mt-2 text-sm" style={{ color: cardStyle.color }}>
                            {completedCount} of {totalPremade} exams passed
                        </p>
                        <p className="text-xs" style={{ color: 'rgba(255,255,255,0.85)' }}>
                            Avg scaled score: <span className="font-semibold">{averageScore}</span>
                        </p>
                        {truncatedTitle && (
                            <p className="mt-2 text-xs" style={{ color: 'rgba(255,255,255,0.8)' }}>
                                Last exam: <span className="font-semibold">{truncatedTitle}</span>
                                {lastScore != null && ` (${Math.round(lastScore)})`}
                            </p>
                        )}
                    </button>
                );
            })}
        </div>
    );
}

function VocabularyTicker({ vocabulary, onWordClick }) {
    const entries = useMemo(() => {
        if (!vocabulary) return [];
        return Object.entries(vocabulary)
            .flatMap(([subject, words]) => {
                if (!Array.isArray(words) || !words.length) return [];
                return words
                    .slice(0, MAX_TICKER_WORDS_PER_SUBJECT)
                    .map((word) => ({ subject, term: word.term }))
                    .filter((item) => item.term);
            });
    }, [vocabulary]);

    if (!entries.length) {
        return null;
    }

    const repeatedEntries = [...entries, ...entries];

    return (
        <div
            className="vocabulary-spotlight glass rounded-2xl overflow-hidden shadow-lg animate-floatIn"
            style={{ borderColor: 'var(--border-strong)', backgroundColor: 'var(--bg-overlay)' }}
        >
            <div
                className="flex items-center justify-between px-4 py-3"
                style={{ backgroundColor: 'var(--nav-active-bg)', color: 'var(--nav-active-text)' }}
            >
                <span className="text-sm font-semibold uppercase tracking-wide">Vocabulary Spotlight</span>
                <span
                    className="hidden text-xs sm:inline"
                    style={{ color: 'var(--text-secondary)', opacity: 0.75 }}
                >
                    Click any word to view the full list.
                </span>
            </div>
            <div className="vocabulary-ticker">
                <div className="vocabulary-ticker-track">
                    {repeatedEntries.map((item, index) => {
                        const color = VOCABULARY_SUBJECT_COLORS[item.subject] || '#0f172a';
                        const shortLabel = SUBJECT_SHORT_LABELS[item.subject] || item.subject;
                        return (
                            <button
                                key={`${item.subject}-${item.term}-${index}`}
                                type="button"
                                onClick={() => onWordClick?.(item.subject)}
                                className="vocabulary-chip"
                                title={`View ${item.subject} vocabulary`}
                            >
                                <span className="vocabulary-chip-dot" style={{ backgroundColor: color }}></span>
                                <span style={{ color: 'var(--text-primary)' }}>{item.term}</span>
                                <span className="vocabulary-chip-label" style={{ color: 'var(--text-secondary)' }}>{shortLabel}</span>
                            </button>
                        );
                    })}
                </div>
            </div>
        </div>
    );
}

function VocabularyOverview({ vocabulary, onWordClick }) {
    const subjects = Object.entries(vocabulary || {}).filter(([, words]) => Array.isArray(words) && words.length > 0);

    if (!subjects.length) {
        return null;
    }

    return (
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3">
            {subjects.map(([subjectName, words]) => {
                const colorScheme = SUBJECT_COLORS[subjectName] || {};
                const headerGradient = SUBJECT_BG_GRADIENTS[subjectName];
                const headerStyle = headerGradient
                    ? { backgroundImage: headerGradient }
                    : { backgroundColor: colorScheme.background || 'var(--nav-active-bg)' };
                const previewWords = words.slice(0, 3);

                return (
                    <div
                        key={subjectName}
                        className="subject-card glass animate-floatIn flex h-full flex-col overflow-hidden rounded-2xl shadow-lg"
                        style={{ backgroundColor: 'var(--bg-surface)', borderColor: 'var(--border-strong)' }}
                    >
                        <div
                            className="flex items-center justify-between px-4 py-3 shadow-inner rounded-t-2xl"
                            style={{
                                ...(headerStyle || {}),
                                backgroundColor: headerStyle?.backgroundColor || undefined,
                                backgroundImage: headerStyle?.backgroundImage || undefined,
                                color: colorScheme.text || 'var(--nav-active-text)',
                            }}
                        >
                            <h3 className="text-lg font-semibold drop-shadow-sm">{subjectName}</h3>
                            <span className="text-xs uppercase tracking-wide" style={{ color: colorScheme.text || 'var(--nav-active-text)', opacity: 0.85 }}>
                                Key Terms
                            </span>
                        </div>
                        <div className="flex flex-1 flex-col gap-4 p-5">
                            <ul className="space-y-2">
                                {previewWords.map((word) => (
                                    <li
                                        key={word.term}
                                        className="rounded-lg px-3 py-2 text-sm font-medium shadow-sm"
                                        style={{ backgroundColor: 'var(--bg-muted)', color: 'var(--text-secondary)' }}
                                    >
                                        {word.term}
                                    </li>
                                ))}
                            </ul>
                            <div className="mt-auto">
                                <div className="mb-1 text-xs font-medium" style={{ color: 'var(--text-secondary)' }}>
                                    Study Progress
                                </div>
                                <div className="h-2 w-full overflow-hidden rounded-full" style={{ backgroundColor: 'var(--border-subtle)' }}>
                                    <div
                                        className="h-full rounded-full transition-all duration-500"
                                        style={{ width: '40%', backgroundColor: colorScheme.accent || 'var(--accent)' }}
                                    />
                                </div>
                            </div>
                            <button
                                type="button"
                                onClick={() => onWordClick?.(subjectName)}
                                className="mt-2 inline-flex items-center justify-center rounded-lg px-4 py-2 text-sm font-semibold shadow-sm transition"
                                data-role="secondary"
                                style={{
                                    color: colorScheme.accentText || 'var(--accent-text)',
                                    borderColor: colorScheme.accent || 'var(--accent)',
                                }}
                            >
                                View full list
                            </button>
                        </div>
                    </div>
                );
            })}
        </div>
    );
}

function SubjectVocabularySection({ subject, words }) {
    if (!Array.isArray(words) || !words.length) {
        return null;
    }
    return (
        <div id="subject-vocabulary-section" className="glass animate-floatIn rounded-2xl p-6 mb-6 border border-slate-200/70 dark:border-slate-700/60">
            <div className="flex flex-col gap-1 md:flex-row md:items-center md:justify-between">
                <div>
                    <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100">Subject Vocabulary</h3>
                    <p className="text-sm text-slate-600 dark:text-slate-300">Scroll through the complete list of key terms for {subject}.</p>
                </div>
            </div>
            <div className="mt-4 max-h-96 overflow-y-auto pr-1 space-y-3">
                {words.map((word) => (
                    <div key={word.term} className="rounded-lg bg-white/85 dark:bg-slate-900/60 p-4 shadow-sm border border-slate-200/60 dark:border-slate-700/60 transition-all">
                        <p className="text-lg font-semibold text-slate-900 dark:text-slate-100">{word.term}</p>
                        {word.definition && <p className="text-sm text-slate-600 dark:text-slate-300 mt-2 leading-relaxed">{word.definition}</p>}
                        {word.example && <p className="text-xs text-slate-500 dark:text-slate-400 italic mt-2">Example: {word.example}</p>}
                    </div>
                ))}
            </div>
        </div>
    );
}

const ICONS = { GlobeIcon, BookOpenIcon, BeakerIcon, CalculatorIcon, ChartBarIcon, VariableIcon, ShapesIcon };

function FormulaDisplay({ latex, className = '' }) {
    const safeLatex = normalizeFormulaLatex(latex);
    let html = '';

    try {
        html = renderLatexToHtml(safeLatex);
    } catch (error) {
        console.warn('Formula render failed:', error?.message || error);
        html = escapeHtml(typeof safeLatex === 'string' ? safeLatex : '');
    }

    return (
        <span className={className} dangerouslySetInnerHTML={{ __html: html }} />
    );
}

function ScienceFormulaSheet({ onClose }) {
    return (
        <div
            className="fixed inset-0 z-50 flex items-center justify-center"
            style={{ backgroundColor: 'var(--modal-overlay)' }}
        >
            <div className="bg-white rounded-xl shadow-2xl max-w-lg w-11/12 p-6 relative">
                <button
                    className="absolute top-3 right-3 text-slate-500 font-bold hover:text-slate-800"
                    onClick={onClose}
                    type="button"
                    aria-label="Close science formula sheet"
                >
                    ✕
                </button>

                <h2 className="text-xl font-bold text-slate-800 mb-4">Science Formula Sheet</h2>

                <div className="space-y-4 max-h-[60vh] overflow-y-auto pr-2">
                    {ScienceFormulas.map((item, idx) => (
                        <div key={idx} className="border border-slate-200 rounded-lg p-3 bg-slate-50">
                            <h3 className="font-semibold text-slate-800">{item.name}</h3>
                            <FormulaDisplay
                                latex={item.formula}
                                className="p-2 bg-white rounded text-center my-2 text-lg font-mono block border border-slate-300"
                            />
                            <p className="text-xs text-slate-600 leading-snug">{item.variables}</p>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
}

function FormulaSheetModal({ onClose }) {
    const Formula = ({ title, formula, description }) => {
        const sanitizedFormula = typeof formula === 'string'
            ? (() => {
                let working = formula;
                working = applySafeMathFix(working);
                if (typeof normalizeLatexMacrosInMath === 'function') {
                    working = normalizeLatexMacrosInMath(working);
                }
                return working;
            })()
            : formula;
        let html = '';
        try {
            html = renderLatexToHtml(sanitizedFormula);
        } catch (err) {
            console.warn('KaTeX render fallback triggered:', err?.message || err);
            html = escapeHtml(typeof sanitizedFormula === 'string' ? sanitizedFormula : '');
        }

        return (
            <div className="mb-4">
                <h4 className="font-bold text-md text-slate-700">{title}</h4>
                <div className="p-2 bg-slate-200 rounded text-center my-1 text-lg">
                    <span dangerouslySetInnerHTML={{ __html: html }}></span>
                </div>
                {description && <p className="text-sm text-slate-500">{description}</p>}
            </div>
        );
    };

    return (
        <div
            className="fixed inset-0 w-full h-full flex items-center justify-center z-50"
            style={{ backgroundColor: 'var(--modal-overlay)' }}
        >
            <div className="bg-white rounded-lg shadow-2xl w-11/12 max-w-2xl max-h-[90vh]">
                <div className="p-4 border-b flex justify-between items-center sticky top-0 bg-white">
                    <h2 className="text-xl font-bold">GED® Mathematical Reasoning Formula Sheet</h2>
                    <button onClick={onClose} className="text-gray-500 hover:text-gray-800 text-3xl">&times;</button>
                </div>
                <div className="p-6 overflow-y-auto max-h-[calc(90vh-65px)] grid grid-cols-1 md:grid-cols-2 gap-x-6">
                    <div>
                        <h3 className="text-lg font-bold border-b mb-2">Area</h3>
                        <Formula title="Square" formula="A = s^2" />
                        <Formula title="Rectangle" formula="A = lw" />
                        <Formula title="Parallelogram" formula="A = bh" />
                        <Formula title="Triangle" formula="A = \\\\frac{1}{2}bh" />
                        <Formula title="Trapezoid" formula="A = \\\\frac{1}{2}h(b_1 + b_2)" />
                        <Formula title="Circle" formula="A = \\pi r^2" />

                        <h3 className="text-lg font-bold border-b mt-4 mb-2">Perimeter / Circumference</h3>
                        <Formula title="Square" formula="P = 4s" />
                        <Formula title="Rectangle" formula="P = 2l + 2w" />
                        <Formula title="Triangle" formula="P = s_1 + s_2 + s_3" />
                        <Formula title="Circle (Circumference)" formula="C = 2\\\\pi r \\\\text{ or } C = \\\\pi d" />
                    </div>
                    <div>
                        <h3 className="text-lg font-bold border-b mb-2">Volume</h3>
                        <Formula title="Cube" formula="V = s^3" />
                        <Formula title="Rectangular Prism" formula="V = lwh" />
                        <Formula title="Cylinder" formula="V = \\pi r^2 h" />
                        <Formula title="Pyramid" formula="V = \\\\frac{1}{3}Bh" description="B = area of base" />
                        <Formula title="Cone" formula="V = \\\\frac{1}{3}\\\\pi r^2 h" />
                        <Formula title="Sphere" formula="V = \\\\frac{4}{3}\\\\pi r^3" />

                        <h3 className="text-lg font-bold border-b mt-4 mb-2">Data</h3>
                        <Formula title="Mean" formula="mean = \\\\frac{\\\\text{sum of values}}{\\\\text{number of values}}" />
                        <Formula title="Median" formula="median = \\\\text{middle value of an ordered data set}" />
                    </div>
                </div>
            </div>
        </div>
    );
}

function StartScreen({ currentUser, onLogout, progress, profileBundle: profileData, onboardingComplete, onShowProfile, onSelectQuiz, vocabulary, onSelectGenerator, onStartPopQuiz, onStartComprehensiveExam, setIsLoading, setLoadingMessage, setShowFormulaSheet, onOpenMathTools, theme = 'light' }) {
    const [selectedSubject, setSelectedSubject] = useState(null);
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [aiQuizTopic, setAiQuizTopic] = useState('');
    const [detailedViewSubject, setDetailedViewSubject] = useState(null);
    const [viewScienceFormulas, setViewScienceFormulas] = useState(false);
    const isDarkMode = theme === 'dark';
    const vocabularyData = vocabulary && typeof vocabulary === 'object' ? vocabulary : {};
    const profile = profileData?.profile || {};
    const challengeOptions = Array.isArray(profileData?.challengeOptions) ? profileData.challengeOptions : [];
    const selectedChallenges = challengeOptions.filter((opt) => opt.selected);
    const displayedChallenges = selectedChallenges.slice(0, 4);
    const hiddenChallengeCount = Math.max(0, selectedChallenges.length - displayedChallenges.length);
    const recentDashboardSummary = profileData?.recentScoresDashboard || {};
    const testPlan = Array.isArray(profileData?.testPlan) ? profileData.testPlan : [];
    const nextUpcomingTest = profileData?.nextUpcomingTest || null;
    const hasSavedTest = testPlan.some((entry) => entry && (entry.passed || entry.testDate));
    const allSubjectsPassed = testPlan.length > 0 && testPlan.every((entry) => entry.passed);
    const formatDayCount = (value) => {
        if (typeof value !== 'number' || !Number.isFinite(value)) {
            return null;
        }
        const rounded = Math.max(0, Math.floor(value));
        return `${rounded} day${rounded === 1 ? '' : 's'}`;
    };
    const upcomingMatch = nextUpcomingTest
        ? testPlan.find((entry) => entry.subject === nextUpcomingTest.subject && entry.testDate === nextUpcomingTest.testDate)
        : null;
    const nextUpcomingSummary = nextUpcomingTest && nextUpcomingTest.testDate
        ? {
            subject: nextUpcomingTest.subject,
            testDate: nextUpcomingTest.testDate,
            daysUntilText: formatDayCount(nextUpcomingTest.daysUntil),
            location: upcomingMatch?.testLocation || null,
        }
        : null;
    const userDisplayName = currentUser?.name || currentUser?.email || 'Learner';
    const userInitial = userDisplayName ? userDisplayName.trim().charAt(0).toUpperCase() : 'U';
    const hasVocabulary = Object.values(vocabularyData).some(words => Array.isArray(words) && words.length > 0);
    const goToProfile = () => {
        onShowProfile?.();
    };

    const handleSelectSubject = (subject) => {
        setSelectedSubject(subject);
        setSelectedCategory(null);
        setAiQuizTopic('');
        setViewScienceFormulas(false);
    };

    const handleSelectCategory = (category) => {
        setSelectedCategory(category);
    };

    const handleViewVocabulary = (subject) => {
        if (!subject) return;
        const words = vocabularyData[subject];
        if (Array.isArray(words) && words.length > 0) {
            setSelectedSubject(subject);
            setSelectedCategory(null);
            setAiQuizTopic('');
            setTimeout(() => {
                const section = document.getElementById('subject-vocabulary-section');
                if (section) {
                    section.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            }, 200);
        }
    };

    const handleBack = () => {
        if (selectedCategory) {
            setSelectedCategory(null);
            setAiQuizTopic('');
            return;
        }

        if (selectedSubject) {
            setSelectedSubject(null);
            setSelectedCategory(null);
            setAiQuizTopic('');
            setShowFormulaSheet?.(false);
            setViewScienceFormulas(false);
        }
    };

    // --- NEW: If detailed view is active, render it instead of the main dashboard ---
    if (detailedViewSubject) {
        return (
            <DetailedProgressView
                subject={detailedViewSubject}
                progressData={progress[detailedViewSubject]}
                onBack={() => setDetailedViewSubject(null)}
            />
        );
    }

    // --- NEW: Logic to get topics for the dropdown (moved from AIQuizGenerator) ---
    // This includes the fix for the white screen error using optional chaining (`?.`)
    const availableTopics = selectedSubject && AppData[selectedSubject]?.categories
        ? Object.values(AppData[selectedSubject].categories).flatMap(category => category.topics?.map(topic => topic.title) || [])
        : [];

    const Breadcrumb = ({ variant = 'default', color, accentColor } = {}) => {
        const isOnColor = variant === 'onColor';
        const resolvedColor = color || (isOnColor ? '#ffffff' : '#475569');
        const resolvedAccent = accentColor || resolvedColor;
        const backLabel = selectedCategory ? `Back to ${selectedSubject}` : 'Back to Main Menu';

        return (
            <div
                className={`mb-4 text-lg font-semibold flex items-center gap-2 ${isOnColor ? '' : 'text-slate-600'}`}
                style={isOnColor ? { color: resolvedColor } : undefined}
            >
                <button
                    type="button"
                    onClick={handleBack}
                    className={`flex items-center gap-2 ${isOnColor ? 'transition-colors' : 'text-sky-600 hover:underline'}`}
                    style={isOnColor ? { color: resolvedAccent } : undefined}
                    aria-label={backLabel}
                >
                    <ArrowLeftIcon />
                    <span>{backLabel}</span>
                </button>
                <span>/</span>
                <span style={isOnColor ? { color: resolvedColor } : undefined}>{selectedSubject}</span>
                {selectedCategory && (
                    <>
                        <span>/</span>
                        <span
                            className={isOnColor ? '' : 'text-slate-800'}
                            style={isOnColor ? { color: resolvedAccent } : undefined}
                        >
                            {selectedCategory}
                        </span>
                    </>
                )}
            </div>
        );
    };

    // View 3: Topic Selection
    if (selectedSubject && selectedCategory) {
        const topics = AppData[selectedSubject].categories[selectedCategory].topics;
        const subjectColors = SUBJECT_COLORS[selectedSubject] || DEFAULT_COLOR_SCHEME;
        const gradientBackground = isDarkMode
            ? SUBJECT_BG_GRADIENTS[selectedSubject]
            : SUBJECT_LIGHT_SURFACE_GRADIENTS[selectedSubject] || SUBJECT_BG_GRADIENTS[selectedSubject];
        const heroStyles = isDarkMode
            ? (gradientBackground
                ? { backgroundImage: gradientBackground }
                : subjectColors.background
                    ? { backgroundColor: subjectColors.background }
                    : { backgroundColor: DEFAULT_COLOR_SCHEME.background })
            : {
                backgroundColor: '#ffffff',
                backgroundImage: gradientBackground || 'linear-gradient(135deg, rgba(255,255,255,0.98), rgba(148,163,184,0.12))',
                border: `1px solid ${SUBJECT_LIGHT_TINTS[selectedSubject] || 'rgba(148,163,184,0.35)'}`,
            };
        const heroTextColor = isDarkMode
            ? subjectColors.heroText || subjectColors.onBackgroundText || '#ffffff'
            : subjectColors.text || subjectColors.accent || '#0f172a';
        const heroAccentColor = subjectColors.accent || subjectColors.text || '#0f172a';
        const backButtonStyle = isDarkMode
            ? {
                backgroundColor: 'rgba(255,255,255,0.18)',
                color: heroTextColor,
                border: `1px solid ${subjectColors.border || 'rgba(255,255,255,0.25)'}`,
            }
            : {
                backgroundColor: '#ffffff',
                color: heroAccentColor,
                border: `1px solid ${SUBJECT_LIGHT_TINTS[selectedSubject] || 'rgba(148,163,184,0.35)'}`,
            };
        return (
            <>
                <div
                    className="animate-floatIn rounded-2xl -m-4 sm:-m-6 md:-m-8 p-4 sm:p-6 md:p-8 shadow-2xl"
                    style={{
                        ...heroStyles,
                        color: heroTextColor,
                    }}
                >
                    <Breadcrumb variant="onColor" color={heroTextColor} accentColor={heroAccentColor} />
                    <h2 className="text-3xl font-extrabold mb-4" style={{ color: heroTextColor }}>
                        {selectedCategory}
                    </h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {topics.map((topic, topicIndex) => {
                            const quizSets = Array.isArray(topic.quizzes)
                                ? topic.quizzes.filter((quiz) => quizHasAvailableQuestions(selectedSubject, topic, quiz))
                                : [];
                            const quizCountLabel = quizSets.length
                                ? `${quizSets.length} quiz ${quizSets.length === 1 ? 'set' : 'sets'}`
                                : '';
                            const supportsMultipleQuizzes = quizSets.length > 0 && !['essay', 'simulation', 'graphing_tool'].includes(topic.type);
                            const buttonStyle = {
                                backgroundColor: subjectColors.accent || DEFAULT_COLOR_SCHEME.accent,
                                color: subjectColors.accentText || '#ffffff',
                                borderColor: subjectColors.border || subjectColors.accent || DEFAULT_COLOR_SCHEME.accent,
                            };
                            const defaultButtonLabel = (topic.type === 'essay' || topic.type === 'simulation' || topic.type === 'graphing_tool')
                                ? 'Open'
                                : 'Start Quiz';

                            const launchQuizSet = (quiz, index) => {
                                if (typeof onSelectQuiz !== 'function' || !quiz) {
                                    return;
                                }
                                const quizLabel = quiz.label || `Quiz ${String.fromCharCode(65 + index)}`;
                                const baseTitle = topic.title || 'Quiz';
                                const derivedTitle = quiz.title || `${baseTitle} — ${quizLabel}`;
                                const quizIdBase = topic.id || `topic_${topicIndex}`;
                                const resolvedQuestions = resolveQuizQuestions(selectedSubject, topic, quiz)
                                    .map((question, questionIndex) => {
                                        if (question && typeof question === 'object') {
                                            const nextNumber = question.questionNumber ?? (questionIndex + 1);
                                            return { ...question, questionNumber: nextNumber };
                                        }
                                        return question;
                                    });

                                if (!resolvedQuestions.length) {
                                    alert('This quiz does not have any questions yet. Please try another set.');
                                    return;
                                }

                                const quizCode = quiz.quizCode || `${quizIdBase}_set_${index}`;
                                onSelectQuiz(
                                    {
                                        ...quiz,
                                        id: quiz.quizId || quizCode,
                                        quizCode,
                                        title: derivedTitle,
                                        topicId: topic.id,
                                        topicTitle: topic.title || baseTitle,
                                        description: quiz.description || topic.description,
                                        type: quiz.type || topic.type || 'quiz',
                                        questions: resolvedQuestions,
                                    },
                                    selectedSubject
                                );
                            };

                            return (
                                <div
                                    key={topic.id || `topic_${topicIndex}`}
                                    className="rounded-xl border bg-white/95 dark:bg-slate-900/80 dark:border-slate-700 p-5 flex flex-col justify-between shadow-lg transition-all duration-200 ease-in-out hover:-translate-y-1 hover:shadow-2xl"
                                    style={{
                                        borderColor: subjectColors.border || 'rgba(255,255,255,0.4)',
                                        color: subjectColors.text || '#0f172a',
                                    }}
                                >
                                    <div>
                                        <h3 className="text-xl font-bold" style={{ color: subjectColors.text || '#0f172a' }}>
                                            {topic.title}
                                        </h3>
                                        <p className="text-slate-600 dark:text-slate-300 text-sm my-3 flex-grow">{topic.description}</p>
                                    </div>
                                    {supportsMultipleQuizzes ? (
                                        <div className="mt-2 space-y-3 w-full">
                                            <div className="flex flex-wrap gap-2 text-xs font-semibold uppercase tracking-wide text-slate-500">
                                                {quizSets.map((quiz, index) => {
                                                    const label = quiz.label || `Quiz ${String.fromCharCode(65 + index)}`;
                                                    return (
                                                        <span
                                                            key={`label-${topic.id || `topic_${topicIndex}`}-${index}`}
                                                            className="px-2 py-1 rounded-full bg-slate-100 text-slate-700"
                                                        >
                                                            {label}
                                                        </span>
                                                    );
                                                })}
                                            </div>
                                            <div className="grid gap-2">
                                                {quizSets.map((quiz, index) => {
                                                    const label = quiz.label || `Quiz ${String.fromCharCode(65 + index)}`;
                                                    return (
                                                        <button
                                                            key={quiz.quizId || `${topic.id || `topic_${topicIndex}`}_quiz_${index}`}
                                                            onClick={() => launchQuizSet(quiz, index)}
                                                            className="w-full mt-2 px-4 py-2 rounded-lg font-semibold shadow-sm transition hover:opacity-95"
                                                            style={buttonStyle}
                                                        >
                                                            Start {label}
                                                        </button>
                                                    );
                                                })}
                                            </div>
                                        </div>
                                    ) : (
                                        (() => {
                                            const fallbackTopicSlug = sanitizeCodeSegment(topic.title || `topic-${topicIndex + 1}`, `topic-${topicIndex + 1}`);
                                            const subjectSlug = sanitizeCodeSegment(selectedSubject, 'subject');
                                            const topicQuizCode = topic.quizCode || topic.id || `${subjectSlug}__${fallbackTopicSlug}`;
                                            return (
                                                <button
                                                    onClick={() => onSelectQuiz({ ...topic, id: topic.quizCode || topicQuizCode, quizCode: topicQuizCode }, selectedSubject)}
                                                    className="w-full mt-2 px-4 py-2 rounded-lg font-semibold shadow-sm transition hover:opacity-95"
                                                    style={buttonStyle}
                                                >
                                                    {defaultButtonLabel}
                                                </button>
                                            );
                                        })()
                                    )}
                                </div>
                            );
                        })}
                    </div>
                    <div className="mt-6">
                        <button
                            type="button"
                            onClick={handleBack}
                            className="inline-flex items-center gap-2 px-4 py-2 rounded-lg font-semibold transition"
                            style={backButtonStyle}
                        >
                            <ArrowLeftIcon />
                            <span>Back to {selectedSubject}</span>
                        </button>
                    </div>
                </div>
            </>
        );
    }

    // View 2: Category Selection (with updated "Smith a Quiz" box)
    if (selectedSubject) {
        const subject = AppData[selectedSubject];
        const subjectColors = SUBJECT_COLORS[selectedSubject] || {};
        const gradientBackground = isDarkMode
            ? SUBJECT_BG_GRADIENTS[selectedSubject]
            : SUBJECT_LIGHT_SURFACE_GRADIENTS[selectedSubject] || SUBJECT_BG_GRADIENTS[selectedSubject];
        const heroStyles = isDarkMode
            ? (gradientBackground
                ? { backgroundImage: gradientBackground }
                : subjectColors.background
                    ? { backgroundColor: subjectColors.background }
                    : { backgroundColor: DEFAULT_COLOR_SCHEME.background })
            : {
                backgroundColor: '#ffffff',
                backgroundImage: gradientBackground || 'linear-gradient(135deg, rgba(255,255,255,0.98), rgba(148,163,184,0.12))',
                border: `1px solid ${SUBJECT_LIGHT_TINTS[selectedSubject] || 'rgba(148,163,184,0.35)'}`,
            };
        const heroTextColor = isDarkMode
            ? subjectColors.heroText || subjectColors.onBackgroundText || '#ffffff'
            : subjectColors.text || subjectColors.accent || '#0f172a';
        const heroAccentColor = subjectColors.accent || subjectColors.text || '#0f172a';
        const heroMutedTextStyle = isDarkMode
            ? { color: 'rgba(255,255,255,0.85)' }
            : { color: heroTextColor, opacity: 0.75 };
        const panelBorderColor = isDarkMode
            ? subjectColors.border || 'rgba(255,255,255,0.55)'
            : SUBJECT_LIGHT_TINTS[selectedSubject] || 'rgba(148,163,184,0.35)';
        const panelBaseStyle = {
            borderColor: panelBorderColor,
            backgroundColor: isDarkMode ? 'rgba(255,255,255,0.08)' : '#ffffff',
            color: heroTextColor,
        };
        const panelBackground = !isDarkMode && SUBJECT_LIGHT_SURFACE_GRADIENTS[selectedSubject];
        if (panelBackground) {
            panelBaseStyle.backgroundImage = panelBackground;
        }
        const selectStyle = isDarkMode
            ? {
                border: `1px solid ${subjectColors.border || 'rgba(255,255,255,0.35)'}`,
                backgroundColor: 'rgba(15,23,42,0.85)',
                color: '#f8fafc',
            }
            : {
                border: `1px solid ${panelBorderColor}`,
                backgroundColor: '#ffffff',
                color: '#0f172a',
            };
        const backButtonStyle = isDarkMode
            ? {
                backgroundColor: 'rgba(255,255,255,0.18)',
                color: heroTextColor,
                border: `1px solid ${subjectColors.border || 'rgba(255,255,255,0.25)'}`,
            }
            : {
                backgroundColor: '#ffffff',
                color: heroAccentColor,
                border: `1px solid ${SUBJECT_LIGHT_TINTS[selectedSubject] || 'rgba(148,163,184,0.35)'}`,
            };
        const subjectVocabulary = Array.isArray(vocabularyData[selectedSubject]) ? vocabularyData[selectedSubject] : [];
        return (
            <>
                {viewScienceFormulas && (
                    <ScienceFormulaSheet onClose={() => setViewScienceFormulas(false)} />
                )}
                <div
                    className="animate-floatIn rounded-2xl -m-4 sm:-m-6 md:-m-8 p-4 sm:p-6 md:p-8 shadow-2xl"
                    style={{
                        ...heroStyles,
                        color: heroTextColor,
                    }}
                >
                    <Breadcrumb variant="onColor" color={heroTextColor} accentColor={heroAccentColor} />
                    <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between mb-4">
                        <h2 className="text-3xl font-extrabold" style={{ color: heroTextColor }}>
                            {selectedSubject}
                        </h2>
                        {(selectedSubject === 'Math' || selectedSubject === 'Science') && (
                            <div className="flex flex-wrap gap-2">
                                {selectedSubject === 'Math' && (
                                    <>
                                        <button
                                            onClick={() => onOpenMathTools?.()}
                                            className="px-4 py-2 bg-sky-500 text-white font-semibold rounded-lg shadow-sm hover:bg-sky-600 transition"
                                        >
                                            Math Practice Tools
                                        </button>
                                        <button
                                            onClick={() => setShowFormulaSheet(true)}
                                            className="px-4 py-2 bg-white/90 text-sky-700 font-semibold rounded-lg hover:bg-white transition"
                                        >
                                            Formula Sheet
                                        </button>
                                    </>
                                )}
                                {selectedSubject === 'Science' && (
                                    <button
                                        type="button"
                                        onClick={() => setViewScienceFormulas(true)}
                                        className="px-4 py-2 font-semibold rounded-lg border-2 transition hover:opacity-90"
                                        style={{
                                            borderColor: isDarkMode ? subjectColors.border || 'rgba(255,255,255,0.5)' : panelBorderColor,
                                            color: heroAccentColor,
                                            backgroundColor: isDarkMode ? 'transparent' : '#ffffff',
                                        }}
                                    >
                                        View Science Formula Sheet
                                    </button>
                                )}
                            </div>
                        )}
                    </div>
                    {subjectVocabulary.length > 0 && (
                        <SubjectVocabularySection
                            subject={selectedSubject}
                            words={subjectVocabulary}
                        />
                    )}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {Object.entries(subject.categories).map(([categoryName, category]) => {
                            const cardStyle = {
                                borderColor: subjectColors.border || panelBorderColor,
                                color: subjectColors.text || heroTextColor,
                            };
                            return (
                                <button
                                    key={categoryName}
                                    onClick={() => handleSelectCategory(categoryName)}
                                    className="text-left border rounded-lg p-4 flex flex-col justify-between bg-white dark:bg-slate-900/75 dark:border-slate-700 transition-all duration-200 ease-in-out hover:shadow-lg hover:-translate-y-1"
                                    style={cardStyle}
                                >
                                    <h3 className="text-xl font-bold" style={{ color: subjectColors.text || heroTextColor }}>
                                        {categoryName}
                                    </h3>
                                    <p className="text-slate-500 dark:text-slate-300 text-sm my-2 flex-grow">
                                        {category.description}
                                    </p>
                                </button>
                            );
                        })}
                        {(selectedSubject === 'Social Studies' || selectedSubject === 'Reasoning Through Language Arts (RLA)' || selectedSubject === 'Science' || selectedSubject === 'Math') && (
                            <>
                                {selectedSubject === 'Reasoning Through Language Arts (RLA)' && (
                                    <div
                                        className="border-2 border-dashed rounded-lg p-4 flex flex-col justify-between hover:shadow-lg transition-all"
                                        style={{ ...panelBaseStyle, borderStyle: 'dashed' }}
                                    >
                                        <div>
                                            <div className="flex items-center justify-center gap-2" style={{ color: heroAccentColor }}>
                                                <BookOpenIcon className="h-8 w-8" />
                                                <h3 className="text-xl font-bold" style={{ color: heroTextColor }}>Essay Practice Tool</h3>
                                            </div>
                                            <p className="text-sm my-2 text-center" style={heroMutedTextStyle}>
                                                Build your extended response with guided support.
                                            </p>
                                        </div>
                                        <button
                                            onClick={() => onSelectQuiz({ id: 'essay_practice_tool', type: 'essay', title: 'GED® Essay Practice Toolkit' }, selectedSubject)}
                                            className="w-full mt-2 px-4 py-2 bg-white text-slate-900 font-semibold rounded-md hover:bg-white/90 transition"
                                        >
                                            Launch Essay Practice
                                        </button>
                                    </div>
                                )}
                                <div
                                    className="border-2 border-dashed rounded-lg p-4 flex flex-col justify-between hover:shadow-lg transition-all"
                                    style={{ ...panelBaseStyle, borderStyle: 'dashed' }}
                                >
                                    <div>
                                        <div className="flex items-center justify-center gap-2" style={{ color: heroAccentColor }}>
                                            <SparklesIcon className="h-8 w-8" />
                                            <h3 className="text-xl font-bold" style={{ color: heroTextColor }}>Smith a Quiz</h3>
                                        </div>
                                        <p className="text-sm my-2 text-center" style={heroMutedTextStyle}>
                                            Generate a new quiz for any topic in {selectedSubject}.
                                        </p>
                                        <div className="mt-2">
                                            <label
                                                className="block font-semibold mb-1"
                                                htmlFor="ai-quiz-topic"
                                                style={{ color: heroTextColor }}
                                            >
                                                Choose a topic
                                            </label>
                                            <select
                                                id="ai-quiz-topic"
                                                value={aiQuizTopic}
                                                onChange={(e) => setAiQuizTopic(e.target.value)}
                                                className="w-full px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-0"
                                                style={selectStyle}
                                            >
                                                <option value="">Select a topic</option>
                                                {availableTopics.map(topic => topic && <option key={topic} value={topic}>{topic}</option>)}
                                            </select>
                                        </div>
                                    </div>
                                    <button
                                        onClick={() => onSelectGenerator(selectedSubject, aiQuizTopic, setIsLoading, setLoadingMessage)}
                                        disabled={!aiQuizTopic}
                                        className="w-full mt-2 px-4 py-2 bg-white text-slate-900 font-semibold rounded-md transition hover:bg-white/90 disabled:bg-white/60 disabled:text-slate-400 disabled:cursor-not-allowed"
                                    >
                                        Generate Quiz
                                    </button>
                                </div>
                                <div
                                    className="border-2 border-dashed rounded-lg p-4 flex flex-col justify-center items-center hover:shadow-lg transition-all md:col-span-2 lg:col-span-1"
                                    style={{ ...panelBaseStyle, borderStyle: 'dashed' }}
                                >
                                    <SparklesIcon className="h-8 w-8" style={{ color: heroAccentColor }} />
                                    <h3 className="text-xl font-bold mt-2" style={{ color: heroTextColor }}>Comprehensive Exam</h3>
                                    <p className="text-sm my-2 text-center" style={heroMutedTextStyle}>
                                        Take a full-length practice exam for {selectedSubject}.
                                    </p>
                                    <button onClick={async () => await onStartComprehensiveExam(selectedSubject)} className="w-full mt-2 px-4 py-2 bg-white text-slate-900 font-semibold rounded-md hover:bg-white/90 transition">
                                        Start Comprehensive Exam
                                    </button>
                                </div>
                            </>
                        )}
                    </div>
                    <div className="mt-6">
                        <button
                            type="button"
                            onClick={handleBack}
                            className="inline-flex items-center gap-2 px-4 py-2 rounded-lg font-semibold transition"
                            style={backButtonStyle}
                        >
                            <ArrowLeftIcon />
                            <span>Back to Main Menu</span>
                        </button>
                    </div>
                </div>
            </>
        );
    }

    // View 1: Subject Selection (Default)
    return (
        <>
            <div className="fade-in">
                <header className="text-center pb-4 mb-4">
                {currentUser ? (
                    <div className="flex flex-col items-center gap-2">
                        {currentUser.picture ? (
                            <img src={currentUser.picture} alt="User" className="w-16 h-16 rounded-full shadow-lg" />
                        ) : (
                                <div className="w-16 h-16 rounded-full bg-sky-600 text-white flex items-center justify-center text-2xl font-bold shadow-lg">
                                    {userInitial}
                                </div>
                            )}
                            <h1 className="text-4xl font-extrabold text-slate-800 dark:text-slate-100">Welcome, {userDisplayName}!</h1>
                            <p className="text-slate-500 dark:text-slate-300">Please select a subject to begin.</p>
                            <button onClick={onLogout} className="text-sm font-semibold text-sky-600 hover:text-sky-800 dark:text-sky-300 dark:hover:text-sky-200">[ Log Out ]</button>
                        </div>
                    ) : (
                        <>
                            <h1 className="text-4xl font-extrabold text-slate-800 dark:text-slate-100">Mr. Smith's Learning Canvas</h1>
                            <p className="text-slate-500 dark:text-slate-300 mt-2">An interactive learning experience.</p>
                        </>
                    )}
                </header>
                {currentUser && (
                    <div className="grid gap-4 md:grid-cols-2 mb-6">
                        <article className="glass rounded-2xl border border-slate-200/70 dark:border-slate-700/60 bg-white/70 dark:bg-slate-800/70 p-5 shadow-lg space-y-2">
                            <div className="flex items-center justify-between">
                                <h2 className="text-lg font-semibold text-slate-800 dark:text-slate-100">Upcoming Tests</h2>
                                <button
                                    type="button"
                                    onClick={goToProfile}
                                    className="text-sm font-semibold text-sky-600 hover:text-sky-800 dark:text-sky-300 dark:hover:text-sky-200"
                                >
                                    Edit
                                </button>
                            </div>
                            {allSubjectsPassed ? (
                                <p className="text-sm text-emerald-600">You marked every GED subject as passed. Amazing work!</p>
                            ) : nextUpcomingSummary ? (
                                <>
                                    <p className="text-sm text-slate-600 dark:text-slate-300">
                                        Next: <span className="font-semibold text-slate-800 dark:text-slate-100">{nextUpcomingSummary.subject}</span> on{' '}
                                        <span className="font-semibold text-slate-800 dark:text-slate-100">{nextUpcomingSummary.testDate}</span>
                                        {nextUpcomingSummary.daysUntilText && (
                                            <> · {nextUpcomingSummary.daysUntilText} remaining</>
                                        )}
                                    </p>
                                    {nextUpcomingSummary.location && (
                                        <p className="text-sm text-slate-600 dark:text-slate-300">Location: {nextUpcomingSummary.location}</p>
                                    )}
                                </>
                            ) : hasSavedTest ? (
                                <p className="text-sm text-slate-600 dark:text-slate-300">Keep adding your remaining test dates to stay organized.</p>
                            ) : (
                                <p className="text-sm text-slate-600 dark:text-slate-300">Set your test dates to start the countdown.</p>
                            )}
                            <p className="text-xs text-slate-500 dark:text-slate-400">Need changes? Update them from your profile.</p>
                        </article>
                        <article className="glass rounded-2xl border border-slate-200/70 dark:border-slate-700/60 bg-white/70 dark:bg-slate-800/70 p-5 shadow-lg space-y-2">
                            <div className="flex items-center justify-between">
                                <h2 className="text-lg font-semibold text-slate-800 dark:text-slate-100">Learning Challenges</h2>
                                <button
                                    type="button"
                                    onClick={goToProfile}
                                    className="text-sm font-semibold text-sky-600 hover:text-sky-800 dark:text-sky-300 dark:hover:text-sky-200"
                                >
                                    Update
                                </button>
                            </div>
                            {selectedChallenges.length ? (
                                <ul className="space-y-1 text-sm text-slate-600 dark:text-slate-300">
                                    {displayedChallenges.map((challenge) => (
                                        <li key={challenge.id}>• {challenge.label || `${challenge.subject} — ${challenge.subtopic}`}</li>
                                    ))}
                                    {hiddenChallengeCount > 0 && (
                                        <li className="text-xs text-slate-500 dark:text-slate-400">and {hiddenChallengeCount} more…</li>
                                    )}
                                </ul>
                            ) : (
                                <p className="text-sm text-slate-600 dark:text-slate-300">Tell us what topics to focus on to unlock a tailored plan.</p>
                            )}
                            {!onboardingComplete && (
                                <p className="text-xs text-rose-500">Finish selecting challenges to complete onboarding.</p>
                            )}
                        </article>
                    </div>
                )}
                {currentUser && (
                    <div id="progress" className="animate-floatIn">
                        <ProgressDashboard progress={progress} onSubjectClick={setDetailedViewSubject} />
                    </div>
                )}
                {profileData && (
                    <div className="mb-6">
                        <RecentScoresPanel
                            title="Latest Scores"
                            summary={recentDashboardSummary}
                            legacyScores={profileData?.scores}
                            loading={false}
                        />
                    </div>
                )}
                {hasVocabulary && (
                    <div className="mb-6 space-y-6">
                        <VocabularyTicker vocabulary={vocabularyData} onWordClick={handleViewVocabulary} />
                        <VocabularyOverview vocabulary={vocabularyData} onWordClick={handleViewVocabulary} />
                    </div>
                )}
                <div className="my-6 text-center">
                    <button
                        onClick={onStartPopQuiz}
                        className="px-8 py-4 bg-purple-600 text-white font-bold rounded-lg shadow-lg hover:bg-purple-700 transition-transform transform hover:scale-105"
                    >
                        Start a 5-Minute Pop Quiz ⏱️
                    </button>
                </div>
                <div id="quizzes" className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    {Object.entries(AppData).map(([subjectName, subject]) => {
                        const IconComponent = ICONS[subject.icon];
                        const colorScheme = SUBJECT_COLORS[subjectName] || {};
                        const gradientBackground = SUBJECT_BG_GRADIENTS[subjectName];
                        const iconWrapperStyle = gradientBackground
                            ? { backgroundImage: gradientBackground }
                            : colorScheme.background
                                ? { backgroundColor: colorScheme.background }
                                : { backgroundColor: DEFAULT_COLOR_SCHEME.background };
                        const subjectTextColor = colorScheme.text || '#ffffff';
                        return (
                            <button
                                key={subjectName}
                                onClick={() => handleSelectSubject(subjectName)}
                                className="subject-card glass group flex flex-col items-center justify-between gap-4 p-6 rounded-2xl border border-slate-200/70 dark:border-slate-700/70 shadow-lg transition-all duration-300"
                            >
                                <div
                                    className="w-full rounded-xl py-6 flex items-center justify-center shadow-inner"
                                    style={{
                                        ...iconWrapperStyle,
                                        color: subjectTextColor,
                                    }}
                                >
                                    <IconComponent className="h-12 w-12 text-white drop-shadow" />
                                </div>
                                <h2 className="text-xl font-semibold text-slate-800 dark:text-slate-100" style={{ color: colorScheme.text || undefined }}>
                                    {subjectName}
                                </h2>
                                <span className="text-sm text-slate-500 dark:text-slate-300">Explore lessons &amp; quizzes</span>
                            </button>
                        );
                    })}
                </div>
            </div>
        </>
    );
}


function Stem({ item }) {
    const passageContent = typeof item.passage === 'string' ? item.passage.trim() : '';
    const questionContent = typeof (item.questionText || item.question) === 'string'
        ? (item.questionText || item.question).trim()
        : '';

    const displaySource = (item?.asset && item.asset.displaySource)
        || item.displaySource
        || item.source
        || '';

    return (
        <div className="stem space-y-4">
            {item.stimulusImage?.src && (
                <div className="mb-3">
                    <img
                        src={item.stimulusImage.src}
                        alt={item.stimulusImage.alt || 'stimulus'}
                        className="max-w-full rounded-md shadow"
                        loading="lazy"
                    />
                </div>
            )}

            {passageContent && (
                <MathText
                    text={passageContent}
                    className="question-stem block"
                    itemIndex={`${item.questionNumber}-passage`}
                    subject={item.subject}
                />
            )}

            {questionContent && (
                <div className="mt-2">
                    <MathText
                        text={questionContent}
                        className="question-stem block font-bold text-slate-900"
                        itemIndex={`${item.questionNumber}-question`}
                        subject={item.subject}
                    />
                </div>
            )}

            {displaySource && (
                <div className="mt-2 text-xs opacity-70">Source: {displaySource}</div>
            )}
        </div>
    );
}

function QuizInterface({ questions, answers, setAnswers, onComplete, buttonText, quizTitle, onExit, timeLimit, subject, showTimer = true, quizConfig }) {
    const [currentIndex, setCurrentIndex] = useState(0);
    const [marked, setMarked] = useState(Array(questions.length).fill(false));
    const [confidence, setConfidence] = useState(Array(questions.length).fill(null));
    const [timeLeft, setTimeLeft] = useState(timeLimit || questions.length * 90);
    const [isPaused, setIsPaused] = useState(false);
    const [pausesRemaining, setPausesRemaining] = useState(2);
    const handleSubmitRef = useRef(() => {});
    const [showMathFormulas, setShowMathFormulas] = useState(false);
    const [showScienceFormulas, setShowScienceFormulas] = useState(false);

    useEffect(() => {
        setTimeLeft(timeLimit || questions.length * 90);
        setIsPaused(false);
        setPausesRemaining(2);
    }, [questions, timeLimit]);

    useEffect(() => {
        if (!onComplete || isPaused) return; // Don't run timer if there's no completion action (e.g., in a part of a larger quiz)
        const timer = setInterval(() => {
            setTimeLeft(prev => {
                if (prev <= 1) {
                    clearInterval(timer);
                    handleSubmitRef.current?.();
                    return 0;
                }
                return prev - 1;
            });
        }, 1000);
        return () => clearInterval(timer);
    }, [onComplete, isPaused]);

    const handleSelect = (optionText) => {
        const newAnswers = [...answers];
        newAnswers[currentIndex] = optionText;
        setAnswers(newAnswers);
    };

    const handleInputChange = (e) => {
        const newAnswers = [...answers];
        newAnswers[currentIndex] = e.target.value;
        setAnswers(newAnswers);
    };

    const handleConfidenceSelect = (level) => {
        const newConfidence = [...confidence];
        newConfidence[currentIndex] = level;
        setConfidence(newConfidence);
    };

    const handleSubmit = useCallback(() => {
        onComplete({ answers, marked, confidence });
    }, [answers, marked, onComplete, confidence]);

    useEffect(() => {
        handleSubmitRef.current = handleSubmit;
    }, [handleSubmit]);

    const handlePauseToggle = () => {
        if (isPaused) {
            setIsPaused(false);
            return;
        }
        if (pausesRemaining > 0) {
            setIsPaused(true);
            setPausesRemaining(prev => prev - 1);
        }
    };

    const formatTime = (seconds) => {
        const safeSeconds = Math.max(0, seconds);
        return `${Math.floor(safeSeconds / 60)}:${(safeSeconds % 60).toString().padStart(2, '0')}`;
    };
    const currentQ = questions[currentIndex];
    if (!currentQ) return <div>Loading question...</div>;

    const isFillInTheBlank = currentQ.type === 'fill-in-the-blank' || (!currentQ.answerOptions || currentQ.answerOptions.length === 0);

    const subjectForRender = currentQ.subject || subject || 'Default';
    const quizSubject = subject || 'Default';
    const formulaSheetEnabled = Boolean(quizConfig?.formulaSheet);
    const canShowMathFormulas = formulaSheetEnabled && quizSubject === 'Math';
    const canShowScienceFormulas = formulaSheetEnabled && quizSubject === 'Science';
    const subjectColors = SUBJECT_COLORS[subjectForRender] || {};
    const scheme = { ...DEFAULT_COLOR_SCHEME, ...subjectColors };
    const timerStyle = timeLeft <= 60
        ? { backgroundColor: scheme.timerLowBg, color: scheme.timerLowText }
        : { backgroundColor: scheme.timerDefaultBg, color: scheme.timerDefaultText };

    return (
        <div className="fade-in">
            {canShowMathFormulas && showMathFormulas && (
                <FormulaSheetModal onClose={() => setShowMathFormulas(false)} />
            )}
            {canShowScienceFormulas && showScienceFormulas && (
                <ScienceFormulaSheet onClose={() => setShowScienceFormulas(false)} />
            )}
            <div
                className="rounded-2xl p-4 sm:p-6 shadow-lg"
                style={{ backgroundColor: scheme.surface, border: `1px solid ${scheme.surfaceBorder}` }}
            >
                {showTimer && (
                    <header
                        className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between pb-4 mb-4"
                        style={{ borderBottom: `1px solid ${scheme.divider}` }}
                    >
                        {onExit && (
                            <button
                                onClick={onExit}
                                className="flex items-center gap-1 text-sm font-semibold hover:underline"
                                style={{ color: scheme.mutedText }}
                            >
                                <ArrowLeftIcon /> Back
                            </button>
                        )}
                        <h2
                            className="flex-1 text-center text-xl font-bold"
                            style={{ color: scheme.text }}
                        >
                            {quizTitle}
                        </h2>
                        <div className="flex flex-col sm:items-end gap-2">
                            <div
                                className="flex items-center gap-2 rounded-full px-3 py-1 font-mono text-lg font-semibold"
                                style={timerStyle}
                            >
                                <span role="img" aria-label="timer">⏱️</span>
                                <span>{formatTime(timeLeft)}</span>
                                {isPaused && (
                                    <span className="text-xs uppercase tracking-wide" style={{ color: scheme.mutedText }}>
                                        Paused
                                    </span>
                                )}
                            </div>
                            <div className="flex items-center gap-2">
                                <button
                                    type="button"
                                    onClick={handlePauseToggle}
                                    disabled={!isPaused && pausesRemaining === 0}
                                    className="rounded-md px-3 py-1 text-sm font-semibold transition-colors"
                                    style={isPaused
                                        ? {
                                            backgroundColor: 'var(--success-bg)',
                                            color: 'var(--success-text)',
                                            border: '1px solid var(--success-border)',
                                        }
                                        : {
                                            backgroundColor: scheme.accent,
                                            color: scheme.accentText,
                                            border: `1px solid ${scheme.accent}`,
                                        }
                                    }
                                >
                                    {isPaused ? 'Resume Timer' : 'Pause Timer'}
                                </button>
                                <span className="text-xs" style={{ color: scheme.mutedText }}>
                                    {pausesRemaining} pause{pausesRemaining === 1 ? '' : 's'} left
                                </span>
                            </div>
                            {formulaSheetEnabled && (
                                <div className="flex flex-wrap justify-end gap-2">
                                    {canShowMathFormulas && (
                                        <button
                                            type="button"
                                            onClick={() => setShowMathFormulas(true)}
                                            className="rounded-md px-3 py-1.5 text-sm font-semibold shadow-sm transition"
                                            data-role="secondary"
                                            style={{
                                                color: scheme.accentText,
                                                borderColor: scheme.accent,
                                            }}
                                        >
                                            View Formula Sheet
                                        </button>
                                    )}
                                    {canShowScienceFormulas && (
                                        <button
                                            type="button"
                                            onClick={() => setShowScienceFormulas(true)}
                                            className="rounded-md px-3 py-1.5 text-sm font-semibold shadow-sm transition"
                                            data-role="secondary"
                                            style={{
                                                color: 'var(--danger-text)',
                                                borderColor: 'var(--danger-border)',
                                            }}
                                        >
                                            View Science Formula Sheet
                                        </button>
                                    )}
                                </div>
                            )}
                        </div>
                    </header>
                )}

                <div className="mb-4 flex flex-wrap gap-2 quiz-nav">
                    {questions.map((_, i) => {
                        const isActive = i === currentIndex;
                        const isAnswered = Boolean(answers[i]);
                        const navStyle = isActive
                            ? { backgroundColor: scheme.background, color: scheme.onBackgroundText }
                            : isAnswered
                                ? { backgroundColor: scheme.navAnsweredBg, color: scheme.navAnsweredText }
                                : { backgroundColor: scheme.navDefaultBg, color: scheme.navDefaultText };
                        if (marked[i]) {
                            navStyle.boxShadow = `0 0 0 2px ${scheme.navMarkedRing}`;
                        }
                        return (
                            <button
                                key={i}
                                onClick={() => setCurrentIndex(i)}
                                className="h-8 w-8 rounded-full text-sm font-bold transition"
                                style={navStyle}
                            >
                                {i + 1}
                            </button>
                        );
                    })}
                </div>

                <div
                    className="rounded-xl p-4 sm:p-6 shadow-inner"
                    style={{
                        border: `1px solid ${scheme.surfaceBorder}`,
                        backgroundColor: scheme.surfaceStrong || scheme.surface,
                    }}
                >
                    <div className="mb-4">
                        <div className="flex items-start gap-3">
                            <span
                                className="text-xl font-semibold leading-relaxed"
                                style={{ color: scheme.text }}
                            >
                                {currentQ.questionNumber}.
                            </span>
                            <Stem item={currentQ} />
                        </div>
                    </div>
                    {currentQ.imageUrl && !currentQ.stimulusImage?.src && (
                        <img
                            src={currentQ.imageUrl}
                            alt={`Visual for question ${currentQ.questionNumber}`}
                            className="my-4 h-auto max-w-full rounded-md"
                            style={{ border: `1px solid ${scheme.surfaceBorder}` }}
                        />
                    )}
                    {GEOMETRY_FIGURES_ENABLED && currentQ.geometrySpec && (
                        <div
                            className="my-4 mx-auto max-w-md rounded-md p-4 shadow-sm"
                            style={{ backgroundColor: 'var(--bg-surface)', border: `1px solid ${scheme.surfaceBorder}` }}
                        >
                            <GeometryFigure spec={currentQ.geometrySpec} className="w-full h-auto" />
                        </div>
                    )}

                    {isFillInTheBlank ? (
                        <div>
                            <label
                                htmlFor="fill-in-blank-answer"
                                className="mb-1 block text-sm font-medium"
                                style={{ color: scheme.mutedText }}
                            >
                                Enter your answer:
                            </label>
                            <input
                                id="fill-in-blank-answer"
                                type="text"
                                value={answers[currentIndex] || ''}
                                onChange={handleInputChange}
                                placeholder="Type your answer here"
                                className="w-full max-w-sm rounded-lg p-3 focus:outline-none"
                                style={{
                                    border: `1px solid ${scheme.inputBorder}`,
                                    color: 'var(--text-primary)',
                                }}
                            />
                        </div>
                    ) : (
                        <div className="space-y-3">
                            {(currentQ.answerOptions || []).map((opt, i) => {
                                const cleanedOptionText = opt.text.trim().replace(/^\$\$/, '$');
                                const isSelected = answers[currentIndex] === opt.text;
                                const optionStyles = {};
                                if (isSelected) {
                                    optionStyles.backgroundColor = scheme.optionSelectedBg;
                                    optionStyles.borderColor = scheme.optionSelectedBorder;
                                    optionStyles.color = scheme.accentText;
                                }
                                return (
                                    <button
                                        key={i}
                                        onClick={() => handleSelect(opt.text)}
                                        className="option w-full text-left transition"
                                        style={optionStyles}
                                    >
                                        <span className="flex-grow text-left" style={{ color: 'var(--text-primary)' }}>
                                            <span className="mr-2 font-bold">{String.fromCharCode(65 + i)}.</span>
                                            <MathText text={cleanedOptionText} className="question-stem" itemIndex={`${currentQ.questionNumber ?? (currentIndex + 1)}-opt-${i}`} subject={subjectForRender} />
                                        </span>
                                    </button>
                                );
                            })}
                        </div>
                    )}
                </div>

                <div className="mt-6 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                    <button
                        onClick={() => setCurrentIndex(p => Math.max(0, p - 1))}
                        disabled={currentIndex === 0}
                        className="rounded-md px-4 py-2 font-semibold transition"
                        data-role="secondary"
                        style={{
                            borderColor: scheme.surfaceBorder,
                            color: scheme.mutedText,
                            opacity: currentIndex === 0 ? 0.6 : 1,
                        }}
                    >
                        Previous
                    </button>
                    <button
                        onClick={() => setMarked(m => { const newM = [...m]; newM[currentIndex] = !newM[currentIndex]; return newM; })}
                        className="rounded-md px-4 py-2 font-semibold transition"
                        style={marked[currentIndex]
                            ? {
                                backgroundColor: scheme.navMarkedRing,
                                color: scheme.onBackgroundText,
                                border: `1px solid ${scheme.navMarkedRing}`,
                            }
                            : {
                                backgroundColor: scheme.navDefaultBg,
                                color: scheme.navDefaultText,
                                border: `1px solid ${scheme.navDefaultBg}`,
                            }
                        }
                    >
                        {marked[currentIndex] ? 'Unmark' : 'Mark'} for Review
                    </button>
                    {currentIndex === questions.length - 1 ? (
                        <button
                            onClick={handleSubmit}
                            className="rounded-md px-4 py-2 font-semibold"
                            data-role="primary"
                            style={{
                                backgroundColor: scheme.accent,
                                color: scheme.accentText,
                                borderColor: scheme.accent,
                            }}
                        >
                            {buttonText || 'Finish'}
                        </button>
                    ) : (
                        <button
                            onClick={() => setCurrentIndex(p => Math.min(questions.length - 1, p + 1))}
                            className="rounded-md px-4 py-2 font-semibold"
                            data-role="primary"
                            style={{
                                backgroundColor: scheme.accent,
                                color: scheme.accentText,
                                borderColor: scheme.accent,
                            }}
                        >
                            Next
                        </button>
                    )}
                </div>
            </div>
        </div>
    );
}

function StandardQuizRunner({ quiz, onComplete, onExit }) {
    const questions = quiz.questions || [];
    const [answers, setAnswers] = useState(Array(questions.length).fill(null));

    const handleComplete = (result) => {
        let score = 0;
        questions.forEach((q, i) => {
            const correctOption = q.answerOptions.find(opt => opt.isCorrect);
            if (correctOption && result.answers[i] === correctOption.text) {
                score++;
            }
        });
        const percentage = (score / questions.length) * 100;
        const scaledScore = Math.round(percentage < 65 ? 100 + (percentage / 65 * 44) : 145 + ((percentage - 65) / 35 * 55));

        onComplete({ score, totalQuestions: questions.length, scaledScore, answers: result.answers, subject: quiz.subject, marked: result.marked, confidence: result.confidence, quiz });
    };

    return <QuizInterface
        questions={questions}
        answers={answers}
        setAnswers={setAnswers}
        onComplete={handleComplete}
        quizTitle={quiz.title}
        onExit={onExit}
        timeLimit={quiz.timeLimit}
        subject={quiz.subject}
        quizConfig={quiz.config}
    />;
}

function MultiPartMathRunner({ quiz, onComplete, onExit }) {
    const [part, setPart] = useState(1);
    const [part1Result, setPart1Result] = useState(null);

    const part1Questions = quiz.questions.slice(0, 5);
    const part2Questions = quiz.questions.slice(5);

    const [part1Answers, setPart1Answers] = useState(Array(part1Questions.length).fill(null));
    const [part2Answers, setPart2Answers] = useState(Array(part2Questions.length).fill(null));

    const handlePart1Complete = (result) => {
        setPart1Result(result);
        setPart('interstitial'); // Go to interstitial screen
    };

    const handlePart2Complete = (result) => {
        const finalAnswers = [...part1Result.answers, ...result.answers];
        const finalMarked = [...part1Result.marked, ...result.marked];
        const finalConfidence = [...part1Result.confidence, ...result.confidence];

        let score = 0;
        quiz.questions.forEach((q, i) => {
            const isFillIn = !q.answerOptions || q.answerOptions.length === 0;
            if (isFillIn) {
                if (String(finalAnswers[i]).trim() === String(q.correctAnswer)) { // Corrected to use correctAnswer
                    score++;
                }
            } else {
                const correctOption = q.answerOptions.find(opt => opt.isCorrect);
                if (correctOption && finalAnswers[i] === correctOption.text) {
                    score++;
                }
            }
        });

        const percentage = (score / quiz.questions.length) * 100;
        const scaledScore = Math.round(percentage < 65 ? 100 + (percentage / 65 * 44) : 145 + ((percentage - 65) / 35 * 55));

        onComplete({ score, totalQuestions: quiz.questions.length, scaledScore, answers: finalAnswers, subject: quiz.subject, marked: finalMarked, confidence: finalConfidence, quiz });
    };

    if (part === 1) {
        return <QuizInterface
            questions={part1Questions}
            answers={part1Answers}
            setAnswers={setPart1Answers}
            onComplete={handlePart1Complete}
            quizTitle="Part 1: Non-Calculator Section"
            buttonText="Continue to Part 2"
            onExit={onExit}
            subject={quiz.subject}
            quizConfig={quiz.config}
        />;
    }

    if (part === 'interstitial') {
        return (
            <div className="text-center p-8 fade-in">
                <h2 className="text-2xl font-bold mb-4">You have completed the non-calculator section.</h2>
                <p className="text-lg mb-6">You may now use a calculator for the remainder of the test.</p>
                <button onClick={() => setPart(2)} className="px-8 py-3 bg-sky-600 text-white font-bold rounded-lg">
                    Start Part 2
                </button>
            </div>
        );
    }

    if (part === 2) {
        return <QuizInterface
            questions={part2Questions}
            answers={part2Answers}
            setAnswers={setPart2Answers}
            onComplete={handlePart2Complete}
            quizTitle="Part 2: Calculator-Permitted Section"
            buttonText="Finish Exam"
            onExit={onExit}
            subject={quiz.subject}
            quizConfig={quiz.config}
        />;
    }

    return null;
}

function QuizRunner({ quiz, onComplete, onExit }) {
    console.log("QuizRunner received quiz:", quiz); // Debugging line
    if (!quiz) return <div className="text-center p-8">Loading quiz...</div>;

    switch (quiz.type) {
        case 'multi-part-math':
            return <MultiPartMathRunner quiz={quiz} onComplete={onComplete} onExit={onExit} />;
        case 'multi-part-rla':
            // The existing MultiPartRlaRunner can be used as is for now
            return <MultiPartRlaRunner quiz={quiz} onComplete={onComplete} onExit={onExit} />;
        default:
            return <StandardQuizRunner quiz={quiz} onComplete={onComplete} onExit={onExit} />;
    }
}

function MultiPartRlaRunner({ quiz, onComplete, onExit }) {
    const [currentPart, setCurrentPart] = useState(1);
    const [isPaused, setIsPaused] = useState(false);
    const [timeLeft, setTimeLeft] = useState(0);
    const [pausesRemaining, setPausesRemaining] = useState(2);

    const PART_TIMES = { 1: 35 * 60, 2: 45 * 60, 3: 70 * 60 };

    const [part1Answers, setPart1Answers] = useState(Array(quiz.part1_reading.length).fill(null));
    const [part3Answers, setPart3Answers] = useState(Array(quiz.part3_language.length).fill(null));
    const [essayText, setEssayText] = useState('');
    const [isScoring, setIsScoring] = useState(false);
    const [essayScore, setEssayScore] = useState(null);
    const [part1Result, setPart1Result] = useState(null);

    useEffect(() => {
        setTimeLeft(PART_TIMES[currentPart]);
        setIsPaused(false);
        setPausesRemaining(2);
    }, [currentPart]);

    useEffect(() => {
        if (isPaused || timeLeft <= 0) return;
        const timerId = setInterval(() => setTimeLeft(t => t - 1), 1000);
        return () => clearInterval(timerId);
    }, [isPaused, timeLeft]);

    const handlePauseToggle = () => {
        if (isPaused) {
            setIsPaused(false);
            return;
        }
        if (pausesRemaining > 0) {
            setIsPaused(true);
            setPausesRemaining(prev => prev - 1);
        }
    };

    const formatTime = (seconds) => `${Math.floor(Math.max(0, seconds) / 60)}:${(Math.max(0, seconds) % 60).toString().padStart(2, '0')}`;

    const handlePart1Complete = (result) => {
        setPart1Result(result);
        setCurrentPart(2);
    };

    const handlePart2Complete = async () => {
        if (isScoring) return;
        const result = await handleScoreEssay();
        if (!result) return;
        setCurrentPart(3);
    };

    const handleFinalSubmit = (part3Result) => {
        const part1Questions = quiz.part1_reading || [];
        const part3Questions = quiz.part3_language || [];

        const part1Data = part1Result || {
            answers: part1Answers,
            marked: Array(part1Questions.length).fill(false),
            confidence: Array(part1Questions.length).fill(null)
        };

        const part3Data = part3Result || {
            answers: part3Answers,
            marked: Array(part3Questions.length).fill(false),
            confidence: Array(part3Questions.length).fill(null)
        };

        const combinedAnswers = [
            ...(part1Data.answers || part1Answers),
            ...(part3Data.answers || part3Answers)
        ];

        const combinedMarked = [
            ...(part1Data.marked || Array(part1Questions.length).fill(false)),
            ...(part3Data.marked || Array(part3Questions.length).fill(false))
        ];

        const combinedConfidence = [
            ...(part1Data.confidence || Array(part1Questions.length).fill(null)),
            ...(part3Data.confidence || Array(part3Questions.length).fill(null))
        ];

        const part1Correct = part1Questions.reduce((count, question, index) => {
            const correctOption = (question.answerOptions || []).find(opt => opt.isCorrect);
            return count + (correctOption && correctOption.text === (part1Data.answers?.[index] ?? null) ? 1 : 0);
        }, 0);

        const part3Correct = part3Questions.reduce((count, question, index) => {
            const correctOption = (question.answerOptions || []).find(opt => opt.isCorrect);
            return count + (correctOption && correctOption.text === (part3Data.answers?.[index] ?? null) ? 1 : 0);
        }, 0);

        const score = part1Correct + part3Correct;
        const totalQuestions = part1Questions.length + part3Questions.length;
        const multipleChoicePercentage = totalQuestions > 0 ? (score / totalQuestions) * 100 : 0;

        const essayOverallScore = typeof essayScore?.overallScore === 'number' ? essayScore.overallScore : null;
        const essayPercentage = essayOverallScore !== null ? (essayOverallScore / 6) * 100 : 0;

        const finalPercentage = (multipleChoicePercentage * 0.6) + (essayPercentage * 0.4);
        const scaledScore = Math.round(finalPercentage < 65 ? 100 + (finalPercentage / 65 * 44) : 145 + ((finalPercentage - 65) / 35 * 55));

        const combinedQuestions = [...part1Questions, ...part3Questions];
        const normalizedQuiz = { ...quiz, questions: combinedQuestions };

        onComplete({
            score,
            totalQuestions,
            scaledScore,
            subject: quiz.subject,
            answers: combinedAnswers,
            marked: combinedMarked,
            confidence: combinedConfidence,
            essayScore,
            multipleChoicePercentage,
            essayPercentage,
            finalPercentage,
            quiz: normalizedQuiz
        });
    };

    const handleScoreEssay = async () => {
        if (!essayText.trim()) {
            alert("Please write an essay before continuing.");
            return null;
        }

        if (isScoring) {
            return essayScore;
        }

        setIsScoring(true);
        try {
            const response = await fetch('https://ged-website.onrender.com/score-essay', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ essayText, completion: '5/5' })
            });
            if (!response.ok) throw new Error('Failed to score essay.');
            const result = await response.json();
            let jsonText = result.candidates[0].content.parts[0].text.replace(/```json/g, '').replace(/```/g, '').trim();
            const parsedScore = JSON.parse(jsonText);
            setEssayScore(parsedScore);
            return parsedScore;
        } catch (error) {
            console.error("Error scoring essay:", error);
            const errorResult = { error: "Sorry, could not score your essay." };
            setEssayScore(errorResult);
            alert("We couldn't score your essay automatically, but you can continue to the final section.");
            return errorResult;
        } finally {
            setIsScoring(false);
        }
    };

    const renderCurrentPart = () => {
        switch (currentPart) {
            case 1:
                return (
                    <div>
                        <h3 className="text-2xl font-bold mb-4">Part 1: Reading Comprehension</h3>
                        <QuizInterface
                            questions={quiz.part1_reading}
                            answers={part1Answers}
                            setAnswers={setPart1Answers}
                            onComplete={handlePart1Complete}
                            quizTitle="Part 1: Reading Comprehension"
                            buttonText="Continue to Essay"
                            subject={quiz.subject}
                            showTimer={false}
                            quizConfig={quiz.config}
                        />
                    </div>
                );
            case 2:
                return (
                    <div>
                        <h3 className="text-2xl font-bold mb-4">Part 2: Extended Response (Essay)</h3>
                        <div className="prose max-w-none bg-slate-50 p-4 rounded-lg mb-4">
                            <h4 className="question-stem">{quiz.part2_essay.passages[0].title}</h4>
                            <div dangerouslySetInnerHTML={{ __html: sanitizeHtmlContent(quiz.part2_essay.passages[0].content, { normalizeSpacing: true }) }} />
                        </div>
                        <div className="prose max-w-none bg-slate-50 p-4 rounded-lg">
                            <h4 className="question-stem">{quiz.part2_essay.passages[1].title}</h4>
                            <div dangerouslySetInnerHTML={{ __html: sanitizeHtmlContent(quiz.part2_essay.passages[1].content, { normalizeSpacing: true }) }} />
                        </div>
                        <div className="mt-4">
                            <h4 className="font-bold">Essay Prompt:</h4>
                            <p className="mb-2">{quiz.part2_essay.prompt}</p>
                            <textarea className="w-full h-64 p-2 border rounded" value={essayText} onChange={(e) => setEssayText(e.target.value)} placeholder="Type your essay response here..."/>
                        </div>
                        <div className="mt-4 flex justify-end">
                            <button
                                type="button"
                                onClick={handlePart2Complete}
                                disabled={isScoring}
                                className="px-6 py-2 bg-sky-600 text-white font-bold rounded-lg disabled:bg-slate-400 disabled:cursor-not-allowed"
                            >
                                {isScoring ? 'Scoring Essay...' : 'Continue to Final Section'}
                            </button>
                        </div>
                        {isScoring && (
                            <p className="mt-2 text-sm text-slate-500">Scoring your essay with AI feedback. Please hold tight...</p>
                        )}
                    </div>
                );
            case 3:
                return (
                    <div>
                        <h3 className="text-2xl font-bold mb-4">Part 3: Language &amp; Grammar</h3>
                        <QuizInterface
                            questions={quiz.part3_language}
                            answers={part3Answers}
                            setAnswers={setPart3Answers}
                            onComplete={handleFinalSubmit}
                            quizTitle="Part 3: Language & Grammar"
                            buttonText="Finish Exam"
                            subject={quiz.subject}
                            showTimer={false}
                            quizConfig={quiz.config}
                        />
                    </div>
                );
            default: return null;
        }
    };

    return (
        <div className="fade-in">
             <header className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between pb-4 mb-4 border-b">
                 <button onClick={onExit} className="flex items-center gap-1 text-sm text-slate-600 hover:text-sky-600 font-semibold"><ArrowLeftIcon /> Back</button>
                 <h2 className="text-xl font-bold text-center text-slate-800 flex-1">{quiz.title}</h2>
                 <div className="flex flex-col sm:items-end gap-2">
                    <div className={`flex items-center gap-2 px-3 py-1 rounded-full font-mono text-lg font-semibold ${timeLeft <= 60 ? 'bg-red-100 text-red-700' : 'bg-slate-100 text-slate-700'}`}>
                        <span role="img" aria-label="timer">⏱️</span>
                        <span>{formatTime(timeLeft)}</span>
                        {isPaused && <span className="text-xs uppercase tracking-wide">Paused</span>}
                    </div>
                    <div className="flex items-center gap-2">
                        <button
                            type="button"
                            onClick={handlePauseToggle}
                            disabled={!isPaused && pausesRemaining === 0}
                            className={`px-3 py-1 rounded-md text-sm font-semibold transition-colors ${isPaused ? 'bg-green-600 text-white hover:bg-green-700' : 'bg-sky-600 text-white hover:bg-sky-700 disabled:bg-slate-300 disabled:text-slate-500 disabled:cursor-not-allowed'}`}
                        >
                            {isPaused ? 'Resume Timer' : 'Pause Timer'}
                        </button>
                        <span className="text-xs text-slate-500">
                            {pausesRemaining} pause{pausesRemaining === 1 ? '' : 's'} left
                        </span>
                    </div>
                 </div>
            </header>
            {isPaused ? (
                <div className="text-center p-12 bg-slate-100 rounded-lg">
                    <h2 className="text-3xl font-bold">Exam Paused</h2>
                    <button onClick={() => setIsPaused(false)} className="mt-4 px-8 py-3 bg-sky-600 text-white font-bold rounded-lg">Resume</button>
                </div>
            ) : renderCurrentPart()}
        </div>
    );
}

function ResultsScreen({ results, quiz, onRestart, onHome, onReviewMarked }) {
    const getPerf = (score) => {
        if (score >= 175) return { level: "GED® College Ready + Credit", color: "text-purple-600" };
        if (score >= 165) return { level: "GED® College Ready", color: "text-blue-600" };
        if (score >= 145) return { level: "GED® Passing Score", color: "text-green-600" };
        return { level: "Keep studying!", color: "text-amber-600" };
    };

    const performance = getPerf(results.scaledScore);
    const markedQuestions = quiz.questions.filter((_, index) => results.marked[index]);

    const performanceByCategory = quiz.questions.reduce((acc, question, index) => {
        const type = question.type || 'knowledge'; // Default type if not specified
        if (!acc[type]) {
            acc[type] = { correct: 0, total: 0 };
        }
        acc[type].total++;
        const correctAnswer = question.answerOptions.find(opt => opt.isCorrect)?.text;
        if (results.answers[index] === correctAnswer) {
            acc[type].correct++;
        }
        return acc;
    }, {});

    const categoryNames = {
        'text': 'Text Analysis',
        'image': 'Image/Map Interpretation',
        'knowledge': 'Knowledge-Based',
        'quote': 'Quote Analysis',
        'cause-effect': 'Cause & Effect',
        'multi-source': 'Multi-Source Analysis',
        'analysis': 'Paired Passage Analysis',
        'chart': 'Chart/Data Analysis'
    };

    return (
        <div className="text-center fade-in">
            <h2 className="text-3xl font-bold text-slate-800">Results: {quiz.title}</h2>
            <div className="my-6">
                <p className="text-lg text-slate-600">Your estimated GED® Score is:</p>
                <p className={`text-6xl font-bold my-2 ${performance.color}`}>{results.scaledScore}</p>
                <p className={`text-2xl font-semibold mb-2 ${performance.color}`}>{performance.level}</p>
                <p className="text-lg text-slate-500">{results.score} / {results.totalQuestions} Correct</p>
            </div>

            <div className="mt-8 pt-6 border-t max-w-lg mx-auto">
                <h3 className="text-xl font-bold text-slate-700 mb-4">Performance by Category</h3>
                <div className="space-y-3 text-left">
                    {Object.entries(performanceByCategory).map(([type, data]) => (
                        <div key={type} className="bg-slate-100 p-3 rounded-lg">
                            <div className="flex justify-between items-center">
                                <span className="font-semibold text-slate-600">{categoryNames[type] || type}</span>
                                <span className="font-bold text-slate-800">{data.correct} / {data.total}</span>
                            </div>
                            <div className="w-full bg-slate-200 rounded-full h-2.5 mt-2">
                                <div className="bg-sky-500 h-2.5 rounded-full" style={{ width: `${(data.correct / data.total) * 100}%` }}></div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>

             <div className="mt-8 flex justify-center gap-4">
                 <button onClick={onHome} className="px-6 py-2 bg-slate-600 text-white font-bold rounded-lg hover:bg-slate-700">Go Home</button>
                 {markedQuestions.length > 0 && (
                    <button onClick={() => onReviewMarked(markedQuestions)} className="px-6 py-2 bg-yellow-500 text-white font-bold rounded-lg hover:bg-yellow-600">
                        Review {markedQuestions.length} Marked
                    </button>
                 )}
                 <button onClick={onRestart} className="px-6 py-2 bg-sky-600 text-white font-bold rounded-lg hover:bg-sky-700">Try Again</button>
            </div>

            <div className="mt-8 pt-6 border-t">
                <h3 className="text-xl font-bold text-slate-700 mb-4">Detailed Question Review</h3>
                <div className="space-y-4 text-left">
                    {(quiz.questions || []).map((question, index) => {
                        const userAnswer = results.answers[index];
                        const correctAnswer = (question.answerOptions || []).find(opt => opt.isCorrect);
                        const isCorrect = correctAnswer && userAnswer === correctAnswer.text;
                        const confidenceLevel = results.confidence ? results.confidence[index] : null;

                        const getConfidenceColor = (level) => {
                            if (level === 'Confident') return 'bg-green-100 text-green-800';
                            if (level === 'Unsure') return 'bg-yellow-100 text-yellow-800';
                            if (level === 'Guessing') return 'bg-red-100 text-red-800';
                            return 'bg-slate-100 text-slate-800';
                        };

                        return (
                            <div key={index} className={`p-4 rounded-lg border ${isCorrect ? 'border-green-200' : 'border-red-200'}`}>
                                <div className="mb-2 flex items-start gap-3">
                                    <span className="font-semibold question-stem leading-relaxed">{question.questionNumber}.</span>
                                    <Stem item={question} />
                                </div>
                                {question.imageUrl && !question.stimulusImage?.src && (
                                    <img src={question.imageUrl} alt={`Visual for question ${question.questionNumber}`} className="my-2 rounded-md border max-w-xs h-auto" />
                                )}
                                {GEOMETRY_FIGURES_ENABLED && question.geometrySpec && (
                                    <div className="my-3 max-w-md">
                                        <GeometryFigure spec={question.geometrySpec} className="w-full h-auto" />
                                    </div>
                                )}
                                <p className={`mt-2 ${isCorrect ? 'text-green-700' : 'text-red-700'}`}>
                                    Your answer: {userAnswer || "No answer"} {isCorrect ? '✔' : '✘'}
                                </p>
                                {!isCorrect && correctAnswer && (
                                    <p className="text-green-700 question-stem">
                                        Correct answer: <MathText text={correctAnswer.text} className="question-stem" itemIndex={`${question.questionNumber ?? (index + 1)}-correct`} subject={question.subject || quiz.subject || 'Math'} />
                                    </p>
                                )}
                                {correctAnswer && correctAnswer.rationale && (
                                    <div className="explanation">
                                        <span className="font-semibold">Rationale:</span>{' '}
                                        <MathText text={correctAnswer.rationale} className="question-stem" itemIndex={`${question.questionNumber ?? (index + 1)}-rationale`} subject={question.subject || quiz.subject || 'Math'} />
                                    </div>
                                )}
                                {confidenceLevel && (
                                    <div className="mt-2">
                                        <span className="font-semibold text-sm text-slate-600">Your confidence: </span>
                                        <span className={`px-2 py-0.5 text-xs font-bold rounded-full ${getConfidenceColor(confidenceLevel)}`}>
                                            {confidenceLevel}
                                        </span>
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            </div>
        </div>
    );
}

function ReadingPractice({ quiz, onComplete, onExit }) {
     const [answers, setAnswers] = useState({});
     const [isSubmitted, setIsSubmitted] = useState(false);

    const handleAnswer = (qIndex, answer) => {
        if(isSubmitted) return;
        setAnswers(prev => ({ ...prev, [qIndex]: answer }));
    };

    const handleSubmit = () => {
        if (Object.keys(answers).length !== quiz.questions.length) {
            if(!confirm("You have unanswered questions. Are you sure you want to submit?")) {
                return;
            }
        }
        setIsSubmitted(true);
        let score = 0;
        quiz.questions.forEach((q, i) => {
             const correctOption = (q.answerOptions || []).find(opt => opt.isCorrect);
            if(correctOption && answers[i] === correctOption.text) {
                score++;
            }
        });
        const percentage = (score / quiz.questions.length) * 100;
        const scaledScore = Math.round(percentage < 65 ? 100 + (percentage / 65 * 44) : 145 + ((percentage - 65) / 35 * 55));
        onComplete({ score, totalQuestions: quiz.questions.length, scaledScore, subject: quiz.subject, quiz });
    };

    return (
        <div className="fade-in">
             <header className="flex justify-between items-center pb-4 mb-4 border-b">
                 <button onClick={onExit} className="flex items-center gap-1 text-sm text-slate-600 hover:text-sky-600 font-semibold"><ArrowLeftIcon /> Back</button>
                 <h2 className="text-xl font-bold text-center text-slate-800">{quiz.title}</h2>
                 <div></div>
            </header>
            <article className="prose max-w-none">
                <h3 className="text-2xl font-bold question-stem" dangerouslySetInnerHTML={{ __html: sanitizeHtmlContent(quiz.article.title, { normalizeSpacing: true }) }}></h3>
                <p className="text-sm italic text-slate-500">{quiz.article.genre}</p>
                {quiz.imageUrl && <img src={quiz.imageUrl} alt="Article supplemental image" className="my-4 mx-auto rounded-md border" />}
                {quiz.article.text.map((p, i) => <p key={i} dangerouslySetInnerHTML={{ __html: sanitizeHtmlContent(p, { normalizeSpacing: true }) }}></p>)}
            </article>
            <section className="mt-8 pt-6 border-t">
                <h3 className="text-2xl font-bold mb-4">Questions</h3>
                <div className="space-y-6">
                    {quiz.questions.map((q, i) => (
                        <div key={i} className={`p-4 rounded-lg transition-colors ${isSubmitted ? (answers[i] === (q.answerOptions || []).find(o=>o.isCorrect)?.text ? 'bg-green-50' : 'bg-red-50') : 'bg-slate-50'}`}>
                            {q.imageUrl && !(q.stimulusImage && q.stimulusImage.src) && (
                                <img src={q.imageUrl} alt={`Visual for question ${i + 1}`} className="my-2 rounded-md border max-w-xs h-auto" />
                            )}
                            {GEOMETRY_FIGURES_ENABLED && q.geometrySpec && (
                                <div className="my-3 max-w-md">
                                    <GeometryFigure spec={q.geometrySpec} className="w-full h-auto" />
                                </div>
                            )}
                            <div className="mb-2 flex items-start gap-3">
                                <span className="font-semibold question-stem leading-relaxed">{i+1}.</span>
                                <Stem item={{ ...q, questionNumber: q.questionNumber ?? (i + 1) }} />
                            </div>
                            <div className="mt-2 space-y-1">
                                {(q.answerOptions || []).map((opt, j) => (
                                    <label key={j} className={`flex items-center p-2 rounded cursor-pointer ${answers[i] === opt.text ? 'bg-slate-200': 'hover:bg-slate-100'}`}>
                                        <input type="radio" name={`q${i}`} value={opt.text} onChange={() => handleAnswer(i, opt.text)} disabled={isSubmitted} className="mr-2"/>
                                        <span className={`${isSubmitted && opt.isCorrect ? 'font-bold text-green-700' : ''} ${isSubmitted && answers[i] === opt.text && !opt.isCorrect ? 'line-through text-red-700' : ''} question-stem`}>
                                            <MathText text={opt.text} className="question-stem" itemIndex={`${q.questionNumber ?? (i + 1)}-practice-opt-${j}`} subject={q.subject || quiz.subject || 'Math'} />
                                        </span>
                                    </label>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
                {!isSubmitted && <button onClick={handleSubmit} className="mt-6 w-full px-6 py-3 bg-sky-600 text-white font-bold rounded-lg hover:bg-sky-700">Submit Answers</button>}
            </section>
        </div>
    );
}

function EssayGuide({ onExit }) {
    const [activeTab, setActiveTab] = useState('passages');
    const [selectedTopic, setSelectedTopic] = useState(0);
    const [timer, setTimer] = useState(45 * 60);
    const [timerActive, setTimerActive] = useState(false);
    const [essayText, setEssayText] = useState({ intro: '', body1: '', body2: '', body3: '', conclusion: '' });
    const [showModal, setShowModal] = useState(false);
    const [isScoring, setIsScoring] = useState(false);
    const [scoreResult, setScoreResult] = useState(null);
    const [showPromptOverlay, setShowPromptOverlay] = useState(false);
    const [overlayView, setOverlayView] = useState('prompt');

    const intervalRef = useRef(null);

const passagesData = [
    // --- All 10 Topics Updated with Highlighted & Imbalanced Evidence ---
    {
        topic: "Should the Voting Age Be Lowered to 16?",
        passage1: {
            title: "Dr. Alisa Klein, Sociologist (Stronger Argument)",
            content: "<p>Lowering the voting age to 16 is a crucial step for a healthier democracy. At 16, many young people are employed, pay taxes on their earnings, and are subject to the laws of the land. It is a fundamental principle of democracy—'no taxation without representation'—that they should have a voice in shaping policies that directly affect them, from education funding to climate change.</p><p><span class='good-evidence'>Furthermore, research shows that voting is a habit; a 2020 study from Tufts University found that cities that allow 16-year-olds to vote in local elections see significantly higher youth turnout in subsequent national elections.</span> Enabling citizens to vote at an age when they are still living in a stable home and learning about civics in school increases the likelihood they will become lifelong voters.</p><p><span class='good-evidence'>As political scientist Dr. Mark Franklin notes, 'The earlier a citizen casts their first ballot, the more likely they are to become a consistent participant in our democracy.'</span> It is a vital step toward strengthening civic engagement for generations to come.</p>"
        },
        passage2: {
            title: "Marcus heavyweight, Political Analyst (Weaker Argument)",
            content: "<p>While the idealism behind lowering the voting age is appealing, the practical realities suggest it would be a mistake. The adolescent brain is still undergoing significant development, particularly in areas related to long-term decision-making and impulse control. The political landscape is complex, requiring a level of experience and cognitive maturity that most 16-year-olds have not yet developed.</p><p>We risk trivializing the profound responsibility of voting by extending it to a demographic that is, by and large, not yet equipped to handle it. <span class='bad-evidence'>I remember being 16, and my friends and I were far more concerned with prom dates and getting a driver's license than with monetary policy.</span> Their priorities are simply not aligned with the serious nature of national governance.</p><p>The current age of 18 strikes a reasonable balance, marking a clear transition into legal adulthood and the full spectrum of responsibilities that come with it. To change this is to experiment with the foundation of our republic for no clear gain.</p>"
        }
    },
    {
        topic: "Is Universal Basic Income (UBI) a Viable Solution to Poverty?",
        passage1: {
            title: "Anna Coote, Economist (Stronger Argument)",
            content: "<p>A Universal Basic Income, while well-intentioned, is an inefficient and expensive tool for poverty reduction. It fails to target the individuals who need support the most, instead distributing funds to everyone, which ultimately dilutes its impact. <span class='good-evidence'>According to a 2018 analysis by the Center on Budget and Policy Priorities, replacing existing targeted aid programs with a modest UBI would actually increase the poverty rate.</span></p><p>Existing programs like SNAP (food stamps) and Medicaid are designed to address the specific, varied hardships of poverty. UBI risks dismantling this targeted support system. Furthermore, there is a significant danger of UBI entrenching low pay and precarious work, as it could effectively subsidize employers who pay poverty wages, normalizing economic instability rather than solving its root causes.</p><p><span class='good-evidence'>This is a logical consequence, as a guaranteed income floor reduces the pressure on companies to offer competitive wages and benefits to attract workers for undesirable jobs.</span> The focus should be on strengthening our existing, targeted safety nets and promoting policies that lead to higher wages and better job quality.</p>"
        },
        passage2: {
            title: "Robert Doar, Poverty Studies Fellow (Weaker Argument)",
            content: "<p>The concept of a guaranteed income has merit as a powerful tool to provide stability in an unstable world. A regular, predictable income floor would act as a safety net, allowing individuals to invest in new skills or find more suitable jobs without the constant threat of destitution. It provides the foundation upon which individuals can build more productive and independent lives.</p><p><span class='bad-evidence'>Everyone knows that if you're not worried about next month's rent, you can make better long-term decisions.</span> It just makes sense that this freedom would lead to a boom in entrepreneurship and creativity, unleashing human potential that is currently suppressed by economic anxiety.</p><p>The goal is not to give up on work, but to provide a cushion that allows for smarter work. Opponents worry that people will stop working, but this is a cynical view of human nature. Most people want to contribute and improve their lives; UBI simply gives them the security to do so more effectively.</p>"
        }
    },
    {
        topic: "Should Governments Aggressively Subsidize Renewable Energy?",
        passage1: {
            title: "Energy Policy Journal (Stronger Argument)",
            content: "<p>Government subsidies are essential for accelerating the transition to renewable energy sources like solar and wind. The primary benefit is environmental; renewables produce little to no greenhouse gases, combating climate change and improving public health. <span class='good-evidence'>A report from the National Renewable Energy Laboratory (NREL) concluded that achieving 80% renewable electricity by 2050 could reduce economy-wide carbon emissions by 81%.</span></p><p>While the initial costs can be high, subsidies make them accessible and competitive with established fossil fuels, which have themselves been subsidized for decades. This investment creates jobs in a growing clean energy sector and fosters energy independence. <span class='good-evidence'>According to the U.S. Bureau of Labor Statistics, solar panel installer and wind turbine technician are two of the fastest-growing jobs in the country.</span></p><p>In the long run, supporting renewables is not just an environmental decision, but a strategic economic one. It leads to stable, predictable energy costs free from the price volatility of the global oil market. It is a necessary investment in a cleaner and more economically secure future.</p>"
        },
        passage2: {
            title: "Institute for Energy Research (Weaker Argument)",
            content: "<p>While renewable energy is a worthy goal, aggressive government subsidies create significant problems. The high upfront cost of technologies like solar panels and wind turbines are passed on to taxpayers, creating a massive financial burden. These systems also have geographic limitations—they are only effective in specific locations with consistent sun or wind.</p><p>Furthermore, energy production is often intermittent, requiring expensive battery storage solutions that are not yet advanced enough. <span class='bad-evidence'>Think of the poor families who will have their lights go out on a calm, cloudy day.</span> It's simply not reliable enough to power a modern economy without fossil fuel backup, which defeats the entire purpose.</p><p>A market-driven approach, rather than government intervention, would allow the most efficient and affordable technologies to emerge naturally. We shouldn't let the government pick winners and losers with taxpayer money; we should let innovation and competition determine the best path forward.</p>"
        }
    },
    {
        topic: "Does Social Media Do More Harm Than Good for Teen Mental Health?",
        passage1: {
            title: "U.S. Surgeon General's Advisory (Stronger Argument)",
            content: "<p>There is a profound risk of harm to the mental health and well-being of children and adolescents from social media. <span class='good-evidence'>A 2022 study published in the Journal of the American Medical Association (JAMA) showed that teens who spend more than three hours a day on social media face double the risk of experiencing depression and anxiety symptoms.</span> These platforms are often designed to maximize user engagement, which can disrupt sleep and expose young users to harmful content.</p><p>The adolescent brain is highly susceptible to social comparison and peer pressure. Social media platforms can create a distorted reality, where teens are constantly comparing their own lives to the curated, idealized posts of others. <span class='good-evidence'>This has been directly linked to lower self-esteem and poor body image, particularly among adolescent girls, as noted by the American Psychological Association.</span></p><p><span class='bad-evidence'>It feels like every teenager I meet is more anxious than the last, and they are all glued to their phones.</span> The connection is obvious. We need better safeguards, and parents need to be more aware of the very real dangers these platforms pose to their children's developing minds.</p>"
        },
        passage2: {
            title: "Youth Mental Health Council (Weaker Argument)",
            content: "<p>While risks exist, social media often provides essential benefits for teens. Many report that it helps them feel more accepted and connected to their friends. These online connections are especially crucial for marginalized youth, such as LGBTQ teens, who may find a supportive community online that is unavailable to them in their immediate environment.</p><p><span class='bad-evidence'>My own daughter was struggling to make friends, but she found a wonderful group of people online who share her passion for art. It completely turned her life around.</span> This just goes to show how vital these connections can be for a young person's happiness.</p><p>Social media platforms can foster a sense of belonging and provide a place for creative self-expression. They also help teens access information and resources about mental health, which can promote help-seeking behaviors. To focus only on the negatives is to ignore the powerful role social media can play in supporting youth well-being.</p>"
        }
    },
    {
        topic: "Is a Four-Year College Degree the Best Path to a Successful Career?",
        passage1: {
            title: "Dr. Anya Sharma, Education Policy Analyst (Weaker Argument)",
            content: "<p>A four-year college degree remains the most reliable pathway to long-term career success and economic mobility. While vocational training has its place, a bachelor's degree provides something far more valuable: a foundation in critical thinking, complex problem-solving, and communication. These are not just job skills; they are life skills that allow graduates to adapt to a rapidly changing economy.</p><p>Statistically, the evidence is overwhelming. College graduates consistently earn significantly more over their lifetimes than those without a degree. <span class='bad-evidence'>Everyone knows someone who got a degree and became successful.</span> This 'degree premium' is not just about the first job out of college, but about the upward trajectory that a broad-based education enables.</p><p>Furthermore, the college experience itself fosters personal growth and exposure to diverse perspectives. To suggest that a narrow, job-specific training program is equivalent is to ignore the fundamental purpose of higher education: to create not just workers, but informed and adaptable citizens.</p>"
        },
        passage2: {
            title: "Marco Diaz, Skilled Trades Advocate (Stronger Argument)",
            content: "<p>For too long, we have pushed a 'college-for-all' mentality that has left millions of young people with crippling student loan debt. It is time we recognize that vocational training offers a more direct and affordable path to a stable career. <span class='good-evidence'>According to the Bureau of Labor Statistics, many skilled trades, such as electricians and plumbers, have median salaries comparable to or exceeding those of many bachelor's degree holders, without the upfront cost.</span></p><p>Vocational programs provide hands-on skills that are immediately applicable. Students often enter paid apprenticeship programs where they earn while they learn. This model avoids the massive debt associated with a four-year degree and allows young adults to begin building financial independence years earlier. <span class='good-evidence'>A 2021 report from the National Center for Education Statistics highlights that the average student loan debt for a bachelor's degree is over $30,000.</span></p><p>We must stop stigmatizing skilled labor. By promoting vocational education as a respectable and intelligent alternative, we can build a stronger, more practical workforce and offer a debt-free path to the middle class for millions of Americans.</p>"
        }
    },
    {
        topic: "Should Schools Ban the Use of Smartphones in the Classroom?",
        passage1: {
            title: "Principal Thompson, Educator (Stronger Argument)",
            content: "<p>Smartphones have become the single greatest source of distraction in the modern classroom, and it is time for a clear and consistent ban. These devices fragment student attention and disrupt the learning environment. The primary purpose of a classroom is education, and anything that fundamentally undermines that purpose must be removed.</p><p><span class='good-evidence'>A comprehensive study by the London School of Economics analyzed schools in four English cities and found that after phones were banned, student test scores improved by an average of 6.4%.</span> This effect was even more pronounced for lower-achieving students, suggesting a ban can help close the achievement gap. This data provides clear, empirical evidence that removing phones leads to better academic outcomes.</p><p>A firm ban sends an unambiguous message about our academic priorities and helps students develop the crucial skill of focused, sustained attention, a skill that is eroding in the digital age.</p>"
        },
        passage2: {
            title: "Dr. Helen Tran, Digital Learning Expert (Weaker Argument)",
            content: "<p>Banning smartphones in schools is a Luddite response to a modern reality. Instead of banning these powerful tools, we should be teaching students how to use them responsibly. Smartphones provide instant access to a world of information, acting as research tools and collaborative devices. To deny students access is to cripple them with an outdated model of education.</p><p><span class='bad-evidence'>The people who want to ban phones are just old-fashioned and afraid of technology.</span> This argument ignores the fact that the modern workplace requires digital literacy. Schools have a responsibility to prepare students for the world they will actually live and work in, and that world is saturated with technology.</p><p>The challenge is not the device, but the pedagogy. We need to train teachers to leverage these tools for learning, not run from them. <span class='bad-evidence'>It's just common sense that you can't prepare kids for the future by taking away future tools.</span></p>"
        }
    },
    {
        topic: "Should Fast-Food Restaurants Be Required to Display Calorie Counts?",
        passage1: {
            title: "Center for Public Health (Stronger Argument)",
            content: "<p>In the fight against the obesity epidemic, information is one of our most powerful weapons. Requiring fast-food chains to prominently display calorie counts on their menus is a common-sense policy that empowers consumers to make healthier choices. It is a simple matter of transparency; people have a right to know what is in the food they are purchasing.</p><p><span class='good-evidence'>A study published in the American Journal of Public Health found that after New York City implemented menu labeling, consumers at fast-food chains purchased, on average, 25 fewer calories per transaction.</span> While this may seem small, these small changes, compounded over time, can lead to significant positive health outcomes for the population.</p><p>This isn't about banning choices; it's about enabling informed ones. Just as the FDA requires nutrition labels on packaged foods, providing clear, accessible information at the point of purchase is a minimal and effective step to help people take better control of their own health.</p>"
        },
        passage2: {
            title: "Restaurant Industry Association (Weaker Argument)",
            content: "<p>Mandatory calorie labeling for fast-food restaurants is a costly and ineffective government overreach. The financial burden of analyzing every menu item and reprinting menu boards is significant, especially for smaller franchise owners. This is a classic case of the government imposing a one-size-fits-all solution that hurts small businesses.</p><p><span class='bad-evidence'>I know plenty of people who see a high calorie count and just order the item anyway, so it clearly doesn't work.</span> People go to fast-food restaurants for convenience and taste, not for a health experience. Consumer behavior is driven by many factors, and a single number on a menu board is unlikely to be the deciding one.</p><p>Ultimately, this policy is based on the flawed assumption that a lack of information is the cause of poor dietary choices. <span class='bad-evidence'>Everyone already knows that a burger and fries isn't a health food.</span> The focus should be on personal responsibility, not on more government regulations.</p>"
        }
    },
    {
        topic: "Should National Parks Implement a Lottery System to Manage Overcrowding?",
        passage1: {
            title: "Dr. David Chen, Conservation Biologist (Stronger Argument)",
            content: "<p>Our most beloved national parks are being loved to death. The surge in visitor numbers has led to traffic gridlock, trail erosion, and damage to fragile ecosystems. To protect these natural treasures for future generations, we must implement more restrictive access systems, and a lottery is the fairest way to do so.</p><p><span class='good-evidence'>The National Park Service's own data shows that in parks like Zion and Arches, unmanaged visitor numbers have led to significant soil compaction and vegetation loss along popular trails.</span> A lottery system would directly mitigate this environmental damage by controlling the number of people on the trails each day. This is a necessary management tool to fulfill the Park Service's core mission of preservation.</p><p><span class='good-evidence'>Furthermore, a 2021 study on visitor experiences in Yosemite concluded that overcrowding significantly diminishes the quality of the visitor experience, leading to lower satisfaction.</span> A reservation system provides certainty and allows visitors to plan their trips effectively, ensuring a better experience for those who do attend.</p>"
        },
        passage2: {
            title: "Brenda Walsh, Public Lands Advocate (Weaker Argument)",
            content: "<p>National parks were created to be accessible to all Americans, not just the lucky few who win a lottery. Implementing a reservation system fundamentally changes the nature of these public lands from a shared national birthright into an exclusive commodity. It creates a barrier that will disproportionately affect families who cannot plan their vacations months in advance.</p><p><span class='bad-evidence'>My family has always taken spontaneous trips to the parks, and a lottery system would destroy that tradition.</span> This would harm the local gateway communities whose economies depend on a steady flow of tourists, not just a pre-determined, limited number.</p><p><span class='bad-evidence'>Turning our parks into an exclusive club is a betrayal of the very idea of 'America's Best Idea.'</span> We must focus on smart solutions like more shuttle buses, rather than simply locking people out.</p>"
        }
    },
    {
        topic: "Should Standardized Test Scores Be a Primary Factor in College Admissions?",
        passage1: {
            title: "Dr. Richard Evans, Admissions Counselor (Stronger Argument)",
            content: "<p>Relying heavily on standardized test scores like the SAT and ACT in college admissions is an outdated and inequitable practice. These tests are not a pure measure of merit; they are strongly correlated with a student's family income and access to resources. Students from affluent families can afford expensive test prep courses, giving them an unfair advantage.</p><p><span class='good-evidence'>A landmark study of over 123,000 students at 33 test-optional colleges found that there was virtually no difference in college GPA or graduation rates between students who submitted scores and those who did not.</span> This proves that high school grades are a far better predictor of college success. A student's performance over four years is a much more holistic and accurate measure of their ability and work ethic.</p><p>By moving to a test-optional system, colleges can assess applicants more equitably, considering their academic record, essays, and activities. This allows them to build a more diverse and capable student body, rewarding long-term diligence over the ability to perform well on a single, high-stakes exam.</p>"
        },
        passage2: {
            title: "Dr. Susan Gerson, Education Measurement Specialist (Weaker Argument)",
            content: "<p>While standardized tests are not perfect, they are the most objective and reliable tool we have for comparing students from tens of thousands of different high schools. Grade inflation is rampant, and an 'A' in one school is not equivalent to an 'A' in another. The SAT and ACT provide a common yardstick to measure core academic skills.</p><p><span class='bad-evidence'>Without tests, admissions would just become a subjective guessing game about who wrote the prettiest essay.</span> It would be chaos. These tests can help identify promising students from less well-known high schools whose grades might otherwise be overlooked. To ignore test scores is to ignore a valuable piece of data.</p><p>Rather than eliminating these tests, we should focus on ensuring all students have access to free, high-quality test preparation resources. Fixing the access problem is a better solution than throwing away our only objective measurement tool.</p>"
        }
    },
    {
        topic: "Is a Remote Work Model More Beneficial Than a Traditional In-Office Model?",
        passage1: {
            title: "Jennifer Lee, Chief Financial Officer (Stronger Argument)",
            content: "<p>The shift to remote work has proven to be a resounding success, offering significant financial and operational benefits. By reducing the need for large, expensive office spaces, companies can drastically cut overhead costs related to rent and utilities. These savings can be reinvested into growth and innovation.</p><p>From a human resources perspective, the benefits are even more compelling. Offering remote work allows a company to recruit from a global talent pool, not just a single city. <span class='good-evidence'>A 2021 survey by Stanford University of 16,000 workers over 9 months found that remote work not only increased employee satisfaction but also boosted productivity by 13%.</span> Happier, more autonomous employees are more productive employees.</p><p>Furthermore, remote work improves employee retention and well-being. <span class='good-evidence'>According to a Gallup poll, a majority of remote-capable employees who are forced to return to the office full-time are actively seeking new employment.</span> A flexible, remote-first model is not just a trend; it is the future of a more efficient and humane way of doing business.</p>"
        },
        passage2: {
            title: "Robert Chen, Management Consultant (Weaker Argument)",
            content: "<p>The alleged benefits of remote work are largely illusory and ignore the long-term damage it does to a company's culture. The office is a hub for spontaneous collaboration and mentorship that simply cannot be replicated over scheduled Zoom calls. The informal 'water cooler' conversations that spark new ideas are lost forever.</p><p><span class='bad-evidence'>It's just common sense that people are going to be less productive at home with all the distractions of laundry and television.</span> While some companies may see short-term gains in routine tasks, the long-term cost in terms of lost innovation and team cohesion will be immense.</p><p>Junior employees, in particular, suffer from a lack of mentorship and observational learning that is critical for their career development. A vibrant, in-person workplace remains the most powerful engine for collaborative success, and we are losing that in favor of a lonely, disconnected workforce.</p>"
        }
    }
];

    useEffect(() => {
        if (timerActive && timer > 0) {
            intervalRef.current = setInterval(() => {
                setTimer(t => t - 1);
            }, 1000);
        } else if (timer <= 0) {
            clearInterval(intervalRef.current);
            setTimerActive(false);
            finishPractice();
        }
        return () => clearInterval(intervalRef.current);
    }, [timerActive, timer]);

    useEffect(() => {
        if (activeTab !== 'structure') {
            setShowPromptOverlay(false);
        }
    }, [activeTab]);

    useEffect(() => {
        setOverlayView('prompt');
    }, [selectedTopic]);

    const startPractice = () => {
        setTimerActive(true);
    };

    const resetPractice = () => {
        setTimerActive(false);
        clearInterval(intervalRef.current);
        setTimer(45 * 60);
        setEssayText({ intro: '', body1: '', body2: '', body3: '', conclusion: '' });
        setScoreResult(null);
    };

    const finishPractice = () => {
        setTimerActive(false);
        clearInterval(intervalRef.current);
        setShowModal(true);
    };

    const handleTextChange = (e) => {
        const { name, value } = e.target;
        setEssayText(prev => ({ ...prev, [name]: value }));
    };

    const handleGetScore = async () => {
        setIsScoring(true);
        setScoreResult(null);
        const fullEssay = Object.values(essayText).join("\n\n").trim();
        const completionCount = Object.values(essayText).filter(text => text.trim() !== '').length;

        try {
            const response = await fetch('https://ged-website.onrender.com/score-essay', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    essayText: fullEssay,
                    completion: `${completionCount}/5` // Send completion data
                })
            });
            if (!response.ok) throw new Error('Failed to get score from the server.');

            const result = await response.json();
            let jsonText = result.candidates[0].content.parts[0].text;
            jsonText = jsonText.replace(/```json/g, '').replace(/```/g, '').trim();
            const parsedScore = JSON.parse(jsonText);
            setScoreResult(parsedScore);

        } catch (error) {
            console.error("Error scoring essay:", error);
            setScoreResult({ error: "Sorry, we couldn't score your essay at this time." });
        } finally {
            setIsScoring(false);
        }
    };

    const formatTime = (seconds) => `${Math.floor(seconds / 60)}:${(seconds % 60).toString().padStart(2, '0')}`;
    const selectedPassage = passagesData[selectedTopic];
    const promptSummary = selectedPassage
        ? `After reading both passages about "${selectedPassage.topic}", write an essay in which you explain which author presents the more convincing argument. Support your response with evidence from both passages and explain why the evidence you cite supports your evaluation.`
        : '';
    const overlayButtons = [
        { id: 'prompt', label: 'Essay Prompt', title: 'GED® RLA Essay Prompt' },
        { id: 'passage1', label: 'Passage A', title: selectedPassage?.passage1?.title || 'Passage A' },
        { id: 'passage2', label: 'Passage B', title: selectedPassage?.passage2?.title || 'Passage B' }
    ];

    const renderOverlayBody = () => {
        if (!selectedPassage) return null;
        switch (overlayView) {
            case 'passage1':
                return (
                    <div className="prose max-w-none text-sm text-slate-700" dangerouslySetInnerHTML={{ __html: sanitizeHtmlContent(selectedPassage.passage1.content, { normalizeSpacing: true }) }} />
                );
            case 'passage2':
                return (
                    <div className="prose max-w-none text-sm text-slate-700" dangerouslySetInnerHTML={{ __html: sanitizeHtmlContent(selectedPassage.passage2.content, { normalizeSpacing: true }) }} />
                );
            default:
                return (
                    <div className="space-y-3 text-sm leading-relaxed text-slate-700">
                        <p>{promptSummary}</p>
                        <ul className="list-disc pl-5 space-y-2">
                            <li>Clearly state which author presents the stronger argument on the topic.</li>
                            <li>Use at least two specific pieces of evidence from the passages to support your evaluation.</li>
                            <li>Explain why the evidence you cite strengthens one argument or weakens the other.</li>
                            <li>Organize your ideas with an introduction, body paragraphs, and a conclusion.</li>
                        </ul>
                    </div>
                );
        }
    };

    const renderTabs = () => (
        <nav className="flex flex-wrap justify-center border-b-2 border-gray-300 mb-8">
            {['passages', 'structure', 'strengths', 'weaknesses'].map(tab => (
                <button
                    key={tab}
                    onClick={() => setActiveTab(tab)}
                    className={`tab-button text-lg font-semibold py-4 px-6 text-gray-600 capitalize ${activeTab === tab ? 'active' : ''}`}
                >
                    {tab.replace('_', ' ')}
                </button>
            ))}
        </nav>
    );

    const renderContent = () => {
        switch(activeTab) {
            case 'passages':
                return (
                    <div>
                        <div className="mb-6 bg-white p-4 rounded-lg shadow-md">
                            <label htmlFor="topic-selector" className="block text-lg font-semibold text-gray-800 mb-2">Select an Article Topic:</label>
                            <select id="topic-selector" className="w-full p-2 border border-gray-300 rounded-md text-lg" value={selectedTopic} onChange={e => setSelectedTopic(Number(e.target.value))}>
                                {passagesData.map((p, i) => <option key={i} value={i}>{p.topic}</option>)}
                            </select>
                        </div>
                        <div className="grid lg:grid-cols-2 gap-8">
                            <article className="bg-white p-6 rounded-lg shadow-md">
                                <h2 className="text-2xl font-bold mb-4 text-gray-900 border-b pb-2 question-stem">{selectedPassage.passage1.title}</h2>
                                <div dangerouslySetInnerHTML={{ __html: sanitizeHtmlContent(selectedPassage.passage1.content, { normalizeSpacing: true }) }} />
                            </article>
                            <article className="bg-white p-6 rounded-lg shadow-md">
                                <h2 className="text-2xl font-bold mb-4 text-gray-900 border-b pb-2 question-stem">{selectedPassage.passage2.title}</h2>
                                <div dangerouslySetInnerHTML={{ __html: sanitizeHtmlContent(selectedPassage.passage2.content, { normalizeSpacing: true }) }} />
                            </article>
                        </div>
                    </div>
                );
            case 'structure':
                 return (
                    <div className="space-y-6">
                        <div className="bg-white p-4 rounded-lg shadow-inner mb-6 flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
                            <div className="text-center sm:text-left">
                                <h3 className="text-xl font-bold text-gray-800">Typing Practice Mode</h3>
                                <p className="text-sm text-gray-600">Click Start to begin a 45-minute timed session.</p>
                            </div>
                            <div className="flex items-center space-x-2 sm:space-x-4">
                                <button onClick={startPractice} disabled={timerActive} className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors disabled:opacity-50">Start</button>
                                <div className={`text-3xl font-mono font-bold ${timer < 300 ? 'text-red-500' : 'text-gray-800'}`}>{formatTime(timer)}</div>
                                <button onClick={finishPractice} className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors">Finish & Review</button>
                                <button onClick={resetPractice} className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded transition-colors">Reset</button>
                            </div>
                        </div>

                        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 flex flex-col md:flex-row md:items-center md:justify-between gap-3">
                            <div>
                                <h4 className="text-lg font-semibold text-blue-900">Need the prompt while you type?</h4>
                                <p className="text-sm text-blue-800">Open the overlay to view the essay prompt or either passage without leaving the practice screen.</p>
                            </div>
                            <button
                                onClick={() => setShowPromptOverlay(prev => !prev)}
                                className="self-start md:self-auto bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded transition-colors"
                            >
                                {showPromptOverlay ? 'Hide Prompt Overlay' : 'Show Prompt Overlay'}
                            </button>
                        </div>

                        {/* Textarea sections */}
                        <div className="practice-section bg-white p-6 rounded-lg shadow-md">
                            <h3 className="text-2xl font-bold mb-3 text-gray-900">Introduction Paragraph</h3>
                            <p className="text-gray-700 leading-relaxed mb-4">The two passages present conflicting views on the topic of <span className="text-blue-600 font-semibold">[topic of both articles]</span>. In the first passage, <span className="text-blue-600 font-semibold">[Author 1's Last Name]</span> argues that <span className="text-blue-600 font-semibold">[explain Author 1's main claim]</span>. Conversely, in the second passage, <span className="text-blue-600 font-semibold">[Author 2's Last Name]</span> claims that <span className="text-blue-600 font-semibold">[explain Author 2's main claim]</span>. After analyzing both arguments, it is clear that <span className="text-blue-600 font-semibold">[Author's Last Name]</span> presents the more convincing case by effectively using <span className="text-blue-600 font-semibold">[list key evidence types]</span>.</p>
                            <textarea name="intro" onPaste={(e) => e.preventDefault()} value={essayText.intro} onChange={handleTextChange} disabled={!timerActive} className="practice-textarea w-full h-48 p-3 border-gray-300 rounded-md" placeholder="Type your introduction here..."></textarea>
                        </div>
                         <div className="practice-section bg-white p-6 rounded-lg shadow-md">
                            <h3 className="text-2xl font-bold mb-3 text-gray-900">Body Paragraph #1: Analyze Strong Evidence</h3>
                            <p className="text-gray-700 leading-relaxed mb-4">First, <span className="text-blue-600 font-semibold">[Stronger Author's Last Name]</span> effectively builds their argument by using <span className="text-blue-600 font-semibold">[type of evidence]</span>. The author states, <span className="text-blue-600 font-semibold">["quote or paraphrase"]</span>. This evidence is highly convincing because <span className="text-blue-600 font-semibold">[explain why]</span>.</p>
                            <textarea name="body1" onPaste={(e) => e.preventDefault()} value={essayText.body1} onChange={handleTextChange} disabled={!timerActive} className="practice-textarea w-full h-32 p-3 border-gray-300 rounded-md" placeholder="Analyze the stronger argument's first piece of evidence..."></textarea>
                        </div>
                        <div className="practice-section bg-white p-6 rounded-lg shadow-md">
                            <h3 className="text-2xl font-bold mb-3 text-gray-900">Body Paragraph #2: Analyze More Strong Evidence</h3>
                            <p className="text-gray-700 leading-relaxed mb-4">Furthermore, <span className="text-blue-600 font-semibold">[Stronger Author's Last Name]</span> strengthens their position with <span className="text-blue-600 font-semibold">[another type of evidence]</span>. For example, the author points out that <span className="text-blue-600 font-semibold">["quote or paraphrase"]</span>. This is a logical and persuasive point because <span className="text-blue-600 font-semibold">[explain why]</span>.</p>
                            <textarea name="body2" onPaste={(e) => e.preventDefault()} value={essayText.body2} onChange={handleTextChange} disabled={!timerActive} className="practice-textarea w-full h-32 p-3 border-gray-300 rounded-md" placeholder="Analyze the stronger argument's second piece of evidence..."></textarea>
                        </div>
                        <div className="practice-section bg-white p-6 rounded-lg shadow-md">
                            <h3 className="text-2xl font-bold mb-3 text-gray-900">Body Paragraph #3: Analyze the Weaker Argument</h3>
                            <p className="text-gray-700 leading-relaxed mb-4">In contrast, the argument presented by <span className="text-blue-600 font-semibold">[Weaker Author's Last Name]</span> is not as well-supported. A key weakness is the author's reliance on <span className="text-blue-600 font-semibold">[identify a weakness]</span>. For instance, the author claims that <span className="text-blue-600 font-semibold">["quote or paraphrase"]</span>. This argument is unconvincing because <span className="text-blue-600 font-semibold">[explain why]</span>.</p>
                            <textarea name="body3" onPaste={(e) => e.preventDefault()} value={essayText.body3} onChange={handleTextChange} disabled={!timerActive} className="practice-textarea w-full h-32 p-3 border-gray-300 rounded-md" placeholder="Analyze a weakness in the opposing argument..."></textarea>
                        </div>
                        <div className="practice-section bg-white p-6 rounded-lg shadow-md">
                            <h3 className="text-2xl font-bold mb-3 text-gray-900">Conclusion Paragraph</h3>
                            <p className="text-gray-700 leading-relaxed mb-4">In conclusion, while both authors address the topic, <span className="text-blue-600 font-semibold">[Stronger Author's Last Name]</span> presents a more compelling argument. By skillfully using <span className="text-blue-600 font-semibold">[restate evidence types]</span>, the author builds a case that is more persuasive than the weakly supported claims by <span className="text-blue-600 font-semibold">[Weaker Author's Last Name]</span>.</p>
                            <textarea name="conclusion" onPaste={(e) => e.preventDefault()} value={essayText.conclusion} onChange={handleTextChange} disabled={!timerActive} className="practice-textarea w-full h-40 p-3 border-gray-300 rounded-md" placeholder="Write your conclusion..."></textarea>
                        </div>
                    </div>
                 );
            case 'strengths':
                return (
                    <div className="grid md:grid-cols-2 gap-6">
                        <div className="p-6 rounded-lg bg-green-50 border border-green-200">
                            <h4 className="text-xl font-bold mb-2 text-green-800">Statistical Data</h4>
                            <p className="text-gray-700">Using numbers, percentages, or data from credible sources (e.g., studies, reports). This provides objective proof for a claim.</p>
                        </div>
                        <div className="p-6 rounded-lg bg-green-50 border border-green-200">
                            <h4 className="text-xl font-bold mb-2 text-green-800">Expert Testimony</h4>
                            <p className="text-gray-700">Quoting a recognized expert or authority in a relevant field. This adds credibility to the argument.</p>
                        </div>
                        <div className="p-6 rounded-lg bg-green-50 border border-green-200">
                            <h4 className="text-xl font-bold mb-2 text-green-800">Logical Reasoning</h4>
                            <p className="text-gray-700">Connecting ideas in a clear, cause-and-effect manner that shows the author has thought through their position.</p>
                        </div>
                        <div className="p-6 rounded-lg bg-green-50 border border-green-200">
                            <h4 className="text-xl font-bold mb-2 text-green-800">Historical Precedent</h4>
                            <p className="text-gray-700">Using a past event to support a claim about a present or future situation. This shows a pattern of results.</p>
                        </div>
                    </div>
                );
            case 'weaknesses':
                return (
                    <div className="grid md:grid-cols-2 gap-6">
                         <div className="p-6 rounded-lg bg-red-50 border border-red-200">
                            <h4 className="text-xl font-bold mb-2 text-red-800">Unsupported Claims</h4>
                            <p className="text-gray-700">Making a statement of fact without providing any evidence to back it up. It's an opinion disguised as a fact.</p>
                        </div>
                         <div className="p-6 rounded-lg bg-red-50 border border-red-200">
                            <h4 className="text-xl font-bold mb-2 text-red-800">Overgeneralization</h4>
                            <p className="text-gray-700">Drawing a broad conclusion from a very small or unrepresentative sample of evidence.</p>
                        </div>
                         <div className="p-6 rounded-lg bg-red-50 border border-red-200">
                            <h4 className="text-xl font-bold mb-2 text-red-800">Anecdotal Evidence</h4>
                            <p className="text-gray-700">Using a personal story or a single, isolated example as proof for a major claim, instead of broader data.</p>
                        </div>
                         <div className="p-6 rounded-lg bg-red-50 border border-red-200">
                            <h4 className="text-xl font-bold mb-2 text-red-800">Emotional Appeal</h4>
                            <p className="text-gray-700">Trying to persuade the reader by appealing to their feelings (fear, pity, anger) instead of using logic and facts.</p>
                        </div>
                    </div>
                );
            default: return null;
        }
    };

    const renderModalContent = () => {
        const fullEssay = Object.values(essayText).join("\n\n").trim();
        return (
            <>
                <div className="p-8 prose max-w-none">
                    {fullEssay ? <div dangerouslySetInnerHTML={{ __html: sanitizeHtmlContent(fullEssay.replace(/\n/g, '<br/>'), { normalizeSpacing: true }) }} /> : <p><em>You did not write anything in the practice area.</em></p>}
                </div>
                <div className="p-6 border-t bg-gray-50 space-y-4">
                    <button onClick={handleGetScore} disabled={isScoring || !fullEssay} className="w-full bg-indigo-500 hover:bg-indigo-600 text-white font-bold py-3 px-4 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                        {isScoring ? 'Scoring...' : 'Get AI Score & Feedback'}
                    </button>
                    {scoreResult && (
                        <div className="mt-4 p-4 bg-indigo-50 rounded-lg text-left">
                            {scoreResult.error ? <p className="text-red-600">{scoreResult.error}</p> : (
                                <div>
                                    <h4 className="text-xl font-bold text-indigo-800">AI Feedback</h4>
                                    <p className="mt-2"><strong>Overall Score:</strong> {scoreResult.overallScore}/6</p>
                                    <p className="mt-1"><strong>Feedback:</strong> {scoreResult.overallFeedback}</p>
                                    <details className="mt-2">
                                        <summary className="font-semibold cursor-pointer">View Trait-by-Trait Breakdown</summary>
                                        <div className="mt-2 pl-4 border-l-2 border-indigo-200">
                                            <p><strong>Trait 1 (Analysis):</strong> Score {scoreResult.trait1.score}/2. {scoreResult.trait1.feedback}</p>
                                            <p><strong>Trait 2 (Evidence):</strong> Score {scoreResult.trait2.score}/2. {scoreResult.trait2.feedback}</p>
                                            <p><strong>Trait 3 (Clarity):</strong> Score {scoreResult.trait3.score}/2. {scoreResult.trait3.feedback}</p>
                                        </div>
                                    </details>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </>
        );
    };

    return (
        <div className="fade-in">
            <header className="flex justify-between items-center pb-4 mb-4 border-b">
                 <button onClick={onExit} className="flex items-center gap-1 text-sm text-slate-600 hover:text-sky-600 font-semibold"><ArrowLeftIcon /> Back</button>
                 <h2 className="text-xl font-bold text-center text-slate-800">Interactive Essay Guide</h2>
                 <div></div>
            </header>

            {renderTabs()}
            <main>{renderContent()}</main>

            {activeTab === 'structure' && showPromptOverlay && (
                <div className="fixed bottom-4 right-4 w-full max-w-xl sm:w-[28rem] md:w-[32rem] bg-white border border-slate-200 rounded-xl shadow-2xl z-40">
                    <div className="flex items-start justify-between gap-3 px-4 py-3 border-b">
                        <div>
                            <h3 className="text-base font-semibold text-slate-900">Prompt Reference Overlay</h3>
                            <p className="text-xs text-slate-500">Switch views to revisit the essay prompt or source passages while you write.</p>
                        </div>
                        <button
                            onClick={() => setShowPromptOverlay(false)}
                            className="text-slate-500 hover:text-slate-800"
                            aria-label="Close prompt overlay"
                        >
                            &times;
                        </button>
                    </div>
                    <div className="px-4 py-3 border-b bg-slate-50">
                        <div className="flex flex-wrap gap-2">
                            {overlayButtons.map(({ id, label, title }) => (
                                <button
                                    key={id}
                                    onClick={() => setOverlayView(id)}
                                    title={title}
                                    className={`px-3 py-1.5 text-sm font-semibold rounded-full border transition-colors ${overlayView === id ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-slate-700 border-slate-300 hover:bg-slate-100'}`}
                                >
                                    {label}
                                </button>
                            ))}
                        </div>
                    </div>
                    <div className="px-4 py-4 max-h-[60vh] overflow-y-auto">
                        {renderOverlayBody()}
                    </div>
                </div>
            )}

            {showModal && (
                <div
                    className="fixed inset-0 w-full h-full flex items-center justify-center"
                    style={{ backgroundColor: 'var(--modal-overlay)' }}
                >
                    <div className="bg-white rounded-lg shadow-2xl w-11/12 max-w-2xl max-h-[90vh] overflow-y-auto">
                        <div className="p-6 border-b flex justify-between items-center sticky top-0 bg-white">
                            <h2 className="text-2xl font-bold">Your Completed Essay</h2>
                            <button onClick={() => {setShowModal(false); setScoreResult(null);}} className="text-gray-500 hover:text-gray-800 text-3xl">&times;</button>
                        </div>
                        {renderModalContent()}
                    </div>
                </div>
            )}
        </div>
    );
}

function AIQuizGenerator({ subject, onQuizGenerated, onExit, setIsLoading, setLoadingMessage }) {
    const [selectedTopic, setSelectedTopic] = useState('');
    const [error, setError] = useState(null);

    const availableTopics = AppData[subject]
        ? Object.values(AppData[subject].categories).flatMap(category => category.topics.map(topic => topic.title))
        : [];

    const handleGenerate = async () => {
        if (!selectedTopic) {
            setError("Please select a topic first.");
            return;
        }
        const subjectParam = resolveSubjectParam(subject);
        if (!subjectParam) {
            setError('Sorry, this subject is not supported yet.');
            return;
        }
        setLoadingMessage("Please give us a moment to smith this for you");
        setIsLoading(true);
        setError(null);

        try {
            const questions = await generateTopicQuiz(subjectParam, selectedTopic);

            if (!questions.length) {
                throw new Error('The quiz service returned an empty quiz.');
            }

            const generatedQuiz = {
                subject,
                topic: selectedTopic,
                id: `ai_${Date.now()}`,
                title: `${subject} Quiz: ${selectedTopic}`,
                questions
            };

            onQuizGenerated(generatedQuiz);

        } catch (err) {
            console.error("Error generating quiz:", err);
            setError(`Sorry, something went wrong. ${err.message}`);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="fade-in text-center">
            <header className="flex justify-between items-center pb-4 mb-4 border-b">
                 <button onClick={onExit} className="flex items-center gap-1 text-sm text-slate-600 hover:text-sky-600 font-semibold"><ArrowLeftIcon /> Back</button>
                 <h2 className="text-xl font-bold text-center text-slate-800">Smith a Quiz</h2>
                 <div></div>
            </header>
            <div className="max-w-md mx-auto">
                <h3 className="text-2xl font-bold text-slate-800">Create a New Quiz</h3>
                <p className="text-slate-500 mt-2 mb-6">Select a topic from {subject} to generate a unique 15-question practice exam.</p>

                <select
                    value={selectedTopic}
                    onChange={(e) => setSelectedTopic(e.target.value)}
                    className="w-full p-3 border border-sky-300 rounded-md mb-4 text-lg"
                >
                    <option value="">-- Select a Topic --</option>
                    {availableTopics.map(topic => <option key={topic} value={topic}>{topic}</option>)}
                </select>

                <button
                    onClick={handleGenerate}
                    disabled={isLoading}
                    className="w-full px-8 py-4 bg-sky-600 text-white font-bold rounded-lg shadow-md hover:bg-sky-700 disabled:bg-slate-400 disabled:cursor-not-allowed transition-colors"
                >
                    {isLoading ? "Generating..." : "Generate Quiz"}
                </button>
                {error && <p className="text-red-500 mt-4">{error}</p>}
            </div>
        </div>
    );
}


function GeometryPracticeTool({ onExit }) {
    const roundToTwo = (value) => Math.round(value * 100) / 100;
    const formatNumber = (value) => {
        const rounded = roundToTwo(value);
        return Number.isInteger(rounded) ? rounded : rounded.toFixed(2);
    };

    const SHAPE_LIBRARY = {
        rectangle: {
            questions: [
                {
                    type: 'area',
                    getPrompt: (shapeLabel) => `What is the area of the ${shapeLabel}?`,
                    getAnswer: (dims) => dims.w * dims.h,
                },
                {
                    type: 'perimeter',
                    getPrompt: (shapeLabel) => `What is the perimeter of the ${shapeLabel}?`,
                    getAnswer: (dims) => 2 * (dims.w + dims.h),
                },
                {
                    type: 'missing_height',
                    getPrompt: (shapeLabel, dims) => `The ${shapeLabel} has an area of ${formatNumber(dims.w * dims.h)} and a width of ${formatNumber(dims.w)}. What is the missing height?`,
                    getAnswer: (dims) => dims.h,
                    getContext: () => ({ hiddenLabels: ['h'] }),
                },
            ],
            generateDims: () => ({ w: Math.floor(Math.random() * 20) + 5, h: Math.floor(Math.random() * 20) + 5 }),
            render: ({ w, h }, context = {}) => {
                const hidden = context.hiddenLabels || [];
                return (
                    <g>
                        <rect x="50" y="75" width={w * 8} height={h * 8} stroke="black" fill="none" strokeWidth="2" />
                        <text x={50 + (w*8)/2} y="65" textAnchor="middle">{hidden.includes('w') ? '?' : w}</text>
                        <text x={40} y={75 + (h*8)/2} textAnchor="end" dominantBaseline="middle">{hidden.includes('h') ? '?' : h}</text>
                    </g>
                );
            }
        },
        triangle: {
            questions: [
                {
                    type: 'area',
                    getPrompt: (shapeLabel) => `What is the area of the ${shapeLabel}?`,
                    getAnswer: (dims) => 0.5 * dims.b * dims.h,
                },
                {
                    type: 'missing_height',
                    getPrompt: (shapeLabel, dims) => `The ${shapeLabel} has an area of ${formatNumber(0.5 * dims.b * dims.h)} and a base of ${formatNumber(dims.b)}. What is the missing height?`,
                    getAnswer: (dims) => dims.h,
                    getContext: () => ({ hiddenLabels: ['h'] }),
                },
            ],
            generateDims: () => ({ b: Math.floor(Math.random() * 20) + 8, h: Math.floor(Math.random() * 15) + 6 }),
            render: ({ b, h }, context = {}) => {
                const hidden = context.hiddenLabels || [];
                return (
                    <g>
                        <polygon points={`50,${50+h*8} ${50+b*8},${50+h*8} ${50+b*8},50`} stroke="black" fill="none" strokeWidth="2" />
                        <text x={50 + (b*8)/2} y={65+h*8} textAnchor="middle">{hidden.includes('b') ? '?' : b}</text>
                        <text x={60+b*8} y={50+(h*8)/2} dominantBaseline="middle">{hidden.includes('h') ? '?' : h}</text>
                    </g>
                );
            }
        },
        circle: {
            questions: [
                {
                    type: 'area',
                    getPrompt: (shapeLabel) => `What is the area of the ${shapeLabel}?`,
                    getAnswer: (dims) => Math.PI * dims.r * dims.r,
                },
                {
                    type: 'circumference',
                    getPrompt: (shapeLabel) => `What is the circumference of the ${shapeLabel}?`,
                    getAnswer: (dims) => 2 * Math.PI * dims.r,
                },
                {
                    type: 'missing_radius',
                    getPrompt: (shapeLabel, dims) => `The ${shapeLabel} has an area of ${formatNumber(Math.PI * dims.r * dims.r)}. What is the radius?`,
                    getAnswer: (dims) => dims.r,
                    getContext: () => ({ hiddenLabels: ['r'] }),
                },
            ],
            generateDims: () => ({ r: Math.floor(Math.random() * 10) + 5 }),
            render: ({ r }, context = {}) => {
                const hidden = context.hiddenLabels || [];
                return (
                    <g>
                        <circle cx="150" cy="150" r={r * 8} stroke="black" fill="none" strokeWidth="2" />
                        <line x1="150" y1="150" x2={150 + r * 8} y2="150" stroke="black" strokeDasharray="4" />
                        <text x={150 + (r*8)/2} y="140">{hidden.includes('r') ? '?' : r}</text>
                    </g>
                );
            }
        },
        rectangular_prism: {
            questions: [
                {
                    type: 'volume',
                    getPrompt: (shapeLabel) => `What is the volume of the ${shapeLabel}?`,
                    getAnswer: (dims) => dims.l * dims.w * dims.h,
                },
                {
                    type: 'missing_height',
                    getPrompt: (shapeLabel, dims) => `The ${shapeLabel} has a volume of ${formatNumber(dims.l * dims.w * dims.h)}, a length of ${formatNumber(dims.l)}, and a width of ${formatNumber(dims.w)}. What is the missing height?`,
                    getAnswer: (dims) => dims.h,
                    getContext: () => ({ hiddenLabels: ['h'] }),
                },
            ],
            generateDims: () => ({ l: Math.floor(Math.random() * 15) + 8, w: Math.floor(Math.random() * 10) + 5, h: Math.floor(Math.random() * 10) + 5 }),
            render: ({ l, w, h }, context = {}) => {
                const hidden = context.hiddenLabels || [];
                return (
                    <g stroke="black" fill="none" strokeWidth="2">
                        <rect x={50} y={50} width={l*8} height={h*8} />
                        <path d={`M ${50},${50} l ${w*3},-${w*3}`} />
                        <path d={`M ${50+l*8},${50} l ${w*3},-${w*3}`} />
                        <path d={`M ${50+l*8},${50+h*8} l ${w*3},-${w*3}`} />
                        <path d={`M ${50+w*3},${50-w*3} H ${50+w*3+l*8}`} />
                        <path d={`M ${50+w*3+l*8},${50-w*3} V ${50-w*3+h*8}`} />
                        <text x={50 + (l*8)/2} y={60+h*8} textAnchor="middle">{hidden.includes('l') ? '?' : l}</text>
                        <text x={55+l*8+(w*3)/2} y={40-w*3} textAnchor="middle">{hidden.includes('w') ? '?' : w}</text>
                        <text x={40} y={50 + (h*8)/2} textAnchor="end" dominantBaseline="middle">{hidden.includes('h') ? '?' : h}</text>
                    </g>
                );
            }
        },
        cylinder: {
            questions: [
                {
                    type: 'volume',
                    getPrompt: (shapeLabel) => `What is the volume of the ${shapeLabel}?`,
                    getAnswer: (dims) => Math.PI * dims.r * dims.r * dims.h,
                },
                {
                    type: 'surface_area',
                    getPrompt: (shapeLabel) => `What is the surface area of the ${shapeLabel}?`,
                    getAnswer: (dims) => 2 * Math.PI * dims.r * (dims.r + dims.h),
                },
                {
                    type: 'missing_height',
                    getPrompt: (shapeLabel, dims) => `The ${shapeLabel} has a volume of ${formatNumber(Math.PI * dims.r * dims.r * dims.h)} and a radius of ${formatNumber(dims.r)}. What is the missing height?`,
                    getAnswer: (dims) => dims.h,
                    getContext: () => ({ hiddenLabels: ['h'] }),
                },
            ],
            generateDims: () => ({ r: Math.floor(Math.random() * 8) + 3, h: Math.floor(Math.random() * 15) + 5 }),
            render: ({ r, h }, context = {}) => {
                const hidden = context.hiddenLabels || [];
                return (
                    <g stroke="black" fill="none" strokeWidth="2">
                        <ellipse cx="150" cy="50" rx={r*5} ry={r*2} />
                        <path d={`M ${150 - r*5},50 L ${150 - r*5},${50 + h*5}`} />
                        <path d={`M ${150 + r*5},50 L ${150 + r*5},${50 + h*5}`} />
                        <ellipse cx="150" cy={50 + h*5} rx={r*5} ry={r*2} />
                        <text x="140" y={50 + (h*5)/2} textAnchor="end" dominantBaseline="middle">{hidden.includes('h') ? '?' : h}</text>
                        <text x={150} y={65+h*5} textAnchor="middle">{hidden.includes('r') ? '?' : r}</text>
                    </g>
                );
            }
        },
        cone: {
            questions: [
                {
                    type: 'volume',
                    getPrompt: (shapeLabel) => `What is the volume of the ${shapeLabel}?`,
                    getAnswer: (dims) => (Math.PI * dims.r * dims.r * dims.h) / 3,
                },
                {
                    type: 'surface_area',
                    getPrompt: (shapeLabel) => `What is the surface area of the ${shapeLabel}?`,
                    getAnswer: (dims) => Math.PI * dims.r * (dims.r + Math.sqrt(dims.h * dims.h + dims.r * dims.r)),
                },
                {
                    type: 'missing_height',
                    getPrompt: (shapeLabel, dims) => `The ${shapeLabel} has a volume of ${formatNumber((Math.PI * dims.r * dims.r * dims.h) / 3)} and a radius of ${formatNumber(dims.r)}. What is the missing height?`,
                    getAnswer: (dims) => dims.h,
                    getContext: () => ({ hiddenLabels: ['h'] }),
                },
            ],
            generateDims: () => ({ r: Math.floor(Math.random() * 6) + 3, h: Math.floor(Math.random() * 12) + 5 }),
            render: ({ r, h }, context = {}) => {
                const hidden = context.hiddenLabels || [];
                const baseRadius = r * 6;
                const height = h * 6;
                const centerX = 150;
                const baseY = 200;
                return (
                    <g stroke="black" fill="none" strokeWidth="2">
                        <ellipse cx={centerX} cy={baseY} rx={baseRadius} ry={baseRadius / 3} />
                        <line x1={centerX - baseRadius} y1={baseY} x2={centerX} y2={baseY - height} />
                        <line x1={centerX + baseRadius} y1={baseY} x2={centerX} y2={baseY - height} />
                        <text x={centerX - baseRadius - 10} y={baseY - height / 2} textAnchor="end" dominantBaseline="middle">{hidden.includes('h') ? '?' : h}</text>
                        <text x={centerX + baseRadius / 2} y={baseY + 20} textAnchor="middle">{hidden.includes('r') ? '?' : r}</text>
                    </g>
                );
            }
        },
        sphere: {
            questions: [
                {
                    type: 'volume',
                    getPrompt: (shapeLabel) => `What is the volume of the ${shapeLabel}?`,
                    getAnswer: (dims) => (4 / 3) * Math.PI * Math.pow(dims.r, 3),
                },
                {
                    type: 'surface_area',
                    getPrompt: (shapeLabel) => `What is the surface area of the ${shapeLabel}?`,
                    getAnswer: (dims) => 4 * Math.PI * dims.r * dims.r,
                },
                {
                    type: 'missing_radius',
                    getPrompt: (shapeLabel, dims) => `The ${shapeLabel} has a volume of ${formatNumber((4 / 3) * Math.PI * Math.pow(dims.r, 3))}. What is the radius?`,
                    getAnswer: (dims) => dims.r,
                    getContext: () => ({ hiddenLabels: ['r'] }),
                },
            ],
            generateDims: () => ({ r: Math.floor(Math.random() * 8) + 3 }),
            render: ({ r }, context = {}) => {
                const hidden = context.hiddenLabels || [];
                return (
                    <g stroke="black" fill="none" strokeWidth="2">
                        <circle cx="150" cy="130" r={r * 8} />
                        <ellipse cx="150" cy="130" rx={r * 8} ry={r * 3} strokeDasharray="6" />
                        <line x1="150" y1="130" x2={150 + r * 8} y2="130" strokeDasharray="4" />
                        <text x={150 + (r*8)/2} y="115">{hidden.includes('r') ? '?' : r}</text>
                    </g>
                );
            }
        },
        right_triangle: {
            questions: [
                {
                    type: 'hypotenuse',
                    getPrompt: (shapeLabel, dims) => `The ${shapeLabel} has legs a = ${formatNumber(dims.a)} and b = ${formatNumber(dims.b)}. What is the length of the hypotenuse?`,
                    getAnswer: (dims) => Math.sqrt(dims.a * dims.a + dims.b * dims.b),
                },
            ],
            generateDims: () => ({ a: Math.floor(Math.random() * 10) + 4, b: Math.floor(Math.random() * 10) + 4 }),
            render: ({ a, b }, context = {}) => {
                const hidden = context.hiddenLabels || [];
                const scale = 10;
                const startX = 60;
                const startY = 200;
                const pointB = [startX + a * scale, startY];
                const pointC = [startX, startY - b * scale];
                return (
                    <g stroke="black" fill="none" strokeWidth="2">
                        <polygon points={`${startX},${startY} ${pointB[0]},${pointB[1]} ${pointC[0]},${pointC[1]}`} />
                        <path d={`M ${startX + 20},${startY} L ${startX + 20},${startY - 20} L ${startX},${startY - 20}`} strokeWidth="2" />
                        <text x={startX + (a * scale) / 2} y={startY + 20} textAnchor="middle">{hidden.includes('a') ? '?' : `a = ${a}`}</text>
                        <text x={startX - 20} y={startY - (b * scale) / 2} textAnchor="end" dominantBaseline="middle">{hidden.includes('b') ? '?' : `b = ${b}`}</text>
                        <text x={(startX + pointB[0]) / 2 + 10} y={(startY + pointC[1]) / 2} textAnchor="middle">c</text>
                    </g>
                );
            }
        },
    };

    const [currentProblem, setCurrentProblem] = useState(null);
    const [userAnswer, setUserAnswer] = useState('');
    const [feedback, setFeedback] = useState('');

    const generateProblem = (shape) => {
        const shapeData = SHAPE_LIBRARY[shape];
        if (!shapeData) return;

        const questionConfig = shapeData.questions[Math.floor(Math.random() * shapeData.questions.length)];
        const dims = shapeData.generateDims();
        const shapeLabel = shape.replace('_', ' ');
        const context = questionConfig.getContext ? questionConfig.getContext(dims) : {};
        const correctAnswer = roundToTwo(questionConfig.getAnswer(dims));
        const prompt = questionConfig.getPrompt(shapeLabel, dims, context);

        setCurrentProblem({
            shape,
            dims,
            questionType: questionConfig.type,
            correctAnswer,
            renderer: shapeData.render,
            prompt,
            context,
        });
        setFeedback('');
        setUserAnswer('');
    };

    const checkAnswer = () => {
        const answer = parseFloat(userAnswer);
        if (isNaN(answer)) {
            setFeedback('Please enter a valid number.');
            return;
        }

        if (Math.abs(answer - currentProblem.correctAnswer) < 0.01) {
            setFeedback('Correct! Great job!');
        } else {
            setFeedback(`Not quite. The correct answer is ${currentProblem.correctAnswer}.`);
        }
    };

    useEffect(() => {
        // Generate a problem when the component mounts
        generateProblem('rectangle');
    }, []);

    const showExitButton = typeof onExit === 'function';

    return (
        <div className="fade-in">
            <header className="flex flex-wrap items-center justify-between gap-3 pb-4 mb-4 border-b">
                <div className="flex-none min-w-[120px]">
                    {showExitButton && (
                        <button onClick={onExit} className="flex items-center gap-1 text-sm text-slate-600 hover:text-sky-600 font-semibold"><ArrowLeftIcon /> Back</button>
                    )}
                </div>
                <h2 className="text-xl font-bold text-center text-slate-800 flex-1">Geometry Practice Tool</h2>
                <div className="flex-none min-w-[120px]" aria-hidden="true"></div>
            </header>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="md:col-span-2 bg-slate-50 rounded-lg p-4 flex flex-col items-center justify-center">
                    {currentProblem ? (
                        <>
                            <svg width="100%" height="300" viewBox="0 0 350 250">
                                {currentProblem.renderer(currentProblem.dims, currentProblem.context)}
                            </svg>
                            <p className="text-lg font-semibold mt-4">{currentProblem.prompt}</p>
                        </>
                    ) : (
                        <p>Select a shape to begin.</p>
                    )}
                </div>
                <div className="space-y-4">
                    <div>
                        <h3 className="text-lg font-semibold mb-2">Shapes</h3>
                        <div className="grid grid-cols-2 gap-2">
                            {Object.keys(SHAPE_LIBRARY).map(shape => (
                                <button key={shape} onClick={() => generateProblem(shape)} className={`p-2 font-semibold rounded-md transition capitalize ${currentProblem?.shape === shape ? 'bg-sky-600 text-white' : 'bg-slate-200 hover:bg-slate-300'}`}>
                                    {shape.replace('_', ' ')}
                                </button>
                            ))}
                        </div>
                    </div>
                    {currentProblem && (
                        <div className="space-y-2">
                            <label htmlFor="answer" className="font-semibold text-slate-600">Your Answer:</label>
                            <input
                                type="number"
                                id="answer"
                                value={userAnswer}
                                onChange={(e) => setUserAnswer(e.target.value)}
                                className="w-full p-2 border border-slate-300 rounded-md"
                            />
                            <button onClick={checkAnswer} className="w-full p-2 bg-green-500 text-white font-bold rounded-lg hover:bg-green-600 transition">Check Answer</button>
                            {feedback && (
                                <p className={`mt-2 p-2 rounded-md text-center font-semibold ${feedback.includes('Correct') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                                    {feedback}
                                </p>
                            )}
                            <button onClick={() => generateProblem(currentProblem.shape)} className="w-full p-2 mt-2 bg-sky-500 text-white font-bold rounded-lg hover:bg-sky-600 transition">Next Problem</button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

function GraphingTool({ onExit }) {
    const boardRef = React.useRef(null);
    const boardInstance = React.useRef(null);
    const plottedFunctions = React.useRef([]);
    const intersectionPoints = React.useRef([]);
    const plottedPoints = React.useRef([]);
    const toolModeRef = React.useRef('plotLine');
    const [equationInputs, setEquationInputs] = React.useState(['2x + 1']);
    const [tableData, setTableData] = React.useState([]);
    const [error, setError] = React.useState('');
    const [toolMode, setToolMode] = React.useState('plotLine'); // 'plotLine' or 'plotPoint'

    React.useEffect(() => {
        if (!boardInstance.current) {
            boardInstance.current = JXG.JSXGraph.initBoard(boardRef.current.id, {
                boundingbox: [-10, 10, 10, -10],
                axis: true,
                grid: true,
                showCopyright: false
            });

            boardInstance.current.on('up', function(e) {
                if (toolModeRef.current === 'plotPoint') {
                    const coords = boardInstance.current.getUsrCoordsOfMouse(e);
                    const x = Math.round(coords[0]);
                    const y = Math.round(coords[1]);
                    const point = boardInstance.current.create('point', [x, y], { name: `(${x}, ${y})`, size: 4 });
                    plottedPoints.current.push(point);
                }
            });
        }
    }, []);

    React.useEffect(() => {
        toolModeRef.current = toolMode;
    }, [toolMode]);

    const palette = ['#2563eb', '#16a34a', '#f97316', '#9333ea', '#ef4444', '#0ea5e9', '#facc15', '#a855f7'];

    const clearPlottedObjects = React.useCallback(() => {
        const board = boardInstance.current;
        if (!board) return;
        board.suspendUpdate();
        const removeIfExists = (obj) => {
            if (obj && obj.id && board.objects[obj.id]) {
                board.removeObject(obj);
            }
        };
        plottedFunctions.current.forEach(removeIfExists);
        intersectionPoints.current.forEach(removeIfExists);
        plottedPoints.current.forEach(removeIfExists);
        plottedFunctions.current = [];
        intersectionPoints.current = [];
        plottedPoints.current = [];
        board.unsuspendUpdate();
    }, []);

    const handlePlot = () => {
        setError('');
        if (toolMode !== 'plotLine') return;

        try {
            const board = boardInstance.current;
            if (!board) return;

            const parsedEquations = equationInputs.map((input) => {
                const trimmed = (input || '').trim();
                if (!trimmed) {
                    throw new Error('Please enter an equation for each input field.');
                }
                const preparedInput = trimmed.toLowerCase().replace(/\s/g, '');
                const parts = preparedInput.match(/^(-?\d*\.?\d*)x([+-]\d+\.?\d*)?$/);
                if (!parts) {
                    throw new Error("Use 'mx+b' format, e.g., '3x-4'.");
                }

                const m = parts[1] === '-' ? -1 : (parts[1] === '' ? 1 : parseFloat(parts[1]));
                const b = parts[2] ? parseFloat(parts[2]) : 0;
                if (isNaN(m) || isNaN(b)) {
                    throw new Error('Invalid number format.');
                }

                return {
                    input: trimmed,
                    func: (x) => m * x + b,
                };
            });

            clearPlottedObjects();

            board.suspendUpdate();

            const newTableData = [];

            parsedEquations.forEach(({ input, func }, index) => {
                const color = palette[index % palette.length];
                const graph = board.create('functiongraph', [func], {
                    strokeColor: color,
                    strokeWidth: 3,
                });
                plottedFunctions.current.push(graph);

                const values = Array.from({ length: 11 }, (_, idx) => {
                    const x = idx - 5;
                    return { x, y: func(x) };
                });

                newTableData.push({ equation: input, color, values });
            });

            if (plottedFunctions.current.length > 1) {
                for (let i = 0; i < plottedFunctions.current.length - 1; i++) {
                    for (let j = i + 1; j < plottedFunctions.current.length; j++) {
                        const intersection = board.create('intersection', [plottedFunctions.current[i], plottedFunctions.current[j]], {
                            name: '',
                            size: 3,
                            strokeColor: '#f97316',
                            fillColor: '#f97316',
                        });
                        if (intersection.label) {
                            intersection.label.setText(() => `(${intersection.X().toFixed(2)}, ${intersection.Y().toFixed(2)})`);
                            intersection.label.setAttribute({
                                offset: [10, -10],
                                strokeColor: '#0f172a',
                            });
                        }
                        intersectionPoints.current.push(intersection);
                    }
                }
            }

            board.unsuspendUpdate();
            setTableData(newTableData);
        } catch (e) {
            setError(e.message || "Could not plot equation.");
        }
    };

    const handleClear = () => {
        clearPlottedObjects();
        setError('');
        setTableData([]);
        setEquationInputs(['2x + 1']);
    };

    const handleEquationChange = (index, value) => {
        setEquationInputs((prev) => {
            const updated = [...prev];
            updated[index] = value;
            return updated;
        });
    };

    const addEquationInput = () => {
        setEquationInputs((prev) => [...prev, '']);
    };

    const removeEquationInput = (index) => {
        setEquationInputs((prev) => {
            if (prev.length === 1) return prev;
            const updated = prev.filter((_, idx) => idx !== index);
            return updated.length > 0 ? updated : ['2x + 1'];
        });
    };

    const showExitButton = typeof onExit === 'function';

    return (
        <div className="fade-in">
             <header className="flex flex-wrap items-center justify-between gap-3 pb-4 mb-4 border-b">
                 <div className="flex-none min-w-[120px]">
                     {showExitButton && (
                         <button onClick={onExit} className="flex items-center gap-1 text-sm text-slate-600 hover:text-sky-600 font-semibold"><ArrowLeftIcon /> Back</button>
                     )}
                 </div>
                 <h2 className="text-xl font-bold text-center text-slate-800 flex-1">Interactive Graphing Tool</h2>
                 <div className="flex-none min-w-[120px]" aria-hidden="true"></div>
            </header>
            <div className="flex flex-col md:flex-row gap-6">
                <div className="flex-grow">
                     <div id="graphing-tool-board" ref={boardRef} className="jxgbox" style={{ width: '100%', height: '400px' }}></div>
                </div>
                <div className="md:w-72 flex-shrink-0">
                    <h3 className="text-lg font-semibold text-slate-700 mb-2">Tools</h3>
                    <div className="flex gap-2 mb-4">
                        <button onClick={() => setToolMode('plotLine')} className={`flex-1 p-2 font-semibold rounded-md transition ${toolMode === 'plotLine' ? 'bg-sky-600 text-white' : 'bg-slate-200 hover:bg-slate-300'}`}>Plot Line</button>
                        <button onClick={() => setToolMode('plotPoint')} className={`flex-1 p-2 font-semibold rounded-md transition ${toolMode === 'plotPoint' ? 'bg-sky-600 text-white' : 'bg-slate-200 hover:bg-slate-300'}`}>Plot Point</button>
                    </div>

                    {toolMode === 'plotLine' ? (
                        <div>
                            <p className="font-semibold text-slate-600 mb-2">Equations (y = )</p>
                            <div className="space-y-3">
                                {equationInputs.map((value, index) => (
                                    <div key={index} className="flex items-center gap-2">
                                        <input
                                            type="text"
                                            value={value}
                                            onChange={(e) => handleEquationChange(index, e.target.value)}
                                            placeholder="e.g., 2x - 3"
                                            className="flex-1 p-2 border border-slate-300 rounded-md"
                                        />
                                        <button
                                            onClick={() => removeEquationInput(index)}
                                            className="p-2 text-sm bg-slate-200 rounded-md hover:bg-slate-300"
                                            title="Remove equation"
                                            disabled={equationInputs.length === 1}
                                        >
                                            Remove
                                        </button>
                                    </div>
                                ))}
                            </div>
                            <div className="flex gap-2 mt-3">
                                <button onClick={addEquationInput} className="flex-1 p-2 bg-slate-200 text-slate-700 font-semibold rounded-md hover:bg-slate-300 transition">Add Equation</button>
                                <button onClick={handlePlot} className="flex-1 p-2 bg-sky-600 text-white font-bold rounded-md hover:bg-sky-700 transition">Plot All</button>
                            </div>
                        </div>
                    ) : (
                        <div>
                            <p className="p-2 bg-sky-50 text-sky-800 rounded-md text-center">Click anywhere on the graph to plot a point.</p>
                        </div>
                    )}
                    <button onClick={handleClear} className="w-full p-2 mt-3 bg-red-500 text-white font-bold rounded-lg hover:bg-red-600 transition">Clear All</button>
                    {error && <p className="text-red-500 text-sm mt-3">{error}</p>}
                </div>
            </div>
            <div className="mt-6 bg-white shadow-sm rounded-lg p-4">
                <h3 className="text-lg font-semibold text-slate-700 mb-3">Table of Values</h3>
                {tableData.length === 0 ? (
                    <p className="text-slate-500 text-sm">Plot at least one equation to see table values from x = -5 to x = 5.</p>
                ) : (
                    <div className="grid md:grid-cols-2 gap-4">
                        {tableData.map(({ equation, color, values }, index) => (
                            <div key={index} className="border border-slate-200 rounded-md overflow-hidden">
                                <div className="flex items-center justify-between bg-slate-100 px-3 py-2">
                                    <span className="text-sm font-semibold text-slate-700">y = {equation}</span>
                                    <span className="inline-flex items-center gap-2 text-xs text-slate-500">
                                        <span className="w-3 h-3 rounded-full" style={{ backgroundColor: color }}></span>
                                        Graph Color
                                    </span>
                                </div>
                                <table className="w-full text-sm">
                                    <thead>
                                        <tr className="bg-slate-50 text-slate-600">
                                            <th className="px-3 py-2 text-left">x</th>
                                            <th className="px-3 py-2 text-left">y</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {values.map(({ x, y }) => (
                                            <tr key={x} className="odd:bg-white even:bg-slate-50 text-slate-700">
                                                <td className="px-3 py-1">{x}</td>
                                                <td className="px-3 py-1">{Number.isFinite(y) ? y.toFixed(2) : 'N/A'}</td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
}

function MathPracticeToolsModal({ isOpen, onClose, activeTab, onTabChange, graphingNode, geometryNode }) {
    const overlayRef = React.useRef(null);

    React.useEffect(() => {
        if (!isOpen) {
            return;
        }
        const handleKeyDown = (event) => {
            if (event.key === 'Escape') {
                onClose?.();
            }
        };
        window.addEventListener('keydown', handleKeyDown);
        return () => window.removeEventListener('keydown', handleKeyDown);
    }, [isOpen, onClose]);

    const handleOverlayClick = (event) => {
        if (event.target === overlayRef.current) {
            onClose?.();
        }
    };

    const tabs = [
        { id: 'graphing', label: 'Graphing Tool' },
        { id: 'geometry', label: 'Geometry Tool' },
    ];

    return (
        <div
            ref={overlayRef}
            className="fixed inset-0 z-[60] flex items-center justify-center px-4 py-6"
            style={{ display: isOpen ? 'flex' : 'none', backgroundColor: 'var(--modal-overlay)' }}
            onClick={handleOverlayClick}
            role="dialog"
            aria-modal="true"
            aria-label="Math Practice Tools"
        >
            <div
                className="w-full max-w-6xl bg-white rounded-2xl shadow-2xl overflow-hidden"
                onClick={(event) => event.stopPropagation()}
            >
                <div className="flex items-center justify-between border-b px-6 py-4 bg-slate-50">
                    <h2 className="text-2xl font-bold text-slate-800">Math Practice Tools</h2>
                    <button
                        onClick={onClose}
                        className="text-slate-500 hover:text-slate-800 transition"
                        aria-label="Close math practice tools"
                    >
                        ✕
                    </button>
                </div>
                <div className="px-6 pt-4">
                    <div className="flex flex-wrap gap-2">
                        {tabs.map((tab) => (
                            <button
                                key={tab.id}
                                onClick={() => onTabChange?.(tab.id)}
                                className={`px-4 py-2 rounded-lg font-semibold transition ${activeTab === tab.id ? 'bg-sky-600 text-white shadow' : 'bg-slate-200 text-slate-700 hover:bg-slate-300'}`}
                            >
                                {tab.label}
                            </button>
                        ))}
                    </div>
                </div>
                <div className="p-6 pt-4 space-y-6">
                    {graphingNode && (
                        <div style={{ display: activeTab === 'graphing' ? 'block' : 'none' }}>
                            {graphingNode}
                        </div>
                    )}
                    {geometryNode && (
                        <div style={{ display: activeTab === 'geometry' ? 'block' : 'none' }}>
                            {geometryNode}
                        </div>
                    )}
                    {!graphingNode && !geometryNode && (
                        <div className="py-16 text-center text-slate-500">
                            Preparing tools...
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

const MATH_PIPELINE_TEST_CASES = [
    { description: 'Trailing currency symbol', input: 'The price is 7$ today.' },
    { description: 'Leading currency symbol', input: 'Please pay $30 before Friday.' },
    { description: 'Escaped currency should persist', input: 'Escaped currency \\$18 should stay as dollars.' },
    { description: 'Inline math remains intact', input: 'Solve the equation $x + 3 = 9$ now.' },
    { description: 'Display math remains intact', input: 'Compute $$\\frac{3}{4}$$ of the recipe.' },
    { description: 'Broken LaTeX treated as text', input: 'Broken latex \\frac{2}{5} should remain plain text.' },
    { description: 'Table with currency values', input: '<table><tr><th>Item</th><th>Cost ($)</th></tr><tr><td>Book</td><td>$5</td></tr></table>' },
    { description: 'Spaced table markup with dollars', input: '< table >< tr >< td >$10< /td ></tr></table>' },
    { description: 'Stray dollar sign in sentence', input: 'Sentence with stray $ sign in the middle.' },
    { description: 'HTML entity currency stays escaped', input: 'HTML entity shows 5&#36; plus tax.' },
    { description: 'Angles with math delimiters', input: 'Angles like $m\\angle ABC = 45^\\circ$ are fine.' },
    { description: 'Table header currency', input: '<table><thead><tr><th>Revenue $ (USD)</th></tr></thead></table>' }
];

function runMathPipelineDiagnostics() {
    const failures = [];

    MATH_PIPELINE_TEST_CASES.forEach((test, index) => {
        const processed = preprocessRawContent(test.input, { normalizeSpacing: true });
        const segments = extractMathSegments(processed);
        const textSegments = segments.filter(segment => segment.type === 'text');

        const issues = [];

        if (textSegments.some(seg => /(^|[^\\])\$(?!\$)/.test(seg.value))) {
            issues.push('loneDollarSign');
        }

        if (textSegments.some(seg => /<\s*(?:tr|th|td)/i.test(seg.value))) {
            issues.push('rawTableMarkup');
        }

        const displayDelimiterMatches = processed.match(/\$\$/g) || [];
        if (displayDelimiterMatches.length % 2 !== 0) {
            issues.push('unbalancedDisplayMath');
        }

        const inlineScope = processed.replace(/\$\$[\s\S]+?\$\$/g, '');
        const inlineDelimiterMatches = inlineScope.match(/\$/g) || [];
        if (inlineDelimiterMatches.length % 2 !== 0) {
            issues.push('unbalancedInlineMath');
        }

        if (issues.length > 0) {
            failures.push({ index, description: test.description, issues, processed, segments });
        }
    });

    if (failures.length > 0) {
        console.warn('[MathPipelineDiagnostics] Failures detected:', failures);
    } else {
        console.info('[MathPipelineDiagnostics] All test cases passed.');
    }
}

if (typeof window !== 'undefined' && window.location && window.location.search.includes('mathdiag=1')) {
    setTimeout(runMathPipelineDiagnostics, 0);
}

function useThemeController() {
    const [theme, setTheme] = useState(() => {
        if (typeof window === 'undefined') {
            return 'light';
        }
        return window.__START_THEME__ === 'dark' ? 'dark' : 'light';
    });

    const applyTheme = useCallback((nextTheme) => {
        const normalized = nextTheme === 'dark' ? 'dark' : 'light';
        if (typeof document !== 'undefined') {
            const body = document.body;
            if (body) {
                body.classList.toggle('dark', normalized === 'dark');
            }
            const root = document.documentElement;
            if (root) {
                root.classList.toggle('dark', normalized === 'dark');
            }
        }
        try {
            if (typeof window !== 'undefined' && window.localStorage) {
                window.localStorage.setItem('appTheme', normalized);
            }
        } catch (error) {
            console.warn('Unable to persist theme preference:', error);
        }
        setTheme((current) => (current === normalized ? current : normalized));
    }, []);

    const toggleTheme = useCallback(() => {
        applyTheme(theme === 'dark' ? 'light' : 'dark');
    }, [theme, applyTheme]);

    return { theme, toggleTheme, applyTheme };
}

function RootApp() {
    const { theme, toggleTheme, applyTheme } = useThemeController();

    const handleThemeChange = useCallback((nextTheme) => {
        applyTheme(nextTheme);
    }, [applyTheme]);

    return (
        <>
            <div className="fixed top-4 right-4 z-50">
                <button
                    type="button"
                    onClick={toggleTheme}
                    className="rounded-full bg-slate-200 px-4 py-2 text-sm font-semibold text-slate-700 shadow transition hover:bg-slate-300 dark:bg-slate-700 dark:text-slate-100 dark:hover:bg-slate-600"
                >
                    {theme === 'dark' ? 'Switch to Light Mode' : 'Switch to Dark Mode'}
                </button>
            </div>
            <ErrorBoundary>
                <App externalTheme={theme} onThemeChange={handleThemeChange} />
            </ErrorBoundary>
        </>
    );
}

// --- RENDER APP ---
const container = document.getElementById('root');
const root = ReactDOM.createRoot(container);
root.render(<RootApp />);

</script>

</body>
</html>
